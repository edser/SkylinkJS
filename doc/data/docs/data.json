{
    "project": {
        "name": "skylinkjs",
        "description": "Web SDK for Temasys Skylink platform",
        "version": "0.6.19",
        "url": "https://temasys.io/"
    },
    "files": {
        "source/components/datachannel.js": {
            "name": "source/components/datachannel.js",
            "modules": {},
            "classes": {
                "Temasys.Datachannel": 1
            },
            "fors": {
                "Temasys": 1,
                "Temasys.Datachannel": 1
            },
            "namespaces": {}
        },
        "source/components/datatransfer.js": {
            "name": "source/components/datatransfer.js",
            "modules": {},
            "classes": {
                "Temasys.Datatransfer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/components/debugger.js": {
            "name": "source/components/debugger.js",
            "modules": {},
            "classes": {
                "Temasys.Debugger": 1
            },
            "fors": {
                "Temasys.Debugger": 1
            },
            "namespaces": {}
        },
        "source/components/peer.js": {
            "name": "source/components/peer.js",
            "modules": {},
            "classes": {
                "Temasys.Peer": 1
            },
            "fors": {
                "Temasys": 1,
                "Temasys.Peer": 1
            },
            "namespaces": {}
        },
        "source/components/room.js": {
            "name": "source/components/room.js",
            "modules": {},
            "classes": {
                "Temasys.Room": 1
            },
            "fors": {
                "Temasys.Room": 1,
                "Room": 1
            },
            "namespaces": {}
        },
        "source/components/socket.js": {
            "name": "source/components/socket.js",
            "modules": {},
            "classes": {
                "Temasys.Socket": 1
            },
            "fors": {
                "Temasys.Socket": 1
            },
            "namespaces": {}
        },
        "source/components/stream.js": {
            "name": "source/components/stream.js",
            "modules": {},
            "classes": {
                "Temasys.Stream": 1
            },
            "fors": {
                "Temasys": 1,
                "Temasys.Stream": 1
            },
            "namespaces": {}
        },
        "source/components/utils.js": {
            "name": "source/components/utils.js",
            "modules": {},
            "classes": {
                "Temasys.Utils": 1
            },
            "fors": {
                "Temasys.Utils": 1
            },
            "namespaces": {}
        },
        "source/template/header.js": {
            "name": "source/template/header.js",
            "modules": {},
            "classes": {
                "Skylink": 1
            },
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-channel.js": {
            "name": "source/data-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-process.js": {
            "name": "source/data-process.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-transfer.js": {
            "name": "source/data-transfer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-candidate.js": {
            "name": "source/ice-candidate.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-connection.js": {
            "name": "source/ice-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-connection.js": {
            "name": "source/peer-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-data.js": {
            "name": "source/peer-data.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-handshake.js": {
            "name": "source/peer-handshake.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-privileged.js": {
            "name": "source/peer-privileged.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-connection.js": {
            "name": "source/room-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-init.js": {
            "name": "source/room-init.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-debug.js": {
            "name": "source/skylink-debug.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-events.js": {
            "name": "source/skylink-events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-channel.js": {
            "name": "source/socket-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-message.js": {
            "name": "source/socket-message.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-media.js": {
            "name": "source/stream-media.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-sdp.js": {
            "name": "source/stream-sdp.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Temasys.Datachannel": {
            "name": "Temasys.Datachannel",
            "shortname": "Temasys.Datachannel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/datachannel.js",
            "line": 1,
            "description": "Handles the Peer Datachannel connection.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "since": "0.7.0"
        },
        "Temasys": {
            "name": "Temasys",
            "shortname": "Temasys",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Temasys.Datatransfer": {
            "name": "Temasys.Datatransfer",
            "shortname": "Temasys.Datatransfer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/datatransfer.js",
            "line": 1,
            "description": "Handles the Datatransfer session."
        },
        "Temasys.Debugger": {
            "name": "Temasys.Debugger",
            "shortname": "Temasys.Debugger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/debugger.js",
            "line": 1,
            "description": "Handles the SDK debugger.",
            "since": "0.7.0",
            "typedef": "module"
        },
        "Temasys.Peer": {
            "name": "Temasys.Peer",
            "shortname": "Temasys.Peer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/peer.js",
            "line": 1,
            "description": "Handles the native `RTCPeerConnection` object connection.",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "constraints",
                            "description": "@(exp) The native `RTCPeerConnection` object constraints settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "iceTransportPolicy",
                                    "description": "The ICE transport policy for gathering ICE candidates.\n- See {{#crossLink \"Temasys.Peer/ICE_TRANSPORT_POLICY_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "ALL"
                                },
                                {
                                    "name": "rtcpMuxPolicy",
                                    "description": "The RTP and RTCP multiplex policy for gathering ICE candidates.\n- See {{#crossLink \"Temasys.Peer/RTCP_MUX_POLICY_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "REQUIRE"
                                },
                                {
                                    "name": "bundlePolicy",
                                    "description": "The bundle policy for gathering ICE candidates.\n- See {{#crossLink \"Temasys.Peer/BUNDLE_POLICY_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "BALANCED"
                                },
                                {
                                    "name": "iceCandidatePoolSize",
                                    "description": "The ICE candidate pool size to limit\n  for gathering ICE candidates.\n- Set it as `0` to remove limits.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "certificate",
                                    "description": "The certificate algorithm to use for\n  the ICE connection media streaming encryption.\n- When provided as `String`, see {{#crossLink \"Temasys.Peer/CERTIFICATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String|RTCCertificate",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers",
                                    "description": "The ICE servers settings.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers.turn",
                                    "description": "The TURN ICE servers settings.\n- When provided as a `Boolean`, it determines if TURN ICE servers should be used.",
                                    "type": "JSON|Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers.turn.secure",
                                    "description": "The flag if TURN servers with TLS only should be used.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "iceServers.turn.transport",
                                    "description": "The TURN server transport to use.\n- See {{#crossLink \"Temasys.Peer/TURN_TRANSPORT_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "AUTO"
                                },
                                {
                                    "name": "iceServers.turn.urls",
                                    "description": "The list of TURN servers urls to use.\n E.g. `(\"turn.temasys.io:3478\", \"turn.temasys.io:19305\")` or `\"turn.temasys.io\"`",
                                    "type": "Array|String",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers.stun",
                                    "description": "The STUN ICE servers settings.\n- When provided as a `Boolean`, it determines if STUN ICE servers should be used.",
                                    "type": "JSON|Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers.stun.public",
                                    "description": "The flag if public STUN ICE servers should be used.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "iceServers.stun.urls",
                                    "description": "The list of STUN servers urls to use.\n E.g. `(\"turn.temasys.io:3478\", \"turn.temasys.io:19305\")` or `\"turn.temasys.io\"`",
                                    "type": "Array|String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "candidates",
                            "description": "@(exp) The ICE candidates settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "host",
                                    "description": "The flag if \"host\" ICE candidates should be used.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "srflx",
                                    "description": "The flag if \"srflx\" ICE candidates should be used.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "relay",
                                    "description": "The flag if \"relay\" ICE candidates should be used.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "codecs",
                            "description": "@(exp) The codecs settings.\n- This configures the Peer connection native `RTCSessionDescription` object string.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "params",
                                    "description": "The media connection codecs parameters settings.\n- When settings are not provided, the default browser configuration is used.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio",
                                    "description": "The media connection audio codecs settings.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus",
                                    "description": "The media connection OPUS audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings. E.g. `minptime=1;stereo=1`",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus.stereo",
                                    "description": "The flag if OPUS audio codec stereo band\n  should be configured for sending audio packets.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus.usedtx",
                                    "description": "The flag if OPUS audio codec should enable\n  DTX (Discontinuous Transmission) for sending audio packets. This might help to reduce bandwidth\n  as it reduces the bitrate during silence or background noise, and goes hand-in-hand with the\n  `options.media.audio.voiceActivityDetection` flag.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus.useinbandfec",
                                    "description": "The flag if OPUS audio codec has the\n  capability to take advantage of the in-band FEC (Forward Error Correction) when sending audio packets.\n  This helps to reduce the harm of packet loss by encoding information about the previous packet loss.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus.maxplaybackrate",
                                    "description": "The OPUS audio codec\n  maximum output sampling rate in Hz (hertz) that is is capable of receiving audio packets,\n  to adjust to the hardware limitations and ensure that any sending audio packets\n  would not encode at a higher sampling rate specified by this.\n- This value must be between `8000` to `48000`.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.opus.minptime",
                                    "description": "The OPUS audio codec encoder\n  minimum length of time in milleseconds should be encapsulated for a single audio data packet.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.telephoneEvent",
                                    "description": "The media connection DTMF audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings. E.g. `0-5`",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.pcma",
                                    "description": "The media connection PCMA (G711a) audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.pcmu",
                                    "description": "The media connection PCMU (G711u) audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.g722",
                                    "description": "The media connection G722 audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.isac",
                                    "description": "The media connection ISAC audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.audio.ilbc",
                                    "description": "The media connection iLBC audio codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.video",
                                    "description": "The media connection video codecs settings.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.h264",
                                    "description": "The media connection H264 video codec settings.\n- When provided as a `String`, it sets as the full parameter settings. E.g. `levelAsymmetryAllowed=1;packetizationMode=1`",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.h264.profileLevelId",
                                    "description": "The H264 video codec base16 encoded\n  string which indicates the H264 baseline, main, or the extended profiles.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.h264.levelAsymmetryAllowed",
                                    "description": "The flag if H264 video codec\n  encoder of video packets should be at a different level from decoder of video packets.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.h264.packetizationMode",
                                    "description": "The flag if H264 video codec\n  packetization mode should be enabled where it splits video frames that are larger for a RTP packet into RTP packet chunks.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp8",
                                    "description": "The media connection VP8 video codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp8.maxFr",
                                    "description": "The maximum number of frames per second (fps) the\n  VP8 video decoder is capable of decoding video packets.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp8.maxFs",
                                    "description": "The maximum number of frame size macroblocks\n  that the VP8 video decoder is capable of decoding video packets.\n- The value has to have the width and height of the frame in macroblocks less than the value of\n  `parseInt(Math.sqrt(maxFs * 8))`. For example, if the value is `1200`, it is capable of the\n  support of `640x480` frame width and height, which heights up to `1552px` (`97` macroblocks value.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp9",
                                    "description": "The media connection VP9 video codec settings.\n- When provided as a `String`, it sets as the full parameter settings.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp9.maxFr",
                                    "description": "The maximum number of frames per second (fps) the\n  VP9 video decoder is capable of decoding video packets.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "params.video.vp9.maxFs",
                                    "description": "The maximum number of frame size macroblocks\n  that the VP9 video decoder is capable of decoding video packets.\n- The value has to have the width and height of the frame in macroblocks less than the value of\n  `parseInt(Math.sqrt(maxFs * 8))`. For example, if the value is `1200`, it is capable of the\n  support of `640x480` frame width and height, which heights up to `1552px` (`97` macroblocks value.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "prefer",
                                    "description": "The media connection codec preference settings.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "prefer.audio",
                                    "description": "The preferred audio codec settings.\n- When provided as a `String`, it is the preferred audio codec name.\n- See {{#crossLink \"Temasys.Peer/AUDIO_CODEC_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String|JSON",
                                    "optional": true,
                                    "optdefault": "AUTO"
                                },
                                {
                                    "name": "prefer.audio.codec",
                                    "description": "The preferred audio codec name.\n- Note that value cannot be `AUDIO_CODEC_ENUM.AUTO`.\n- See {{#crossLink \"Temasys.Peer/AUDIO_CODEC_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String"
                                },
                                {
                                    "name": "prefer.audio.codec.samplingRate",
                                    "description": "The preferred audio codec sampling rate\n  if available for the preferred audio codec name.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "prefer.audio.codec.channels",
                                    "description": "The preferred audio codec channels\n  if available for the preferred audio codec name.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "prefer.video",
                                    "description": "The preferred audio codec settings.\n- When provided as a `String`, it is the preferred video codec name.\n- See {{#crossLink \"Temasys.Peer/VIDEO_CODEC_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String|JSON",
                                    "optional": true,
                                    "optdefault": "AUTO"
                                },
                                {
                                    "name": "prefer.video.codec",
                                    "description": "The preferred video codec name.\n- Note that value cannot be `VIDEO_CODEC_ENUM.AUTO`.\n- See {{#crossLink \"Temasys.Peer/VIDEO_CODEC_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String"
                                },
                                {
                                    "name": "prefer.video.codec.samplingRate",
                                    "description": "The preferred video codec sampling rate\n  if available for the preferred video codec name.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mechanism",
                                    "description": "The codecs RTCP or FECs settings.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "mechanism.ulpfec",
                                    "description": "The flag to enable ULPFEC codec\n  (generic forward error correction) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.red",
                                    "description": "The flag to enable RED codec\n  (generic forward error correction) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.rtx",
                                    "description": "The flag to enable RTX (re-transmission) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.remb",
                                    "description": "The flag to enable REMB\n  (receiver estimated maximum bitrate) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.nack",
                                    "description": "The flag to enable NACK\n  (negative acknowledgement) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.ccm",
                                    "description": "The flag to enable CCM\n  (codec control messages) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mechanism.transportcc",
                                    "description": "The flag to enable transport-cc\n  (transport-wide congestion control) mechanism when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "media",
                            "description": "The Peer connection media connection settings.\n- This configures the Peer connection native `RTCSessionDescription` object string.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "The media audio streaming settings.\n- When provided as `false`, this disables the audio streaming connection entirely.",
                                    "type": "JSON|Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.send",
                                    "description": "The flag if audio packets should be sent to Peer connection.\n- When provided as `false`, this prevents sending audio packets to Peer despite audio tracks being added.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "audio.receive",
                                    "description": "The flag if audio packets should be sent to Peer connection.\n- When provided as `false`, this prevents receiving audio packets from Peer despite audio tracks being added remotely.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "audio.voiceActivityDetection",
                                    "description": "The flag if voice activity detection\n  (VAD) should be enabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "audio.dtmf",
                                    "description": "The flag if DTMF should be created if supported.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.maxBandwidth",
                                    "description": "The maximum range limit of sending audio bandwidth in kbps.\n- The bandwidth might be lower or higher by a few kbps than the specified range at times.\n- Set it as `0` to remove limits.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "20"
                                },
                                {
                                    "name": "video",
                                    "description": "The media video streaming settings.\n- When provided as `false`, this disables the video streaming connection entirely.",
                                    "type": "JSON|Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "video.send",
                                    "description": "The flag if video packets should be sent to Peer connection.\n- When provided as `false`, this prevents sending video packets to Peer despite video tracks being added.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "video.receive",
                                    "description": "The flag if video packets should be sent to Peer connection.\n- When provided as `false`, this prevents receiving video packets from Peer despite video tracks being added remotely.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "video.maxBandwidth",
                                    "description": "The maximum range limit of sending video bandwidth in kbps.\n- The bandwidth might be lower or higher by a few kbps than the specified range at times.\n- Set it as `0` to remove limits.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "512"
                                },
                                {
                                    "name": "video.xGoogleBandwidth",
                                    "description": "@(exp) The bitrate configuration for video codec bandwidth.\n- When settings are not provided, the default browser configuration is used.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.xGoogleBandwidth.min",
                                    "description": "The `\"x-google-min-bitrate\"` configuration.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.xGoogleBandwidth.max",
                                    "description": "The `\"x-google-max-bitrate\"` configuration.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "datachannel",
                                    "description": "The media datachannel connection settings.\n- When provided as `false`, this disables the datachannel connection entirely.",
                                    "type": "JSON|Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "datachannel.maxBandwidth",
                                    "description": "The maximum range limit of sending datachannel bandwidth in kbps.\n- The bandwidth might be lower or higher by a few kbps than the specified range at times.\n- Set it as `0` to remove limits.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "30"
                                }
                            ]
                        },
                        {
                            "name": "trickleICE",
                            "description": "The flag if trickle ICE handshake should be enabled.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "since": "0.7.0"
        },
        "Temasys.Room": {
            "name": "Temasys.Room",
            "shortname": "Temasys.Room",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/room.js",
            "line": 1,
            "description": "Handles the client room connection session.",
            "is_constructor": 1,
            "example": [
                "\n// Example: Create a room object\nvar room = new Temasys.Room();\nroom.connect({\n  appKey: \"MY_APP_KEY_ID_VALUE_HERE\",\n  name: \"test\"\n});"
            ],
            "since": "0.7.0"
        },
        "Room": {
            "name": "Room",
            "shortname": "Room",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Temasys.Socket": {
            "name": "Temasys.Socket",
            "shortname": "Temasys.Socket",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/socket.js",
            "line": 1,
            "description": "Handles the socket connection to the signaling server.",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "protocol",
                            "description": "The signaling server protocol.\n- Examples: `\"https:\"`, `\"http:\"`\n- When not provided, the value of `window.location.protocol` is used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "server",
                            "description": "The signaling server domain.\n- Examples: `\"signaling.temasys.io\"`\n- When not provided, the default value returned from auth server is used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "path",
                            "description": "The signaling server path if required.\n- Examples: `\"/\"`, `\"/socket.io\"`\n- When not provided, the default value is `\"/socket.io\"`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ports",
                            "description": "The list of signaling ports - where each item is a _Number_.\n- Examples: `new Array(80, 3000)`, `new Array(443, 3443)`\n- When not provided, the default value returned from auth server is used.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "reconnectionAttempts",
                            "description": "The number of reconnection attempts for each port and transport pair.\n- Range: `0` - `5`\n- When not provided, the default value is `0`, which means no reconnection attempts should be made.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "reconnectionDelay",
                            "description": "The number of miliseconds to wait before starting the\n  next reconnection attempt. This is tampered with the `.randomizationFactor` configured.\n- Range: `1` and above\n- When not provided, the default value is `1000`.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "reconnectionDelayMax",
                            "description": "The maximum number of miliseconds to wait before starting the\n  next reconnection attempt.\n- Range: `1` and above\n- When not provided, the default value is `5000`.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "randomizationFactor",
                            "description": "The randominzation factor (+/-) for each reconnection attempts.\n- Range: `0` - `1`\n- Output reconnection delay would be `800` or `1200` if value is `0.2` with `.reconnectionDelay` set to `1000`.\n- Output reconnection delay would be `500` or `1500` if value is `0.5` with `.reconnectionDelay` set to `1000`.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "The number of miliseconds to wait without response before considering that\n  connection attempt has timed out and should consider reconnecting.\n- Range: `0` and above\n- When not provided, the default value is `20000`.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "transports",
                            "description": "The list of signaling transports - where each item is a _String_.\n- Examples: `new Array(\"polling\")`, `new Array(\"websocket\", \"polling\")`\n- When not provided, the default value is `new Array(\"websocket\", \"polling\")`.\n- Reference [`TRANSPORT_ENUM` constant](#docs+Temasys.Socket+constants+TRANSPORT_ENUM) for the list of available transports.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "compression",
                            "description": "The flag if data compression should be enabled when sending messages.\n- When not provided, the default value is `false`.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "since": "0.7.0"
        },
        "Temasys.Stream": {
            "name": "Temasys.Stream",
            "shortname": "Temasys.Stream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/stream.js",
            "line": 1,
            "description": "Handles the native `MediaStream` object audio and video tracks.",
            "params": [
                {
                    "name": "options",
                    "description": "The options.\n- When provided as a native `MediaStream` object, only `1` track each for audio and video is allowed or\n  the object is rejected. Note that audio and video constraints will not be retrieved and be counted as `true`.",
                    "type": "JSON|MediaStream",
                    "props": [
                        {
                            "name": "audio",
                            "description": "The audio track options.\n- When provided as a `Boolean`, it simply passes it as `true` as the native `getUserMedia()` API audio constraint.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "props": [
                                {
                                    "name": "echoCancellation",
                                    "description": "The flag to enable echo cancellation (AEC) when supported.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "sourceId",
                                    "description": "The audio track source ID to request.\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `sourceId: { exact: ..., ideal: ... }`.\n- The list of available audio track sources can be obtained from\n  {{#crossLink \"Utils/Utils.Stream.getSources:method\"}}{{/crossLink}}.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "optional",
                                    "description": "@(exp) The native `getUserMedia()` API audio optional constraints.\n  E.g. `optional: ({ xxx, xxx })`",
                                    "type": "Array",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "The video track options.\n- When provided as a `Boolean`, it simply passes it as `true` as the native `getUserMedia()` API video constraint.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "props": [
                                {
                                    "name": "sourceId",
                                    "description": "The video track source ID to request.\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `sourceId: { exact: ..., ideal: ... }`.\n- The list of available video track sources can be obtained from\n  {{#crossLink \"Utils/Utils.Stream.getSources:method\"}}{{/crossLink}}.",
                                    "type": "JSON|String",
                                    "optional": true
                                },
                                {
                                    "name": "width",
                                    "description": "@(exp) The video track expected video frame resolution width.\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `width: { exact: ..., ideal: ..., min: ..., max: ... }`.",
                                    "type": "JSON|Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "@(exp) The video track expected video frame resolution height.\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `height: { exact: ..., ideal: ..., min: ..., max: ... }`.",
                                    "type": "JSON|Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "@(exp) The video track expected video framerate (fps).\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `frameRate: { exact: ..., ideal: ..., min: ..., max: ... }`.",
                                    "type": "JSON|Number",
                                    "optional": true
                                },
                                {
                                    "name": "facingMode",
                                    "description": "@(exp) The video track expected video camera facing mode.\n- When provided as a `JSON`, it follows the native `getUserMedia()` API constraints.\n  E.g. `facingMode: { exact: ..., ideal: ..., min: ..., max: ... }`.",
                                    "type": "JSON|Number",
                                    "optional": true
                                },
                                {
                                    "name": "screenshare",
                                    "description": "@(exp) The flag if video track is screensharing source.\n- When provided as an `Array` or a `String`, it follows the native `getUserMedia()` API `\"mediaSource\"` constraints.\n  E.g. `mediaSource: options.video.screenshare`.\n- If this is defined (not as `false`), the native `getUserMedia()` API might be executed twice for audio track and\n  video track separately.",
                                    "type": "Array|String|Boolean",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "custom",
                            "description": "@(exp) The custom native `getUserMedia()` API constraints to use.\n  E.g. `custom: { audio: { ... }, video: { ... } }`.\n- If this is defined, this will override all `options.audio` and `options.video` settings.",
                            "type": "JSON",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1,
            "example": [
                "\n  // Example 1: Retrieve audio and video tracks\n  var stream = new Temasys.Stream({ audio: true, video: true });\n  stream.on(\"state\", function (state) {\n    if (state === stream.STATE_ENUM.START) {\n      stream.attachElement(videoDOM);\n    } else if (state === stream.STATE_ENUM.ERROR) {\n      console.log(\"Failed retrieving stream ->\", error);\n    }\n  });\n\n  // Example 2: Append the MediaStream object\n  var stream = new Temasys.Stream(stream);\n  stream.on(\"state\", function (state) {\n    if (state === stream.STATE_ENUM.START) {\n      stream.attachElement(videoDOM);\n    } else if (state === stream.STATE_ENUM.ERROR) {\n      console.log(\"Failed retrieving stream ->\", error);\n    }\n  });"
            ],
            "since": "0.7.0"
        },
        "Temasys.Utils": {
            "name": "Temasys.Utils",
            "shortname": "Temasys.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/components/utils.js",
            "line": 1,
            "description": "Handles the utility functionalities used internally.",
            "since": "0.7.0",
            "typedef": "module"
        },
        "Skylink": {
            "name": "Skylink",
            "shortname": "Skylink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/template/header.js",
            "line": 49,
            "description": "<h2>Prerequisites on using Skylink</h2>\nBefore using any Skylink functionalities, you will need to authenticate your App Key using\n  the <a href=\"#method_init\">`init()` method</a>.\n\nTo manage or create App Keys, you may access the [Skylink Developer Portal here](https://console.temasys.io).\n\nTo view the list of supported browsers, visit [the list here](\nhttps://github.com/Temasys/SkylinkJS#supported-browsers).\n\nHere are some articles to help you get started:\n- [How to setup a simple video call](https://temasys.com.sg/getting-started-with-webrtc-and-skylinkjs/)\n- [How to setup screensharing](https://temasys.com.sg/screensharing-with-skylinkjs/)\n- [How to create a chatroom like feature](https://temasys.com.sg/building-a-simple-peer-to-peer-webrtc-chat/)\n\nHere are some demos you may use to aid your development:\n- Getaroom.io [[Demo](https://getaroom.io) / [Source code](https://github.com/Temasys/getaroom)]\n- Creating a component [[Link](https://github.com/Temasys/skylink-call-button)]\n\nYou may see the example below in the <a href=\"#\">Constructor tab</a> to have a general idea how event subscription\n  and the ordering of <a href=\"#method_init\"><code>init()</code></a> and\n  <a href=\"#method_joinRoom\"><code>joinRoom()</code></a> methods should be called.\n\nIf you have any issues, you may find answers to your questions in the FAQ section on [our support portal](\nhttp://support.temasys.io), asks questions, request features or raise bug tickets as well.\n\nIf you would like to contribute to our Temasys Web SDK codebase, see [the contributing README](\nhttps://github.com/Temasys/SkylinkJS/blob/master/CONTRIBUTING.md).\n\n[See License (Apache 2.0)](https://github.com/Temasys/SkylinkJS/blob/master/LICENSE)",
            "is_constructor": 1,
            "example": [
                "\n  // Here's a simple example on how you can start using Skylink.\n  var skylinkDemo = new Skylink();\n\n  // Subscribe all events first as a general guideline\n  skylinkDemo.on(\"incomingStream\", function (peerId, stream, peerInfo, isSelf) {\n    if (isSelf) {\n      attachMediaStream(document.getElementById(\"selfVideo\"), stream);\n    } else {\n      var peerVideo = document.createElement(\"video\");\n      peerVideo.id = peerId;\n      peerVideo.autoplay = \"autoplay\";\n      document.getElementById(\"peersVideo\").appendChild(peerVideo);\n      attachMediaStream(peerVideo, stream);\n    }\n  });\n\n  skylinkDemo.on(\"peerLeft\", function (peerId, peerInfo, isSelf) {\n    if (!isSelf) {\n      var peerVideo = document.getElementById(peerId);\n      // do a check if peerVideo exists first\n      if (peerVideo) {\n        document.getElementById(\"peersVideo\").removeChild(peerVideo);\n      } else {\n        console.error(\"Peer video for \" + peerId + \" is not found.\");\n      }\n    }\n  });\n\n // init() should always be called first before other methods other than event methods like on() or off().\n skylinkDemo.init(\"YOUR_APP_KEY_HERE\", function (error, success) {\n   if (success) {\n     skylinkDemo.joinRoom(\"my_room\", {\n       userData: \"My Username\",\n       audio: true,\n       video: true\n     });\n   }\n });"
            ],
            "since": "0.5.0"
        }
    },
    "classitems": [
        {
            "file": "source/components/datachannel.js",
            "line": 11,
            "description": "The Datachannel ID.",
            "itemtype": "attribute",
            "name": "id",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 21,
            "description": "The Datachannel type.\n- See {{#crossLink \"Temasys.Datachannel/TYPE_ENUM:attribute\"}}{{/crossLink}} for reference.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 32,
            "description": "The Datachannel current states.",
            "itemtype": "attribute",
            "name": "$current",
            "params": [
                {
                    "name": "state",
                    "description": "The current Datachannel connection state.",
                    "type": "String"
                },
                {
                    "name": "connected",
                    "description": "The flag if Datachannel is connected.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The current Datatransfer streaming session ID.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The current Datatransfer transfer session ID.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 68,
            "description": "Event triggered when Datachannel connection state has been changed.",
            "itemtype": "event",
            "name": "stateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current Datachannel connection state.\n- See {{#crossLink \"Temasys.Datachannel/STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 76,
            "description": "Event triggered when Datachannel connection has encountered errors.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 83,
            "description": "Event triggered when Datachannel connection buffered amount threshold is low.",
            "itemtype": "event",
            "name": "bufferedAmountLow",
            "params": [
                {
                    "name": "bufferedAmount",
                    "description": "The current buffered amount in bytes.",
                    "type": "Number"
                },
                {
                    "name": "bufferedAmountLowThreshold",
                    "description": "The current buffered amount threshold set in bytes.",
                    "type": "Number"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 91,
            "description": "Event triggered when Datachannel connection sends or receives data.",
            "itemtype": "event",
            "name": "data",
            "params": [
                {
                    "name": "data",
                    "description": "The data.",
                    "type": "JSON|Blob"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if data is sent from self.",
                    "type": "Boolean"
                },
                {
                    "name": "error",
                    "description": "The error object.\n- This is defined when data failed to send or parse received data.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 101,
            "description": "Event triggered when there are exceptions thrown in this event handlers.",
            "itemtype": "event",
            "name": "domError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 108,
            "description": "Event triggered when {{#crossLink \"Temasys.Datachannel/getStats:method\"}}{{/crossLink}} state has changed.",
            "itemtype": "event",
            "name": "getStatsStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current stats retrieval state.\n- See {{#crossLink \"Temasys.Datachannel/GET_STATS_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "stats",
                    "description": "The stats.\n- This is defined when `state` is `SUCCESS`.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "The native `RTCDataChannel` object `.id` property.",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The native `RTCDataChannel` object `.label` property.",
                            "type": "String"
                        },
                        {
                            "name": "binaryType",
                            "description": "The native `RTCDataChannel` object `.binaryType` property.\n- This indicates the type of native object type it uses to send and pack received binary data.",
                            "type": "String"
                        },
                        {
                            "name": "bufferedAmount",
                            "description": "The current Datachannel connection buffered amount in bytes.",
                            "type": "Number"
                        },
                        {
                            "name": "bufferedAmountLowThreshold",
                            "description": "The current Datachannel connection\n  buffered amount low threshold in bytes.",
                            "type": "Number"
                        },
                        {
                            "name": "messages",
                            "description": "The messages stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sent",
                                    "description": "The number of messages sent from this Datachannel connection.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received",
                                    "description": "The number of messages received from this Datachannel connection.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "bytes",
                            "description": "The bytes stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sent",
                                    "description": "The number of bytes sent from this Datachannel connection.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received",
                                    "description": "The number of bytes received from this Datachannel connection.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "bufferControlOptions",
                            "description": "The current Datachannel connection buffer control settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "method",
                                    "description": "The current Datachannel connection buffer control method.\n- Available methods are: `\"polling\"` (Polling) and `\"bufferedAmount\"` (Buffer amount threshold).",
                                    "type": "String"
                                },
                                {
                                    "name": "block",
                                    "description": "The current Datachannel connection buffer control full threshold block.",
                                    "type": "Number"
                                },
                                {
                                    "name": "interval",
                                    "description": "The current Datachannel connection buffer control polling interval.\n- This is defined only for Polling method.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "flushTimeout",
                                    "description": "The current Datachannel connection timeout to consider that\n  the packet has been sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "finalFlushTimeout",
                                    "description": "The current Datachannel connection timeout\n  to consider that all the packets has been sent before the Datachannel connection closes explicitly.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.\n- This is defined when `state` is `FAILED`.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 143,
            "description": "Event triggered when there are exceptions thrown in this event handlers.",
            "itemtype": "event",
            "name": "domError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 152,
            "description": "The enum of Datachannel connection states.",
            "itemtype": "attribute",
            "name": "STATE_ENUM",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "The state when Datachannel connection is connecting.",
                    "type": "String"
                },
                {
                    "name": "OPEN",
                    "description": "The state when Datachannel connection has opened.",
                    "type": "String"
                },
                {
                    "name": "CLOSING",
                    "description": "The state when Datachannel connection is closing.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The state when Datachannel connection has closed.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 171,
            "description": "The enum of {{#crossLink \"Temasys.Datachannel/getStats:method\"}}{{/crossLink}} states.",
            "itemtype": "attribute",
            "name": "GET_STATS_STATE_ENUM",
            "params": [
                {
                    "name": "LOADING",
                    "description": "The state when `getStats()` is retrieving stats.",
                    "type": "String"
                },
                {
                    "name": "SUCCESS",
                    "description": "The state when `getStats()` has retrieved stats successfully.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The state when `getStats()` has failed to retrieve stats.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 188,
            "description": "Function to retrieve Datachannel connection stats.",
            "itemtype": "method",
            "name": "getStats",
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                "\n  channel.getStats().then(function (stats) {\n    console.log(\"Received stats ->\", stats);\n  }).catch(function (error) {\n    console.error(\"Received error ->\", error);\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 218,
            "description": "Function to start initializing events.",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 289,
            "description": "Function to send data.",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/datachannel.js",
            "line": 348,
            "description": "Function to close connection.",
            "class": "Temasys.Datachannel"
        },
        {
            "file": "source/components/debugger.js",
            "line": 13,
            "description": "The enum of debugger log levels.",
            "itemtype": "attribute",
            "name": "LOG_LEVEL_ENUM",
            "params": [
                {
                    "name": "NONE",
                    "description": "The level that prints no logs.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "The level that prints error logs.\n- Prints error as [`console.error()`](https://developer.mozilla.org/en-US/docs/Web/API/Console/error)",
                    "type": "Number"
                },
                {
                    "name": "WARN",
                    "description": "The level that prints warning + error logs.\n- Prints warning as [`console.warn()`](https://developer.mozilla.org/en-US/docs/Web/API/Console/warn)",
                    "type": "Number"
                },
                {
                    "name": "INFO",
                    "description": "The level that prints info + warning + error logs.\n- Prints info as [`console.info()`](https://developer.mozilla.org/en-US/docs/Web/API/Console/info)",
                    "type": "Number"
                },
                {
                    "name": "LOG",
                    "description": "The level that prints verbose + info + warning + error logs.\n- Prints log as [`console.log()`](https://developer.mozilla.org/en-US/docs/Web/API/Console/log)",
                    "type": "Number"
                },
                {
                    "name": "DEBUG",
                    "description": "The level that prints verbose (detailed debugging) + verbose + info + warning + error logs.\n- Prints debug as [`console.debug()`](https://developer.mozilla.org/en-US/docs/Web/API/Console/debug)",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "final": 1,
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 75,
            "description": "Function that sets the debugger configuration.",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "options",
                    "description": "The options.\n- When provided as `null` with `componentId` provided, it unsets the specific component\n  configuration to use the global configuration.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "level",
                            "description": "The log level.\n- When not provided, the value is set to `LOG_LEVEL_ENUM.ERROR`.\n- This references the `LOG_LEVEL_ENUM` constant.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "traceLogs",
                            "description": "The flag if Web console logs should be traced.\n- This uses the `console.trace` function when available.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "cacheLogs",
                            "description": "The flag if Web console logs should be cached for\n  fetching in `getCachedLogs()` method.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "printTimestamp",
                            "description": "The flag if timestamps (ISO-8601) should be\n  printed on Web console logs.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "printComponentId",
                            "description": "The flag if component ID should be\n  printed on Web console logs.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "componentId",
                    "description": "The component ID.\n- When provided, it configures the configuration for the specific component.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n// Example 1: Set global configuration\nTemasys.Debugger.setConfig({\n  level: Temasys.Debugger.LOG_LEVEL_ENUM.DEBUG\n});\n\n// Example 2: Set component configuration\nTemasys.Debugger.setConfig({\n  level: Temasys.Debugger.LOG_LEVEL_ENUM.LOG\n}, componentId);\n\n// Example 3: Unset component configuration and use global configuration instead for component\nTemasys.Debugger.setConfig(null, componentId);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 146,
            "description": "Function that returns the debugger configuration.",
            "itemtype": "method",
            "name": "getConfig",
            "params": [
                {
                    "name": "componentId",
                    "description": "The component ID.\n- When provided, it returns the configuration only for the specific component.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "return",
                    "description": "The configured options.\n- Object signature matches the `options` parameter in `setConfig()` method.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n// Example 1: Get global configuration\nvar config = Temasys.Debugger.getConfig();\n\n// Example 2: Get only component configuration\nvar config = Temasys.Debugger.getConfig(componentId);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 175,
            "description": "Function that returns the total debugger stats.",
            "itemtype": "method",
            "name": "getStats",
            "params": [
                {
                    "name": "componentId",
                    "description": "The component ID.\n- When provided, it returns the stats only for the specific component.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "return",
                    "description": "The stats.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "debug",
                            "description": "The total \"debug\" logs received.",
                            "type": "Number"
                        },
                        {
                            "name": "log",
                            "description": "The total number of \"log\" logs received.",
                            "type": "Number"
                        },
                        {
                            "name": "info",
                            "description": "The total number of \"info\" logs received.",
                            "type": "Number"
                        },
                        {
                            "name": "warn",
                            "description": "The total number of \"warn\" logs received.",
                            "type": "Number"
                        },
                        {
                            "name": "error",
                            "description": "The total number of \"error\" logs received.",
                            "type": "Number"
                        },
                        {
                            "name": "exceptions",
                            "description": "The total exceptions caught.\n- Note that for tabulation for this, it this requires `catchExceptions()` to be configured.\n- Each array item is an `Error` object.",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n// Example 1: Get total stats\nvar stats = Temasys.Debugger.getStats();\n\n// Example 2: Get only component total stats\nvar stats = Temasys.Debugger.getStats(componentId);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 204,
            "description": "Function that returns the list of components.",
            "itemtype": "method",
            "name": "getComponents",
            "params": [
                {
                    "name": "return",
                    "description": "The list of components.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n// Example: Get the list of components\nvar components = Temasys.Debugger.getComponents();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 219,
            "description": "Function that watches for logs logged.",
            "itemtype": "method",
            "name": "watchForLogs",
            "params": [
                {
                    "name": "fn",
                    "description": "The callback function.\n- When not provided as `Function`, it unsubscribes any existing configured callback function.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "log",
                            "description": "The log item.\n- Object signature matches the returned log item in `getCachedLogs()` method.",
                            "type": "Array"
                        },
                        {
                            "name": "componentId",
                            "description": "The component ID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example 1: Watch for logs\nTemasys.Debugger.watchForLogs(function (log, componentId) {\n  ..\n});\n\n// Example 2: Unwatch for logs\nTemasys.Debugger.watchForLogs();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 242,
            "description": "Function that catches the SDK exceptions.",
            "itemtype": "method",
            "name": "catchExceptions",
            "params": [
                {
                    "name": "fn",
                    "description": "The callback function.\n- When not provided as `Function`, it unsubscribes any existing configured callback function.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object caught.",
                            "type": "Error"
                        },
                        {
                            "name": "componentId",
                            "description": "The component ID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example 1: Catch SDK exceptions\nTemasys.Debugger.catchExceptions(function (error, componentId) {\n  ..\n});\n\n// Example 2: Uncatch SDK exceptions\nTemasys.Debugger.catchExceptions();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 272,
            "description": "Function that gets the cached logs.",
            "itemtype": "method",
            "name": "getCachedLogs",
            "params": [
                {
                    "name": "options",
                    "description": "The options.\n- When provided, this may cause performance issues when cached logs size is huge.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "componentId",
                            "description": "The component ID of logs to return only.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "level",
                            "description": "The specific level of logs to return only.\n- This references the `LOG_LEVEL_ENUM` constant.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "return",
                    "description": "The array of log items.",
                    "type": "Array",
                    "props": [
                        {
                            "name": "_index",
                            "description": "The log item.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "_0",
                                    "description": "The log item level property key.\n- This references the `LOG_LEVEL_ENUM` constant.",
                                    "type": "String"
                                },
                                {
                                    "name": "_1",
                                    "description": "The log item component ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "_2",
                                    "description": "The log item timestamp (in ISO-8601 format).",
                                    "type": "String"
                                },
                                {
                                    "name": "_3",
                                    "description": "The log item message.",
                                    "type": "String"
                                },
                                {
                                    "name": "_4",
                                    "description": "The log item meta data.",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "_5",
                                    "description": "The log item performance timestamp.\n- This is formed with `performance.now()` API.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n// Example 1: Get cached logs for specific component and log level\nvar debugLogsForComponentA = Temasys.Debugger.getCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.DEBUG,\n  componentId: \"A\"\n});\n\n// Example 2: Get cached logs for specific log level only\nvar debugLogsForLogError = Temasys.Debugger.getCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.ERROR\n});\n\n// Example 3: Get cached logs for specific component only\nvar debugLogsForComponentB = Temasys.Debugger.getCachedLogs({\n  componentId: \"B\"\n});\n\n// Example 4: Get cached logs for all\nvar debugLogsForAll = Temasys.Debugger.getCachedLogs();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 325,
            "description": "Function that clears the cached logs.",
            "itemtype": "method",
            "name": "clearCachedLogs",
            "params": [
                {
                    "name": "options",
                    "description": "The options.\n- When `options.componentId` and `options.level` is not provided, it clears all the cached logs.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "componentId",
                            "description": "The component ID of logs to clear only.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "level",
                            "description": "The specific level of logs to clear only.\n- This references the `LOG_LEVEL_ENUM` constant.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example 1: Clear cached logs for specific component and log level\nTemasys.Debugger.clearCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.LOG,\n  componentId: \"A\"\n});\n\n// Example 2: Clear cached logs for specific log level only\nTemasys.Debugger.clearCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.DEBUG\n});\n\n// Example 3: Clear cached logs for specific component only\nTemasys.Debugger.clearCachedLogs({\n  componentId: \"B\"\n});\n\n// Example 4: Clear cached logs for all\nTemasys.Debugger.clearCachedLogs();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 364,
            "description": "Function that prints the cached logs.",
            "itemtype": "method",
            "name": "printCachedLogs",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "componentId",
                            "description": "The component ID of logs to print only.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "level",
                            "description": "The specific level of logs to print only.\n- This references the `LOG_LEVEL_ENUM` constant.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example 1: Print cached logs for specific component and log level\nTemasys.Debugger.printCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.ERROR,\n  componentId: \"A\"\n});\n\n// Example 2: Print cached logs for specific log level only\nTemasys.Debugger.printCachedLogs({\n  level: Temasys.Debugger.LOG_LEVEL.DEBUG\n});\n\n// Example 3: Print cached logs for specific component only\nTemasys.Debugger.printCachedLogs({\n  componentId: \"B\"\n});\n\n// Example 4: Print cached logs for all\nTemasys.Debugger.printCachedLogs();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 404,
            "description": "Function that checks the `options` provided and loops the log items. \n- Returns `true` if there's not a need to loop.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 428,
            "description": "Handles the global log methods for all components.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 433,
            "description": "Function to log \"debug\" level message.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 440,
            "description": "Function to log \"log\" level message.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 447,
            "description": "Function to log \"info\" level message.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 454,
            "description": "Function to log \"warn\" level message.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 461,
            "description": "Function to log \"error\" level message.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 468,
            "description": "Function to configure component.\n- Returns the component ID.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 489,
            "description": "Function to push stats to API.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/debugger.js",
            "line": 495,
            "description": "Function to catch custom errors to be thrown.",
            "class": "Temasys.Debugger"
        },
        {
            "file": "source/components/peer.js",
            "line": 169,
            "description": "The Peer ID.",
            "itemtype": "attribute",
            "name": "id",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 179,
            "description": "The Peer parent ID.",
            "itemtype": "attribute",
            "name": "parentId",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 189,
            "description": "The Peer connection type.\n- See {{#crossLink \"Temasys.Peer/TYPE_ENUM:attribute\"}}{{/crossLink}} for reference.",
            "itemtype": "attribute",
            "name": "type",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 200,
            "description": "The Peer custom data.",
            "itemtype": "attribute",
            "name": "data",
            "type": "Any",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 210,
            "description": "The Peer client agent.",
            "itemtype": "attribute",
            "name": "agent",
            "params": [
                {
                    "name": "name",
                    "description": "The client agent name.",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "The client agent version.",
                    "type": "String"
                },
                {
                    "name": "platform",
                    "description": "The client agent platform when available.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pluginVersion",
                    "description": "The client WebRTC plugin version when available.",
                    "type": "String",
                    "optional": true
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 229,
            "description": "The Peer protocol versions.",
            "itemtype": "attribute",
            "name": "protocol",
            "params": [
                {
                    "name": "DTProtocolVersion",
                    "description": "The DT protocol version.",
                    "type": "String"
                },
                {
                    "name": "SMProtocolVersion",
                    "description": "The SM protocol version.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 244,
            "description": "The Peer session settings.",
            "itemtype": "attribute",
            "name": "session",
            "params": [
                {
                    "name": "publishOnly",
                    "description": "The flag if Peer is sending Stream only and not receiving.",
                    "type": "Boolean"
                },
                {
                    "name": "receiveOnly",
                    "description": "The flag if Peer is receiving Stream only and not sending.",
                    "type": "Boolean"
                },
                {
                    "name": "datachannel",
                    "description": "The flag if Peer chooses to have Datachannel connection enabled.",
                    "type": "Boolean"
                },
                {
                    "name": "trickleICE",
                    "description": "The flag if Peer chooses to have trickle ICE handshake.",
                    "type": "Boolean"
                },
                {
                    "name": "iceRestart",
                    "description": "The flag if Peer has ICE restart capability.",
                    "type": "Boolean"
                },
                {
                    "name": "weight",
                    "description": "The Peer weight to determine if Peer should be start offer first\n  or not depending on whose weight is higher.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 268,
            "description": "The Peer current states.",
            "itemtype": "attribute",
            "name": "$current",
            "params": [
                {
                    "name": "handshakeState",
                    "description": "The Peer handshake state.",
                    "type": "String"
                },
                {
                    "name": "iceConnectionState",
                    "description": "The Peer ICE connection state.",
                    "type": "String"
                },
                {
                    "name": "iceGatheringState",
                    "description": "The Peer ICE gathering state.",
                    "type": "String"
                },
                {
                    "name": "signalingState",
                    "description": "The Peer signaling state.",
                    "type": "String"
                },
                {
                    "name": "candidates",
                    "description": "The Peer ICE candidates states.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "local",
                            "description": "The local ICE candidates sending states.\n- `\"index\"` can be identified as the local ICE candidate ID, which value is the state of the ICE candidate.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "index",
                                    "description": "The local ICE candidate sending state.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "remote",
                            "description": "The remote ICE candidates processing states.\n- `\"index\"` can be identified as the remote ICE candidate ID, which value is the state of the ICE candidate.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "index",
                                    "description": "The local ICE candidate processing state.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "connected",
                    "description": "The flag if Peer ICE is connected.",
                    "type": "Boolean"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 297,
            "description": "Event triggered when Peer handshake state has changed.",
            "itemtype": "event",
            "name": "handshakeStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current handshake state.\n- See {{#crossLink \"Temasys.Peer/HANDSHAKE_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error.\n- This is defined when `state` is `ERROR`.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "The error type.\n- See {{#crossLink \"Temasys.Peer/HANDSHAKE_ERROR_TYPE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 310,
            "description": "Event triggered when Peer signaling state has changed.",
            "itemtype": "event",
            "name": "signalingStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current signaling state.\n- See {{#crossLink \"Temasys.Peer/SIGNALING_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 318,
            "description": "Event triggered when Peer ICE connection state has changed.",
            "itemtype": "event",
            "name": "iceConnectionStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current ICE connection state.\n- See {{#crossLink \"Temasys.Peer/ICE_CONNECTION_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 326,
            "description": "Event triggered when Peer ICE gathering state has changed.",
            "itemtype": "event",
            "name": "iceGatheringStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current ICE gathering state.\n- See {{#crossLink \"Temasys.Peer/ICE_GATHERING_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 334,
            "description": "Event triggered when Peer local ICE candidate sending state has changed.",
            "itemtype": "event",
            "name": "candidateSentStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current local ICE candidate sending state.\n- See {{#crossLink \"Temasys.Peer/CANDIDATE_SENT_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "candidateId",
                    "description": "The local ICE candidate ID.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 343,
            "description": "Event triggered when Peer remote ICE candidate processing state has changed.",
            "itemtype": "event",
            "name": "candidateProcessingStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current remote ICE candidate processing state.\n- See {{#crossLink \"Temasys.Peer/CANDIDATE_PROCESSING_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "candidateId",
                    "description": "The remote ICE candidate ID.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error object.\n- This is defined when `state` is `FAILED`.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 354,
            "description": "Event triggered when {{#crossLink \"Temasys.Peer/getStats:method\"}}{{/crossLink}} state has changed.",
            "itemtype": "event",
            "name": "getStatsStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current stats retrieval state.\n- See {{#crossLink \"Temasys.Peer/GET_STATS_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "stats",
                    "description": "The stats.\n- This is defined when `state` is `SUCCESS`.\n- The below `stats` parameters will not be the same if `isRaw` parameter is set to `true` in the",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "The Peer connection audio stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sent",
                                    "description": "The audio stats sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.bytes",
                                    "description": "The audio bytes sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.bytes.current",
                                    "description": "The current audio bytes sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.bytes.total",
                                    "description": "The total audio bytes sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.packets",
                                    "description": "The audio packets sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.packets.current",
                                    "description": "The current audio packets sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.packets.total",
                                    "description": "The total audio packets sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.nackCount",
                                    "description": "The audio nacks sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.nackCount.current",
                                    "description": "The current audio nacks sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.nackCount.total",
                                    "description": "The total audio nacks sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.ssrc",
                                    "description": "The audio sending direction RTP packets synchronization source (SSRC) ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.rtt",
                                    "description": "The audio sending direction round-trip time (RTT) taken.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.rtt.current",
                                    "description": "The current audio sending direction RTT in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.codec",
                                    "description": "The selected audio sending direction codec information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.codec.name",
                                    "description": "The audio sending direction codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.codec.payloadType",
                                    "description": "The audio sending direction codec payload number.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.codec.implementation",
                                    "description": "The audio sending direction codec implementation.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sent.codec.channels",
                                    "description": "The audio sending direction codec channels.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.codec.clockRate",
                                    "description": "The audio sending direction codec sampling rate in hertz (Hz).",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.codec.params",
                                    "description": "The audio sending direction codec parameters.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.level",
                                    "description": "The current audio sending stream input level.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.echoReturnLoss",
                                    "description": "The current audio sending stream echo return loss in decibels (db).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.echoReturnLossEnhancement",
                                    "description": "The current audio sending stream echo return loss\n  enhancement in decibels (db).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received",
                                    "description": "The audio stats received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.bytes",
                                    "description": "The audio bytes received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.bytes.current",
                                    "description": "The current audio bytes received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.bytes.total",
                                    "description": "The total audio bytes received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.packets",
                                    "description": "The audio packets received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.packets.current",
                                    "description": "The current audio packets received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.packets.total",
                                    "description": "The total audio packets received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.packetsLost",
                                    "description": "The audio packets lost information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.packetsLost.current",
                                    "description": "The current audio packets lost.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.packetsLost.total",
                                    "description": "The total audio packets lost.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.packetsDiscarded",
                                    "description": "The audio packets discarded information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.packetsDiscarded.current",
                                    "description": "The current audio packets discarded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.packetsDiscarded.total",
                                    "description": "The total audio packets discarded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.packetsRepaired",
                                    "description": "The audio packets repaired information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.packetsRepaired.current",
                                    "description": "The current audio packets repaired.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.packetsRepaired.total",
                                    "description": "The total audio packets repaired.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.fractionLost",
                                    "description": "The audio packets fraction loss information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.fractionLost.current",
                                    "description": "The current audio packets fraction loss.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.jitter",
                                    "description": "The audio packets jitter information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.jitter.current",
                                    "description": "The current audio packets jitter in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.jitter.currentMs",
                                    "description": "The current audio packets jitter in miliseconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.nackCount",
                                    "description": "The audio nacks received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.nackCount.current",
                                    "description": "The current audio nacks received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.nackCount.total",
                                    "description": "The total audio nacks received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.ssrc",
                                    "description": "The audio receiving direction RTP packets synchronization source (SSRC) ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "received.codec",
                                    "description": "The selected audio receiving direction codec information.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.name",
                                    "description": "The audio receiving direction codec name.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.payloadType",
                                    "description": "The audio receiving direction codec payload number.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.implementation",
                                    "description": "The audio receiving direction codec implementation.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.channels",
                                    "description": "The audio receiving direction codec channels.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.clockRate",
                                    "description": "The audio receiving direction codec sampling rate in hertz (Hz).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.params",
                                    "description": "The audio receiving direction codec parameters.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.level",
                                    "description": "The current audio receiving stream output level.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "The Peer connection video stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sent",
                                    "description": "The video stats sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.bytes",
                                    "description": "The video bytes sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.bytes.current",
                                    "description": "The current video bytes sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.bytes.total",
                                    "description": "The total video bytes sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.packets",
                                    "description": "The video packets sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.packets.current",
                                    "description": "The current video packets sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.packets.total",
                                    "description": "The total video packets sent.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.ssrc",
                                    "description": "The video sending direction RTP packets synchronization source (SSRC) ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.rtt",
                                    "description": "The video sending direction round-trip time (RTT) taken.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.rtt.current",
                                    "description": "The current video sending direction RTT in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.nackCount",
                                    "description": "The video nacks sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.nackCount.current",
                                    "description": "The current video nacks sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.nackCount.total",
                                    "description": "The total video nacks sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.sliCount",
                                    "description": "The video slis sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.sliCount.current",
                                    "description": "The current video slis sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.sliCount.total",
                                    "description": "The total video slis sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.pliCount",
                                    "description": "The video plis sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.pliCount.current",
                                    "description": "The current video plis sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.pliCount.total",
                                    "description": "The total video plis sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.firCount",
                                    "description": "The video firs sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.firCount.current",
                                    "description": "The current video firs sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.firCount.total",
                                    "description": "The total video firs sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.codec",
                                    "description": "The selected video sending direction codec information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.codec.name",
                                    "description": "The selected video sending direction codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.codec.payloadType",
                                    "description": "The selected video sending direction codec payload number.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.codec.implementation",
                                    "description": "The selected video sending direction codec implementation.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sent.codec.clockRate",
                                    "description": "The selected video sending direction\n  codec sampling rate in hertz (Hz).",
                                    "type": "Number"
                                },
                                {
                                    "name": "sent.codec.params",
                                    "description": "The selected video sending direction codec parameters.",
                                    "type": "String"
                                },
                                {
                                    "name": "sent.frames",
                                    "description": "The video frames sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.frames.current",
                                    "description": "The current number of video frames sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frames.total",
                                    "description": "The total number of video frames sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameRate",
                                    "description": "The video frames per second (fps) sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.frameRate.current",
                                    "description": "The current video frames per second (fps) sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameRate.mean",
                                    "description": "The current mean of the current video frames per second (fps) sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameRate.stdDev",
                                    "description": "The current standard deviation\n  of the current video frames per second (fps) sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameRate.input",
                                    "description": "The current sending video stream frames per second (fps) input.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesDropped",
                                    "description": "The video frames dropped information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.framesDropped.current",
                                    "description": "The current number of video frames dropped.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesDropped.total",
                                    "description": "The total number of video frames dropped.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesCorrupted",
                                    "description": "The video frames corrupted information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.framesCorrupted.current",
                                    "description": "The current number of video frames corrupted.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesCorrupted.total",
                                    "description": "The total number of video frames corrupted.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesEncoded",
                                    "description": "The video frames encoded information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.framesEncoded.current",
                                    "description": "The current number of video frames encoded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.framesEncoded.total",
                                    "description": "The total number of video frames encoded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameSize",
                                    "description": "The current video frame size sent information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sent.frameSize.width",
                                    "description": "The current video frame width in pixels (px) sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.frameSize.height",
                                    "description": "The current video frame height in pixels (px) sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sent.qpSum",
                                    "description": "The sum of the QP values of frames passed.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received",
                                    "description": "The video stats received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.bytes",
                                    "description": "The video bytes received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.bytes.current",
                                    "description": "The current video bytes received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.bytes.total",
                                    "description": "The total video bytes received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.packets",
                                    "description": "The video packets received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.packets.current",
                                    "description": "The current video packets received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.packets.total",
                                    "description": "The total video packets received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "received.ssrc",
                                    "description": "The video sending direction RTP packets synchronization source (SSRC) ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "received.jitter",
                                    "description": "The video packets jitter information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.jitter.current",
                                    "description": "The current video packets jitter in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.jitter.currentMs",
                                    "description": "The current video packets jitter in miliseconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.nackCount",
                                    "description": "The video nacks received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.nackCount.current",
                                    "description": "The current video nacks received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.nackCount.total",
                                    "description": "The total video nacks received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.sliCount",
                                    "description": "The video slis received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.sliCount.current",
                                    "description": "The current video slis received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.sliCount.total",
                                    "description": "The total video slis received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.pliCount",
                                    "description": "The video plis received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.pliCount.current",
                                    "description": "The current video plis received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.pliCount.total",
                                    "description": "The total video plis received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.firCount",
                                    "description": "The video firs received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.firCount.current",
                                    "description": "The current video firs received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.firCount.total",
                                    "description": "The total video firs received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec",
                                    "description": "The selected video sending direction codec information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.codec.name",
                                    "description": "The selected video sending direction codec name.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.payloadType",
                                    "description": "The selected video sending direction codec payload number.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.implementation",
                                    "description": "The selected video sending direction codec implementation.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.clockRate",
                                    "description": "The selected video sending direction\n  codec sampling rate in hertz (Hz).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.codec.params",
                                    "description": "The selected video sending direction codec parameters.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "received.frames",
                                    "description": "The video frames received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.frames.current",
                                    "description": "The current number of video frames received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frames.total",
                                    "description": "The total number of video frames received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameRate",
                                    "description": "The video frames per second (fps) received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.frameRate.current",
                                    "description": "The current video frames per second (fps) received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameRate.mean",
                                    "description": "The current mean of the current video frames per second (fps) received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameRate.stdDev",
                                    "description": "The current standard deviation\n  of the current video frames per second (fps) received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameRate.output",
                                    "description": "The current sending video stream frames per second (fps) output.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesDropped",
                                    "description": "The video frames dropped information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.framesDropped.current",
                                    "description": "The current number of video frames dropped.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesDropped.total",
                                    "description": "The total number of video frames dropped.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesCorrupted",
                                    "description": "The video frames corrupted information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.framesCorrupted.current",
                                    "description": "The current number of video frames corrupted.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesCorrupted.total",
                                    "description": "The total number of video frames corrupted.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesEncoded",
                                    "description": "The video frames decoded information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.framesDecoded.current",
                                    "description": "The current number of video frames decoded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.framesDecoded.total",
                                    "description": "The total number of video frames decoded.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameSize",
                                    "description": "The current video frame size received information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "received.frameSize.width",
                                    "description": "The current video frame width in pixels (px) received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.frameSize.height",
                                    "description": "The current video frame height in pixels (px) received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "received.e2eDelay",
                                    "description": "The current video e2e delay.\n- This requires a {{#crossLink \"Temasys.Stream\"}}{{/crossLink}} attached to a video element.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "candidates",
                            "description": "The Peer connection ICE candidates information.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "local",
                                    "description": "The array of local ICE candidates stats information.\n- `\"index\"` can be identified as the index item of each local ICE candidate stats object.",
                                    "type": "Array"
                                },
                                {
                                    "name": "local.index",
                                    "description": "The local ICE candidate stats.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.ip",
                                    "description": "The local ICE candidate IP address.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.port",
                                    "description": "The local ICE candidate port.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.protocol",
                                    "description": "The local ICE candidate protocol.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.turnProtocol",
                                    "description": "The local ICE candidate protocol used to\n  communicate with TURN server.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.candidateType",
                                    "description": "The local ICE candidate type.\n- Available values are: `\"host\"` (local network area), `\"srflx\"` (STUN) and `\"relay\"` (TURN)",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.priority",
                                    "description": "The local ICE candidate priority.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "local.index.selected",
                                    "description": "The flag if the local ICE candidate is selected.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "remote",
                                    "description": "The array of remote ICE candidates stats information.\n- `\"index\"` can be identified as the index item of each remote ICE candidate stats object.",
                                    "type": "Array"
                                },
                                {
                                    "name": "remote.index",
                                    "description": "The remote ICE candidate stats.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.ip",
                                    "description": "The remote ICE candidate IP address.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.port",
                                    "description": "The remote ICE candidate port.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.protocol",
                                    "description": "The remote ICE candidate protocol.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.turnProtocol",
                                    "description": "The remote ICE candidate protocol used to\n  communicate with TURN server.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.candidateType",
                                    "description": "The remote ICE candidate type.\n- Available values are: `\"host\"` (local network area), `\"srflx\"` (STUN) and `\"relay\"` (TURN)",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.priority",
                                    "description": "The remote ICE candidate priority.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "remote.index.selected",
                                    "description": "The flag if the remote ICE candidate is selected.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "writable",
                                    "description": "The flag if Peer has gotten ACK to an ICE request.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "readable",
                                    "description": "The flag if Peer has gotten a valid incoming ICE request.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "rtt",
                                    "description": "The current STUN connectivity checks round-trip delay (RTT) information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "current",
                                    "description": "The current rtt in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "total",
                                    "description": "The total rtt in seconds.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "requests",
                                    "description": "The ICE connectivity check requests.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "requests.received",
                                    "description": "The ICE connectivity check requests received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "requests.received.current",
                                    "description": "The current number of\n  ICE connectivity check requests received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "requests.received.total",
                                    "description": "The total number of\n  ICE connectivity check requests received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "requests.sent",
                                    "description": "The ICE connectivity check requests sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "requests.sent.current",
                                    "description": "The current number of\n  ICE connectivity check requests sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "requests.sent.total",
                                    "description": "The total number of\n  ICE connectivity check requests sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "responses",
                                    "description": "The ICE connectivity check responses.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "responses.received",
                                    "description": "The ICE connectivity check responses received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "responses.received.current",
                                    "description": "The current number of\n  ICE connectivity check responses received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "responses.received.total",
                                    "description": "The total number of\n  ICE connectivity check responses received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "responses.sent",
                                    "description": "The ICE connectivity check responses sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "responses.sent.current",
                                    "description": "The current number of\n  ICE connectivity check responses sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "responses.sent.total",
                                    "description": "The total number of\n  ICE connectivity check responses sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests",
                                    "description": "The ICE connectivity consent requests.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentRequests.received",
                                    "description": "The ICE connectivity check consent requests received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentRequests.received.current",
                                    "description": "The current number of\n  ICE connectivity consent requests received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.received.total",
                                    "description": "The total number of\n  ICE connectivity consent requests received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.sent",
                                    "description": "The ICE connectivity consent requests sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentRequests.sent.current",
                                    "description": "The current number of\n  ICE connectivity consent requests sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.sent.total",
                                    "description": "The total number of\n  ICE connectivity consent requests sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses",
                                    "description": "The ICE connectivity consent responses.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentResponses.received",
                                    "description": "The ICE connectivity check consent responses received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentResponses.received.current",
                                    "description": "The current number of\n  ICE connectivity consent responses received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.received.total",
                                    "description": "The total number of\n  ICE connectivity consent responses received.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.sent",
                                    "description": "The ICE connectivity consent responses sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentResponses.sent.current",
                                    "description": "The current number of\n  ICE connectivity consent responses sent.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.sent.total",
                                    "description": "The total number of\n  ICE connectivity consent responses sent.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "certificate",
                            "description": "The Peer connection DTLS/SRTP exchanged certificates information.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "local",
                                    "description": "The local certificate information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "local.fingerprint",
                                    "description": "The local certificate fingerprint.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.fingerprintAlgorithm",
                                    "description": "The local certificate fingerprint algorithm.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.derBase64",
                                    "description": "The local\n  base64 certificate in binary DER format encoded in base64.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote",
                                    "description": "The remote certificate information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "remote.fingerprint",
                                    "description": "The remote certificate fingerprint.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.fingerprintAlgorithm",
                                    "description": "The remote certificate fingerprint algorithm.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.derBase64",
                                    "description": "The remote\n  base64 certificate in binary DER format encoded in base64.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "srtpCipher",
                                    "description": "The certificates SRTP cipher.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "dtlsCipher",
                                    "description": "The certificates DTLS cipher.",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.\n- This is defined when `state` is `FAILED`.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 617,
            "description": "Event triggered when sending or receiving Stream object.",
            "itemtype": "event",
            "name": "stream",
            "params": [
                {
                    "name": "stream",
                    "description": "The Stream object.",
                    "type": "Temasys.Stream"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.",
                    "type": "String"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Stream object is sent from self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 626,
            "description": "Event triggered when receiving Datachannel object.",
            "itemtype": "event",
            "name": "datachannel",
            "params": [
                {
                    "name": "channel",
                    "description": "The Datachannel object.",
                    "type": "Temasys.Datachannel"
                },
                {
                    "name": "channelId",
                    "description": "The Datachannel ID.",
                    "type": "String"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Datachannel object has started from self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 635,
            "description": "Event triggered when sending or receiving message.",
            "itemtype": "event",
            "name": "message",
            "params": [
                {
                    "name": "message",
                    "description": "The message.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "data",
                            "description": "The message object.",
                            "type": "Any"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag if message is targeted or not.",
                            "type": "Boolean"
                        },
                        {
                            "name": "isDatachannel",
                            "description": "the flag if message is sent from\n  {{#crossLink \"Temasys.Datachannel\"}}{{/crossLink}} connections.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "The flag if sent from self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 647,
            "description": "Event triggered when sending or receiving data transfers.",
            "itemtype": "event",
            "name": "transfer",
            "params": [
                {
                    "name": "transfer",
                    "description": "The data transfer object.",
                    "type": "Temasys.Datatransfer"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID.",
                    "type": "String"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if transfer started from self.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 656,
            "description": "Event triggered when sending DTMF.",
            "itemtype": "event",
            "name": "dtmf",
            "params": [
                {
                    "name": "dtmf",
                    "description": "The DTMF object.",
                    "type": "Temasys.DTMF"
                }
            ],
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 661,
            "description": "Event triggered when there are exceptions thrown in this event handlers.",
            "itemtype": "event",
            "name": "domError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 670,
            "description": "The enum of ICE transport policies.",
            "itemtype": "attribute",
            "name": "ICE_TRANSPORT_POLICY_ENUM",
            "params": [
                {
                    "name": "ALL",
                    "description": "The policy to gathering all types (\"host\", \"srflx\", \"relay\") of ICE candidates.",
                    "type": "String"
                },
                {
                    "name": "RELAY",
                    "description": "The policy to gathering only \"relay\" ICE candidates.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 686,
            "description": "The enum of RTP and RTCP multiplex policies.",
            "itemtype": "attribute",
            "name": "RTCP_MUX_POLICY_ENUM",
            "params": [
                {
                    "name": "NEGOTIATE",
                    "description": "The policy to gather ICE candidates for both RTP and RTCP.",
                    "type": "String"
                },
                {
                    "name": "REQUIRE",
                    "description": "The policy to gather ICE candidates for only RTP, which RTCP would share.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 702,
            "description": "The enum of media bundle policies.",
            "itemtype": "attribute",
            "name": "BUNDLE_POLICY_ENUM",
            "params": [
                {
                    "name": "BALANCED",
                    "description": "The policy to switch to `MAX_COMPAT` or `MAX_BUNDLE` depending on remote Peer supports.",
                    "type": "String"
                },
                {
                    "name": "MAX_COMPAT",
                    "description": "The policy to gather ICE candidates for each media type and media streams will flow in\n  each individual ICE candidate connections.",
                    "type": "String"
                },
                {
                    "name": "MAX_BUNDLE",
                    "description": "The policy to gather ICE candidates for one media type and media streams will flow in\n  one ICE candidate connection.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 722,
            "description": "The enum of certificate algorithms.",
            "itemtype": "attribute",
            "name": "CERTIFICATE_ENUM",
            "params": [
                {
                    "name": "RSA",
                    "description": "The option to generate certificate with RSA-1024 algorithm.",
                    "type": "String"
                },
                {
                    "name": "ECDSA",
                    "description": "The option to generate certificate with ECDSA algorithm.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "The option to use browser specified algorithm.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 740,
            "description": "The enum of TURN transport types.",
            "itemtype": "attribute",
            "name": "TURN_TRANSPORT_ENUM",
            "params": [
                {
                    "name": "UDP",
                    "description": "The option to use UDP transport type.",
                    "type": "String"
                },
                {
                    "name": "TCP",
                    "description": "The option to use TCP transport type.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "The option to use default transport type.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 758,
            "description": "The enum of audio codecs.",
            "itemtype": "attribute",
            "name": "AUDIO_CODEC_ENUM",
            "params": [
                {
                    "name": "OPUS",
                    "description": "The option to prefer OPUS audio codec.",
                    "type": "String"
                },
                {
                    "name": "ISAC",
                    "description": "The option to prefer ISAC audio codec.",
                    "type": "String"
                },
                {
                    "name": "ILBC",
                    "description": "The option to prefer iLBC audio codec.",
                    "type": "String"
                },
                {
                    "name": "G722",
                    "description": "The option to prefer the G722 audio codec.",
                    "type": "String"
                },
                {
                    "name": "PCMA",
                    "description": "The option to prefer the G711u audio codec.",
                    "type": "String"
                },
                {
                    "name": "PCMU",
                    "description": "The option to prefer the G711a audio codec.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "The option to use browser specified audio codec.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 785,
            "description": "The enum of video codecs.",
            "itemtype": "attribute",
            "name": "VIDEO_CODEC_ENUM",
            "params": [
                {
                    "name": "VP8",
                    "description": "The option to prefer the VP8 video codec.",
                    "type": "String"
                },
                {
                    "name": "VP9",
                    "description": "The option to prefer the VP9 video codec.",
                    "type": "String"
                },
                {
                    "name": "H264",
                    "description": "The option to prefer the H264 video codec.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "The option to use browser specified audio codec.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 806,
            "description": "The enum of Peer handshake states.",
            "itemtype": "attribute",
            "name": "HANDSHAKE_STATE_ENUM",
            "params": [
                {
                    "name": "ENTER",
                    "description": "The state when Peer has joined the Room.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "The state when Peer acknowledges self has joined the Room.",
                    "type": "String"
                },
                {
                    "name": "RESTART",
                    "description": "The state after `ENTER` or `WELCOME` when Peer wants to resend another offer\n  to switch Stream object or restart ICE connection.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "The state when Peer sends an offer to start ICE connection.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "The state when Peer responses an answer to self offer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The state when Peer connection fails to start, or set offer or answer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 831,
            "description": "The enum of Peer handshake error types.",
            "itemtype": "attribute",
            "name": "HANDSHAKE_STATE_ERROR_TYPE_ENUM",
            "params": [
                {
                    "name": "CREATE_PEER",
                    "description": "The error type when Peer fails to create connection.",
                    "type": "String"
                },
                {
                    "name": "CREATE_OFFER",
                    "description": "The error type when Peer fails to create local offer.",
                    "type": "String"
                },
                {
                    "name": "SET_LOCAL_OFFER",
                    "description": "The error type when Peer fails to set local offer.",
                    "type": "String"
                },
                {
                    "name": "SET_REMOTE_OFFER",
                    "description": "The error type when Peer fails to set remote offer.",
                    "type": "String"
                },
                {
                    "name": "CREATE_ANSWER",
                    "description": "The error type when Peer fails to create local answer.",
                    "type": "String"
                },
                {
                    "name": "SET_LOCAL_ANSWER",
                    "description": "The error type when Peer fails to set local answer.",
                    "type": "String"
                },
                {
                    "name": "SET_REMOTE_ANSWER",
                    "description": "The error type when Peer fails to set remote answer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 857,
            "description": "The enum of Peer ICE connection states.",
            "itemtype": "attribute",
            "name": "ICE_CONNECTION_STATE_ENUM",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "The state when ICE is connecting.",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "The state when ICE has connected but is still finding for a better ICE candidate pairing.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The state when ICE has connected and has already paired the best ICE candidate.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The state when ICE has failed to connect.",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "The state when ICE connection has been disconnected.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The state when ICE connection has closed.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 881,
            "description": "The enum of Peer ICE gathering states.",
            "itemtype": "attribute",
            "name": "ICE_GATHERING_STATE_ENUM",
            "params": [
                {
                    "name": "GATHERING",
                    "description": "The state when ICE is still gathering.",
                    "type": "String"
                },
                {
                    "name": "COMPLETD",
                    "description": "The state when ICE has completed gathering.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 897,
            "description": "The enum of Peer ICE gathering states.",
            "itemtype": "attribute",
            "name": "SIGNALING_STATE_ENUM",
            "params": [
                {
                    "name": "STABLE",
                    "description": "The state when no local or remote, offer or answer is expected.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_OFFER",
                    "description": "The state when Peer has local offer and is expecting a remote answer to be set.",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_OFFER",
                    "description": "The state when Peer has remote offer and is expecting a local answer to be set.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The state when Peer exchanging of offer or answer has closed.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 919,
            "description": "The enum of {{#crossLink \"Temasys.Peer/getStats:method\"}}{{/crossLink}} states.",
            "itemtype": "attribute",
            "name": "GET_STATS_STATE_ENUM",
            "params": [
                {
                    "name": "LOADING",
                    "description": "The state when `getStats()` is retrieving stats.",
                    "type": "String"
                },
                {
                    "name": "SUCCESS",
                    "description": "The state when `getStats()` has retrieved stats successfully.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The state when `getStats()` has failed to retrieve stats.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 936,
            "description": "The enum of Peer types.",
            "itemtype": "attribute",
            "name": "TYPE_ENUM",
            "params": [
                {
                    "name": "MCU",
                    "description": "The type when Peer is MCU Peer.",
                    "type": "String"
                },
                {
                    "name": "P2P",
                    "description": "The type when Peer is MCU disabled Peer.",
                    "type": "String"
                },
                {
                    "name": "MCU_RELAYED",
                    "description": "The type when Peer is MCU relayed Peer.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 954,
            "description": "The enum of Peer local ICE candidate (native `RTCIceCandidate` object) sending states.",
            "itemtype": "attribute",
            "name": "CANDIDATE_SENT_STATE_ENUM",
            "params": [
                {
                    "name": "GATHERED",
                    "description": "The state when the ICE candidate is gathered.",
                    "type": "String"
                },
                {
                    "name": "DROPPED",
                    "description": "The state when the ICE candidate is dropped from sending.",
                    "type": "String"
                },
                {
                    "name": "SENT",
                    "description": "The state when the ICE candidate is sent.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 971,
            "description": "The enum of Peer remote ICE candidate (native `RTCIceCandidate` object) processing states.",
            "itemtype": "attribute",
            "name": "CANDIDATE_PROCESSING_STATE_ENUM",
            "params": [
                {
                    "name": "Received",
                    "description": "The state when the ICE candidate is received.",
                    "type": "String"
                },
                {
                    "name": "DROPPED",
                    "description": "The state when the ICE candidate is dropped from processing.",
                    "type": "String"
                },
                {
                    "name": "PROCESSING",
                    "description": "The state when the ICE candidate is processing.",
                    "type": "String"
                },
                {
                    "name": "PROCESSED",
                    "description": "The state when the ICE candidate has been processed\n  and added to Peer connection successfully.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The state when the ICE candidate has failed to process\n  and add to Peer connection.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 994,
            "description": "Function to retrieve Peer ICE candidates.",
            "itemtype": "method",
            "name": "getCandidates",
            "return": {
                "description": "[test] rere",
                "type": "JSON"
            },
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1004,
            "description": "Function to retrieve Peer {{#crossLink \"Temasys.Stream\"}}Streams{{/crossLink}}.",
            "params": [
                {
                    "name": "getStreams",
                    "description": ""
                }
            ],
            "return": {
                "description": "[test] rere",
                "type": "JSON"
            },
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1014,
            "description": "Function to retrieve Datachannel connections.",
            "params": [
                {
                    "name": "getDatachannels",
                    "description": ""
                }
            ],
            "return": {
                "description": "[test] rere",
                "type": "JSON"
            },
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1024,
            "description": "Function to retrieve DTMF sender.",
            "params": [
                {
                    "name": "getDTMFSender",
                    "description": ""
                }
            ],
            "return": {
                "description": "[test] rere",
                "type": "JSON"
            },
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1034,
            "description": "Function to retrieve Peer connection stats.",
            "itemtype": "method",
            "name": "getStats",
            "params": [
                {
                    "name": "isRaw",
                    "description": "The flag to return native stats object instead of parsed stats.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                "\n  peer.getStats().then(function (stats) {\n    console.log(\"Received stats ->\", stats);\n  }).catch(function (error) {\n    console.error(\"Received error ->\", error);\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1051,
            "description": "Function to set the {{#crossLink \"Temasys.Stream\"}}{{/crossLink}} object for this Peer.",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The Stream object.\n- To not send any Stream to this Peer, set the value to `null`.",
                    "type": "Temasys.Stream",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                "\n  peer.setStream(stream).then(function () {\n    console.log(\"Set stream success.\");\n  }).catch(function (error) {\n    console.error(\"Set stream error ->\", error);\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1069,
            "description": "Function to refresh Peer connection.",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "stream",
                    "description": "The stream object.",
                    "type": "Temasys.Stream"
                },
                {
                    "name": "_return",
                    "description": "Test.",
                    "type": "Promise"
                }
            ],
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                "\n  peer.stream(options).then(function () {\n    console.log(\"Send stream success ->\");\n  }).catch(function (error) {\n    console.error(\"Received error ->\", error);\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/peer.js",
            "line": 1088,
            "description": "Function to send message to Peer.",
            "class": "Temasys.Peer"
        },
        {
            "file": "source/components/room.js",
            "line": 46,
            "description": "Function to subscribe to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The callback function called when event is emitted.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n// Example: Subscribe to an event\nroom.on(\"sessionStateChange\", function (state, latency) {\n  console.log(\"active state ->\", state);\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 61,
            "description": "Function to subscribe to an event once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The callback function called once when event is emitted, or after when condition is met.",
                    "type": "Function"
                },
                {
                    "name": "fnCondition",
                    "description": "The conditional function called each time event is emitted.\n- Return `true` to satisfy condition.\n- When not provided, the default value is `function () { return true; }`.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "forever",
                    "description": "The flag if callback function should not be called only once but each time\n  condition is met.\n- When not provided, the default value is `false`.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n// Example 1: Subscribe to an event once when emitted\nroom.once(\"sessionStateChange\", function (state, latency) {\n  console.log(\"active state ->\", state);\n});\n\n// Example 2: Subscribe to an event that is emited once the condition is met\nsocket.once(\"connectionStateChange\", function (state) {\n  console.info(\"connected\"); \n}, function (state) {\n  return [\"connect\", \"reconnect\"].indexOf(state) > -1;\n});\n\n// Example 3: Subscribe to an event that is emited always once the condition is met\nsocket.once(\"activeStateChange\", function (state, latency) {\n  console.info(\"pong latency ->\", latency); \n}, function (state) {\n  return state === 'pong';\n}, true);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 96,
            "description": "Function to unsubscribe to an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to unsubscribe to.\n- When not provided, all events callback functions.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fn",
                    "description": "The callback function to unsubscribe.\n- When not provided, all the event callback functions.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n// Example 1: Unsubscribe to all events\nsocket.off();\n\n// Example 2: Unsubscribe \"activeStateChange\" event\nsocket.once(\"activeStateChange\");\n\n// Example 3: Unsubscribe to a single callback function for \"activeStateChange\" event\nvar fn = function () {};\nsocket.on(\"activeStateChange\", fn);\nsocket.off(\"activeStateChange\", fn);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 119,
            "description": "Event triggered when room connection session state has changed.",
            "itemtype": "event",
            "name": "sessionStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The connection session state.\n- Reference [`SESSION_STATE_ENUM` constant](#docs+Temasys.Room+constants+SESSION_STATE_ENUM) for the list of available states.",
                    "type": "String"
                },
                {
                    "name": "errorContent",
                    "description": "The error information if any.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error"
                        },
                        {
                            "name": "code",
                            "description": "The error code.\n- Reference [`SESSION_ERROR_ENUM` constant](#docs+Temasys.Room+constants+SESSION_ERROR_ENUM) for the list of available codes.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 133,
            "description": "The enum of room connection session states.",
            "itemtype": "attribute",
            "name": "SESSION_STATE_ENUM",
            "params": [
                {
                    "name": "STARTING",
                    "description": "The state when attempting to start connection session.\n- Value: `\"starting\"`",
                    "type": "String"
                },
                {
                    "name": "STARTED",
                    "description": "The state when connection session has started.\n- Value: `\"started\"`",
                    "type": "String"
                },
                {
                    "name": "ENDING",
                    "description": "The state when connection session is ending soon, of which in about 5 minutes.\n- Value: `\"ending\"`\n- When `state` parameter is this value in [`sessionStateChange` event](#docs+Temasys.Room+events+sessionStateChange\n  ), the `errorContent` parameter is defined.",
                    "type": "String"
                },
                {
                    "name": "ENDED",
                    "description": "The state when connection session has ended.\n- Value: `\"ended\"`",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The state when connection session failed to start.\n- Value: `\"error\"`\n- When `state` parameter is this value in [`sessionStateChange` event](#docs+Temasys.Room+events+sessionStateChange\n  ), the `errorContent` parameter is defined.",
                    "type": "String"
                },
                {
                    "name": "WARNING",
                    "description": "The state when connection session is potentially suspicious and\n  signaling server might potentially terminate the client's connection session.\n- Value: `\"warning\"`\n- When `state` parameter is this value in [`sessionStateChange` event](#docs+Temasys.Room+events+sessionStateChange\n  ), the `errorContent` parameter is defined.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 170,
            "description": "The enum of room connection session error codes.",
            "itemtype": "attribute",
            "name": "SESSION_ERROR_ENUM",
            "params": [
                {
                    "name": "MISSING_SOCKETIO",
                    "description": "The code when socket.io-client dependency is not loaded.\n- Value: `\"missing_io\"`",
                    "type": "String"
                },
                {
                    "name": "MISSING_ADAPTERJS",
                    "description": "The code when AdapterJS dependency is not loaded.\n- Value: `\"missing_adapterjs\"`",
                    "type": "String"
                },
                {
                    "name": "NO_CORS_SUPPORT",
                    "description": "The code when support for cross-origin resource sharing (CORS) mechanism is not available when required.\n- Value: `\"no_cors\"`\n- Reference [CORS mechanism](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) for more information.",
                    "type": "String"
                },
                {
                    "name": "NO_WEBRTC_SUPPORT",
                    "description": "The code when support for WebRTC connections is not available when required.\n- Value: `\"no_webrtc\"`\n- Reference [WebRTC capabilties](https://webrtc.org/) for more information.\n- This error state should occur when WebRTC connections are required.",
                    "type": "String"
                },
                {
                    "name": "REQUIRE_CODECS",
                    "description": "The code when there are no codecs available to start WebRTC connections, which\n  may be a result of failing to parse the codecs.\n- Value: `\"require_codecs\"`\n- This error state should occur when WebRTC connections are required.",
                    "type": "String"
                },
                {
                    "name": "REQUIRE_MIN_VERSION",
                    "description": "The code when minimum version of the browser is required but not used.\n- Value: `\"require_min_ver\"`\n- This error state should occur when strict version requirements are required.",
                    "type": "String"
                },
                {
                    "name": "AUTH_FAILED",
                    "description": "The code when authentication of client's provided App key ID failed with auth server.\n- Value: `\"auth_failed\"",
                    "type": "String"
                },
                {
                    "name": "AUTH_TOKEN_EXPIRED",
                    "description": "The code when the token after aprovided from auth server has expired.\n- Value: `\"oldTimeStamp\"`",
                    "type": "String"
                },
                {
                    "name": "AUTH_TOKEN_INVALID",
                    "description": "The code when authentication token provided from auth server is invalid\n- Value: `\"credentialError\"`",
                    "type": "String"
                },
                {
                    "name": "AUTH_TOKEN_USED",
                    "description": "The code when authentication token provided from auth server has already been used.\n- Value: `\"duplicatedLogin\"",
                    "type": "String"
                },
                {
                    "name": "SESSION_NOT_STARTED",
                    "description": "The code when room connection session has not started yet.\n- Value: `\"notStart\"`",
                    "type": "String"
                },
                {
                    "name": "SESSION_EXPIRED",
                    "description": "The code when room connection session has already ended.\n- Value: `\"expired\"`",
                    "type": "String"
                },
                {
                    "name": "SESSION_LOCKED",
                    "description": "The code when room is locked, which prevent other clients from starting connection\n  session, and connection session cannot start.\n- Value: `\"locked\"`",
                    "type": "String"
                },
                {
                    "name": "SESSION_ENDING",
                    "description": "The code when room connection session is ending.\n- Value: `\"toclose\"`",
                    "type": "String"
                },
                {
                    "name": "RETRIEVE_CONFIG_FAILED",
                    "description": "The code when signaling server fails to retrieve ICE servers details.\n- Value: `\"serverError\"`",
                    "type": "String"
                },
                {
                    "name": "RETRIEVE_APP_FAILED",
                    "description": "The code when signaling server fails to retrieve the App settings.\n- Value: `\"keyFailed\"`",
                    "type": "String"
                },
                {
                    "name": "MESSAGE_SPAM",
                    "description": "The code when signaling server detects a flood of messages from client.\n- Value `\"fastmsg\"`",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 241,
            "description": "Function to start connection session.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "server",
                            "description": "The auth server.\n- Examples: `\"api.temasys.io\"`\n- When not provided, the default value is `\"api.temasys.io\"`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appKey",
                            "description": "The app key ID.\n- Examples: `\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"`",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "The room name.\n- Examples: `\"a123\"`, `\"test\"`, `Date.now().toString()`\n- When not provided, the value of `.appKey` is used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "hash",
                            "description": "The options for hash authentication.\n- When not provided, the CORS authentication is used.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "start",
                                    "description": "The starting Date timestamp (ISO-8601 format) for connection session.\n- Examples: `\"2017-05-09T10:50:30.843Z\"`",
                                    "type": "String"
                                },
                                {
                                    "name": "duration",
                                    "description": "The starting Date timestamp (ISO-8601 format) for connection session.\n- Range: above `0` - `24`\n- Examples: `0.005`, `2`, `5`",
                                    "type": "String"
                                },
                                {
                                    "name": "output",
                                    "description": "The output generated hash that is derived from provided `.duration` and `.start`.\n- Examples: `encodeURIComponent(CryptoJS.HmacSHA1(options.room + '_' + options.hash.duration + '_' + options.hash.start, appKeySecret).toString(CryptoJS.enc.Base64));`\n- Reference the [CryptoJS library](https://github.com/brix/crypto-js) (which is recommended) for more information.\n- Note that it is required that provided values of `.start` and `.duration` matches the `.output` provided.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The client session settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "data",
                                    "description": "The client custom data for identification.\n- Examples: `\"userA\"`, `{ userId: \"xxx\", name: \"xxx\" }`",
                                    "type": "String|JSON",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 274,
            "description": "Function to lock or unlock room.",
            "itemtype": "method",
            "name": "lock",
            "params": [
                {
                    "name": "lock",
                    "description": "The flag if room should be locked.\n- When not provided, the default value is `false`.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 285,
            "description": "The Room SM protocol version supports.",
            "itemtype": "attribute",
            "name": "SM_PROTOCOL_VERSION",
            "type": "String",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 296,
            "description": "The Room DT protocol version supports.",
            "itemtype": "attribute",
            "name": "DT_PROTOCOL_VERSION",
            "type": "String",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Room"
        },
        {
            "file": "source/components/room.js",
            "line": 307,
            "description": "The Room ID.",
            "itemtype": "attribute",
            "name": "id",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 317,
            "description": "The Room name.",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 327,
            "description": "The App key ID.",
            "itemtype": "attribute",
            "name": "appKey",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 341,
            "description": "The Auth (API) server domain.",
            "itemtype": "attribute",
            "name": "server",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 351,
            "description": "The Auth (API) server protocol.",
            "itemtype": "attribute",
            "name": "protocol",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 361,
            "description": "The Room session start timestamp in ISO-8601 format.",
            "itemtype": "attribute",
            "name": "start",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 371,
            "description": "The Room session duration in hours.",
            "itemtype": "attribute",
            "name": "duration",
            "type": "Number",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 381,
            "description": "The Room session hash used only for hash based authentication.",
            "itemtype": "attribute",
            "name": "hash",
            "type": "String",
            "readonly": "",
            "optional": 1,
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 392,
            "description": "The flag if Room session has auto-introduce enabled.",
            "itemtype": "attribute",
            "name": "autoIntroduce",
            "type": "Boolean",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 402,
            "description": "The Room session self Peer information.",
            "itemtype": "attribute",
            "name": "peer",
            "params": [
                {
                    "name": "id",
                    "description": "The session Peer ID.",
                    "type": "String"
                },
                {
                    "name": "parentId",
                    "description": "The session parent Peer ID its linked to.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The session custom data.",
                    "type": "Any"
                },
                {
                    "name": "priorityWeight",
                    "description": "The session Peer priority weight.",
                    "type": "Number"
                },
                {
                    "name": "isPrivileged",
                    "description": "The flag if session Peer has privileged access.",
                    "type": "Boolean"
                },
                {
                    "name": "agent",
                    "description": "The session Peer agent information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The session Peer agent name.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The session Peer agent version.",
                            "type": "String"
                        },
                        {
                            "name": "os",
                            "description": "The session Peer agent platform.",
                            "type": "String"
                        },
                        {
                            "name": "pluginVersion",
                            "description": "The session Peer agent Temasys WebRTC version.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 436,
            "description": "The WebRTC supports of the browser or device.",
            "itemtype": "attribute",
            "name": "webrtcSupports",
            "params": [
                {
                    "name": "enabled",
                    "description": "The flag if WebRTC is enabled for this browser or device.",
                    "type": "Boolean"
                },
                {
                    "name": "audioCodecs",
                    "description": "The list of supported audio codecs.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "#codec",
                            "description": "The list of the sampling rate and its channels the audio codec supports.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "#index",
                                    "description": "The audio codec supported sampling rate and its channel item.\n  Format is `samplingRate/channels`.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "videoCodecs",
                    "description": "The list of supported video codecs.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "#codec",
                            "description": "The list of the sampling rate the video codec supports.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "#index",
                                    "description": "The video codec supported sampling rate and its channel item.\n  Format is `samplingRate`.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "dataChannel",
                    "description": "The flag if Datachannel connections is supported for this browser or device.",
                    "type": "Boolean"
                },
                {
                    "name": "dataChannelBinaryType",
                    "description": "The Datachannel binary type interface it supports.",
                    "type": "String",
                    "optional": true
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 464,
            "description": "The current Room session connection status.",
            "itemtype": "attribute",
            "name": "current",
            "params": [
                {
                    "name": "peerId",
                    "description": "The User Peer session ID.",
                    "type": "String"
                },
                {
                    "name": "authState",
                    "description": "The Room authentication state.",
                    "type": "String"
                },
                {
                    "name": "connected",
                    "description": "The flag if User is connected to the Room.",
                    "type": "Boolean"
                },
                {
                    "name": "locked",
                    "description": "The flag if Room is locked.",
                    "type": "Boolean"
                },
                {
                    "name": "isMCUEnabled",
                    "description": "The flag if Room has MCU enabled for Peer connections.",
                    "type": "Boolean"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 507,
            "description": "Event triggered when Room authentication state has changed.",
            "itemtype": "event",
            "name": "authState",
            "params": [
                {
                    "name": "state",
                    "description": "The current authentication state.\n  References the {{#crossLink \"Socket/AUTH_STATE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error.\n  This is defined when `state` value is `STATE_ENUM.ERROR`.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error"
                        },
                        {
                            "name": "code",
                            "description": "The error code.\n  References the {{#crossLink \"Socket/AUTH_ERROR_CODE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                            "type": "Number"
                        },
                        {
                            "name": "httpStatus",
                            "description": "The returned HTTP status.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 521,
            "description": "Event triggered when Room init state has changed.",
            "itemtype": "event",
            "name": "initState",
            "params": [
                {
                    "name": "state",
                    "description": "The current init state.\n  References the {{#crossLink \"Socket/INIT_STATE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error"
                        },
                        {
                            "name": "code",
                            "description": "The error code.\n  References the {{#crossLink \"Socket/INIT_ERROR_CODE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 533,
            "description": "Event triggered when Room session state has changed.",
            "itemtype": "event",
            "name": "sessionState",
            "params": [
                {
                    "name": "state",
                    "description": "The current init state.\n  References the {{#crossLink \"Socket/INIT_STATE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error"
                        },
                        {
                            "name": "code",
                            "description": "The error code.\n  References the {{#crossLink \"Socket/INIT_ERROR_CODE_ENUM:attribute\"}}{{/crossLink}} enum attribute.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 546,
            "description": "Function to subscribe to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event to subscribe to once.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback listener function.",
                    "type": "Function"
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 556,
            "description": "Function to subscribe to an event once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "event",
                    "description": "The event to subscribe to once.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback listener function.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The condition function that is called when\n  event is triggered. If condition is met (when function returns `true`), the\n  callback listener function is triggered.\n  The default is `function () { return true; }`.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The flag if callback listener function should always\n  be triggered regardless as long as condition function is met.\n  The default is `false`.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 573,
            "description": "Function to unsubscribe to events.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "The specified event to unsubscribe.\n  When not provided, it will unsubscribe all event callback listener functions.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The specified callback listener function based on\n  the provided event to unsubscribe only.\n  When not provided, it will unsubscribe all callback listener functions subscribed to the event.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 609,
            "description": "Function to get and check the connection availability.",
            "itemtype": "method",
            "name": "getConnectionAvailability",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 620,
            "description": "Function to start initialising Room dependencies.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function for async code execution.\n  Returns a format of: <code>function([error])</code>",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error.\n  This is only defined if there are errors in code execution.\n  The object signature matches the {{#crossLink \"Room/initState:event\"}}{{/crossLink}}\n  event `error` payload parameter.",
                            "type": "JSON",
                            "optional": true
                        }
                    ]
                }
            ],
            "async": 1,
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 724,
            "description": "Function to start Room session connection.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "server",
                            "description": "The Auth (API) server domain to connect to.\n  The default is based on the preset server domain.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "protocol",
                            "description": "The Auth (API) server protocol to connect to.\n  The default is the value of the current accessing `window.location.protocol`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "authCreds",
                            "description": "The credentials for hash based authentication.\n  If this is not provided, the Auth (API) server will authenticate by checking if the CORS url\n  configuration from the App Key matches the CORS domain from accessing app.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "start",
                                    "description": "The starting DateTime stamp in ISO-8601 string for the Room session connection.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "duration",
                                    "description": "The duration in hours for the Room session connection.\n  The maximum duration is `24` hours.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "hash",
                                    "description": "The base64 encoded HMAC-SHA1 hash generated from the starting\n  DateTime stamp, duration, Room name and App Key secret.\n  Please ensure that the string encodes escape characters for URI ready strings.",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "socket",
                            "description": "The socket connecton configuration.\n  This references the Socket class constructor options.",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "peer",
                            "description": "The Peer connecton configuration.\n  This references the Peer class constructor options.",
                            "type": "JSON",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function for async code execution.\n  Returns a format of: <code>function([error])</code>",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error.\n  This is only defined if there are errors in code execution.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "eventName",
                                    "description": "The event name that caused the error.",
                                    "type": "String"
                                },
                                {
                                    "name": "error",
                                    "description": "The error.\n  The object signature matches the event based on the `error.eventName`\n  `error` payload parameter or the socket connection error object.",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "async": 1,
            "since": "0.7.0",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 780,
            "description": "Internal function to update and trigger state.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 808,
            "description": "Internal function to load XHR response.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 883,
            "description": "Function to update the default stream or self Peer data.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "/**\nFunction",
                    "description": "to parse and retrieve codecs support."
                }
            ],
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 945,
            "description": "Function to handle SM protocol for sending direction.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 955,
            "description": "\"joinRoom\" - Connects to the Room.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 971,
            "description": "\"enter\" - Broadcasts to existing Peers in the Room we exist.\n\"welcome\" - Respond to Peer who sent \"enter\" about who we are.\n\"restart\" - Re-negotiation request.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 982,
            "description": "Function to handle SM protocol for receiving direction.",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 991,
            "description": "SM protocol: \"joinRoom\"",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 999,
            "description": "SM protocol: \"inRoom\"",
            "class": "Room"
        },
        {
            "file": "source/components/room.js",
            "line": 1012,
            "description": "SM protocol: \"enter\"",
            "class": "Room"
        },
        {
            "file": "source/components/socket.js",
            "line": 122,
            "description": "Function to subscribe to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The callback function called when event is emitted.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n// Example: Subscribe to an event\nsocket.on(\"activeStateChange\", function (state, latency) {\n  console.log(\"active state ->\", state);\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 137,
            "description": "Function to subscribe to an event once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The callback function called once when event is emitted, or after when condition is met.",
                    "type": "Function"
                },
                {
                    "name": "fnCondition",
                    "description": "The conditional function called each time event is emitted.\n- Return `true` to satisfy condition.\n- When not provided, the default value is `function () { return true; }`.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "forever",
                    "description": "The flag if callback function should not be called only once but each time\n  condition is met.\n- When not provided, the default value is `false`.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n// Example 1: Subscribe to an event once when emitted\nsocket.once(\"activeStateChange\", function (state, latency) {\n  console.log(\"active state ->\", state);\n});\n\n// Example 2: Subscribe to an event that is emited once the condition is met\nsocket.once(\"connectionStateChange\", function (state) {\n  console.info(\"connected\"); \n}, function (state) {\n  return [\"connect\", \"reconnect\"].indexOf(state) > -1;\n});\n\n// Example 3: Subscribe to an event that is emited always once the condition is met\nsocket.once(\"activeStateChange\", function (state, latency) {\n  console.info(\"pong latency ->\", latency); \n}, function (state) {\n  return state === 'pong';\n}, true);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 172,
            "description": "Function to unsubscribe to an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to unsubscribe to.\n- When not provided, all events callback functions.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fn",
                    "description": "The callback function to unsubscribe.\n- When not provided, all the event callback functions.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n// Example 1: Unsubscribe to all events\nsocket.off();\n\n// Example 2: Unsubscribe \"activeStateChange\" event\nsocket.once(\"activeStateChange\");\n\n// Example 3: Unsubscribe to a single callback function for \"activeStateChange\" event\nvar fn = function () {};\nsocket.on(\"activeStateChange\", fn);\nsocket.off(\"activeStateChange\", fn);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 195,
            "description": "Event triggered when socket connection state has changed.",
            "params": [
                {
                    "name": "connectionStateChange",
                    "description": ""
                },
                {
                    "name": "state",
                    "description": "The connection state.\n- Reference [`CONNECTION_STATE_ENUM` constant](#docs+Temasys.Socket+constants+CONNECTION_STATE_ENUM) for the list of available states.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error object if there are errors.",
                    "type": "Error",
                    "optional": true
                },
                {
                    "name": "session",
                    "description": "The state session.\n- Object signature matches returned `result.session` object in [`getCurrent()` method](#docs+Temasys.Socket+methods+getCurrent).",
                    "type": "JSON"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 206,
            "description": "Event triggered when socket connection \"activeness\" or keep-alive state has changed.",
            "itemtype": "event",
            "name": "activeStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The active state.\n- Reference [`ACTIVE_STATE_ENUM` constant](#docs+Temasys.Socket+constants+ACTIVE_STATE_ENUM) for the list of available states.",
                    "type": "String"
                },
                {
                    "name": "latency",
                    "description": "The number of miliseconds of response time latency when receiving `PONG` response packet.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 215,
            "description": "Event triggered when message is sent or received.",
            "itemtype": "event",
            "name": "message",
            "params": [
                {
                    "name": "message",
                    "description": "The message object.\n- When defined as type of _String_, this indicates that received message has parsing errors.",
                    "type": "JSON|String"
                },
                {
                    "name": "error",
                    "description": "The error object if there are errors.",
                    "type": "Error",
                    "optional": true
                },
                {
                    "name": "isSelf",
                    "description": "The flag if self is sending the message.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 227,
            "description": "The enum of transport types.",
            "itemtype": "attribute",
            "name": "TRANSPORT_ENUM",
            "params": [
                {
                    "name": "WEBSOCKET",
                    "description": "The transport type to use WebSocket connections.\n- Value: `\"websocket\"`\n- Reference [WebSocket protocol](https://en.wikipedia.org/wiki/WebSocket) for more information.",
                    "type": "String"
                },
                {
                    "name": "POLLING",
                    "description": "The transport type to use polling.\n- Value: `\"polling\"`\n- Reference [Polling concept](https://en.wikipedia.org/wiki/Polling_%28computer_science%29) for more information.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "final": 1,
            "readonly": "",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 246,
            "description": "The enum of socket connection states.",
            "itemtype": "attribute",
            "name": "CONNECTION_STATE_ENUM",
            "params": [
                {
                    "name": "NEW",
                    "description": "The state when starting with a new port and transport pair to start connection.\n- Value: `\"new\"`\n- Output port and transport pairs available would be `a+1`, `a+2`, `b+1` and `b+2`, if transports given are `a` and `b`,\n  and ports give are `1` and `2`.",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "The state when connected.\n- Value: `\"connect\"`",
                    "type": "String"
                },
                {
                    "name": "CONNECTION_ERROR",
                    "description": "The state when connection failed or timed out for current port and transport pair.\n- Value: `\"connect_error\"`\n- Reconnections will be attempted if configured, else it would switch to the next available pair.",
                    "type": "String"
                },
                {
                    "name": "CONSTRUCT_ERROR",
                    "description": "The state when constructing connection has errors for the current port and transport pair.\n- Value: `\"start_error\"`\n- Reconnections will not be attempted even if configured, and it would switch to the next available pair.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ATTEMPT",
                    "description": "The state when starting a reconnection attempt for the current port and transport pair.\n- Value: `\"reconnect_attempt\"`",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ERROR",
                    "description": "The state when a reconnection attempt failed.\n- Value: `\"reconnect_error\"`",
                    "type": "String"
                },
                {
                    "name": "RECONNECTED",
                    "description": "The state when reconnected after some reconnection attempts.\n- Value: `\"reconnect\"`",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_FAILED",
                    "description": "The state when all reconnection attempts failed for the current port and transport pair.\n- Value: `\"reconnect_failed\"`",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "The state when disconnected.\n- Value: `\"disconnect\"`",
                    "type": "String"
                },
                {
                    "name": "TERMINATED",
                    "description": "The state when there is no more port and transport pairs to start connection and\n  fallback for the next available pair attempts are aborted.\n- Value: `\"terminate\"`",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The state when there are errors in connection after being connected.\n- Value: `\"error\"`",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 296,
            "description": "The enum of socket connection \"activeness\" or keep-alive states.",
            "itemtype": "attribute",
            "name": "ACTIVE_STATE_ENUM",
            "params": [
                {
                    "name": "PING",
                    "description": "The state when \"ping\" packet is written out to the signaling server\n  to obtain response from server to check if server-end connection is still active.\n- Value: `\"ping\"`",
                    "type": "String"
                },
                {
                    "name": "PONG",
                    "description": "The state when \"pong\" packet is received from the signaling server,\n  which indicates that server-end connection is still active.\n- Value: `\"pong\"`",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "final": 1,
            "readonly": "",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 315,
            "description": "Function that returns the socket configuration.",
            "itemtype": "method",
            "name": "getConfig",
            "params": [
                {
                    "name": "return",
                    "description": "The configuration settings.\n- Object signature matches `options` parameter in [`Temasys.Socket` constructor](#docs+Temasys.Socket+constructor+Temasys.Socket).",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n  console.log(\"config ->\", socket.getConfig());"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 343,
            "description": "Function that returns the current socket states and connection session.",
            "itemtype": "method",
            "name": "getCurrent",
            "params": [
                {
                    "name": "return",
                    "description": "The current states and connection session.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "states",
                            "description": "The current states.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "connectionState",
                                    "description": "The socket connection state.\n- Reference [`CONNECTION_STATE_ENUM` constant](#docs+Temasys.Socket+constants+CONNECTION_STATE_ENUM) for the list of available states.",
                                    "type": "String"
                                },
                                {
                                    "name": "activeState",
                                    "description": "The socket \"activeness\" or keep-alive state.\n- Reference [`ACTIVE_STATE_ENUM` constant](#docs+Temasys.Socket+constants+ACTIVE_STATE_ENUM) for the list of available states.",
                                    "type": "String"
                                },
                                {
                                    "name": "connected",
                                    "description": "The flag if socket is connected to signaling server.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "session",
                            "description": "The current connection session.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "port",
                                    "description": "The port number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transport",
                                    "description": "The transport type.\n- Reference [`TRANSPORT_ENUM` constant](#docs+Temasys.Socket+constants+TRANSPORT_ENUM) for the list of available transports.",
                                    "type": "String"
                                },
                                {
                                    "name": "attempt",
                                    "description": "The total number of attempts made for the current port and transport pair.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fallbacks",
                                    "description": "The total number of port and transport pairs tried.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n  console.log(\"current info ->\", socket.getCurrent());"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 382,
            "description": "Function that returns the socket connection stats.",
            "itemtype": "method",
            "name": "getStats",
            "params": [
                {
                    "name": "return",
                    "description": "The full stats.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "componentId",
                            "description": "The component ID.",
                            "type": "String"
                        },
                        {
                            "name": "session",
                            "description": "The socket connection session stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The socket connection session ID when connected.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "protocol",
                                    "description": "The socket connection socket.io protocol revision number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fallbacks",
                                    "description": "The list of port and transport pair attempts made - where each item is a _JSON_.\n- Property `#index` will be used to identify the array index and the fallback for the next available pair attempt number.",
                                    "type": "Array"
                                },
                                {
                                    "name": "fallbacks.#index",
                                    "description": "The port and transport pair.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fallbacks.#index.attempts",
                                    "description": "The total number of reconnection attempts made for this pair.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fallbacks.#index.port",
                                    "description": "The port number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fallbacks.#index.transport",
                                    "description": "The transport type.\n- Reference [`TRANSPORT_ENUM` constant](#docs+Temasys.Socket+constants+TRANSPORT_ENUM) for the list of available transports.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "active",
                            "description": "The \"activeness\" or keep-alive connection stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "pings",
                                    "description": "The \"ping\" stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "pings.total",
                                    "description": "The total number of \"ping\" packets sent to signaling server.",
                                    "type": "Number"
                                },
                                {
                                    "name": "pongs",
                                    "description": "The \"pong\" stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "pongs.total",
                                    "description": "The total number of \"pong\" packets received from signaling server.",
                                    "type": "Number"
                                },
                                {
                                    "name": "pongs.latency",
                                    "description": "The \"pong\" latency stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "pongs.latency.lowest",
                                    "description": "The lowest number of miliseconds of latency received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "pongs.latency.average",
                                    "description": "The average number of miliseconds of latency received.",
                                    "type": "Number"
                                },
                                {
                                    "name": "pongs.latency.highest",
                                    "description": "The highest number of miliseconds of latency received.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n  console.log(\"stats ->\", socket.getStats());"
            ],
            "since": "0.7.0",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 452,
            "description": "Function to set configuration.",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 561,
            "description": "Function to start socket connection.\n- Returns a Promise (Error error) for failure, (String socketId) for success",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 811,
            "description": "Function to start socket connection.",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 829,
            "description": "Function to send messages.",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/socket.js",
            "line": 882,
            "description": "Internal function to send message.",
            "class": "Temasys.Socket"
        },
        {
            "file": "source/components/stream.js",
            "line": 69,
            "description": "The Stream ID.",
            "itemtype": "attribute",
            "name": "id",
            "type": "String",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 79,
            "description": "The flag if Stream is from self or not.",
            "itemtype": "attribute",
            "name": "remote",
            "type": "Boolean",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 89,
            "description": "The Stream settings.",
            "itemtype": "attribute",
            "name": "settings",
            "params": [
                {
                    "name": "audio",
                    "description": "The audio track constraints settings.\n- The value follows the `options.audio` (or `options.custom.audio`) parameter passed in the constructor\n  except for the `.id`.",
                    "type": "JSON|Boolean",
                    "props": [
                        {
                            "name": "id",
                            "description": "The audio track ID.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "The video track constraints settings.\n- The value follows the `options.video` (or `options.custom.video`) parameter passed in the constructor\n  except for the `.id`.",
                    "type": "JSON|Boolean",
                    "props": [
                        {
                            "name": "id",
                            "description": "The video track ID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 110,
            "description": "The Stream current states.",
            "itemtype": "attribute",
            "name": "$current",
            "type": "JSON",
            "params": [
                {
                    "name": "tracks",
                    "description": "The current Stream tracks states.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "The current Stream audio track states.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "muted",
                                    "description": "The flag if Stream audio track is muted.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "state",
                                    "description": "The current Stream audio track active state.\n- See {{#crossLink \"Temasys.Stream/TRACK_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String"
                                },
                                {
                                    "name": "active",
                                    "description": "The flag if Stream video track is active.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "The current Stream video track states.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "muted",
                                    "description": "The flag if Stream video track is muted.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "state",
                                    "description": "The current Stream video track active state.\n- See {{#crossLink \"Temasys.Stream/TRACK_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                                    "type": "String"
                                },
                                {
                                    "name": "active",
                                    "description": "The flag if Stream video track is active.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "state",
                    "description": "The current Stream active state.\n- See {{#crossLink \"Temasys.Stream/STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "active",
                    "description": "The flag if Stream is active.",
                    "type": "Boolean"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 140,
            "description": "Event triggered when Stream active state has been changed.",
            "itemtype": "event",
            "name": "stateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current Stream active state.\n- See {{#crossLink \"Temasys.Stream/STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 148,
            "description": "Event triggered when Stream track active state has been changed.",
            "itemtype": "event",
            "name": "trackStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current Stream track active state.\n- See {{#crossLink \"Temasys.Stream/TRACK_STATE_ENUM:attribute\"}}{{/crossLink}} for reference.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The Stream track type.\n- Available values for identification are: `\"audio\"` for audio track and `\"video\"` for video track.",
                    "type": "String"
                },
                {
                    "name": "trackId",
                    "description": "The Stream track ID.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 159,
            "description": "Event triggered when Stream track muted state has been changed.",
            "itemtype": "event",
            "name": "mutedStateChange",
            "params": [
                {
                    "name": "muted",
                    "description": "The flag if Stream track is muted.",
                    "type": "Boolean"
                },
                {
                    "name": "type",
                    "description": "The Stream track type.\n- Available values for identification are: `\"audio\"` for audio track and `\"video\"` for video track.",
                    "type": "String"
                },
                {
                    "name": "trackId",
                    "description": "The Stream track ID.",
                    "type": "String"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 169,
            "description": "Event triggered when there are exceptions thrown in this event handlers.",
            "itemtype": "event",
            "name": "domError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error"
                }
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 178,
            "description": "The enum of Stream active states.",
            "itemtype": "attribute",
            "name": "STATE_ENUM",
            "params": [
                {
                    "name": "START",
                    "description": "The state when Stream has been retrieved or initialised successfully and is active.",
                    "type": "String"
                },
                {
                    "name": "STOP",
                    "description": "The state when Stream is not longer active.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The state when Stream had failed to retrieve or initilaise successfully.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 195,
            "description": "The enum of Stream track active states.",
            "itemtype": "attribute",
            "name": "TRACK_STATE_ENUM",
            "params": [
                {
                    "name": "START",
                    "description": "The state when Stream track has been initialiseda and is active.",
                    "type": "String"
                },
                {
                    "name": "STOP",
                    "description": "The state when Stream track is not longer active.",
                    "type": "String"
                },
                {
                    "name": "DEVICE_MUTED",
                    "description": "The state when Stream track streaming is muted by device not by client.",
                    "type": "String"
                },
                {
                    "name": "DEVICE_UNMUTED",
                    "description": "The state when Stream track streaming is unmuted by device not by client.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "final": 1,
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 214,
            "description": "Function to attach Stream audio and video tracks to the `<video>` or `<audio>` DOM elements.",
            "itemtype": "method",
            "name": "attachElement",
            "params": [
                {
                    "name": "element",
                    "description": "The `<video>` or `<audio>` DOM element.",
                    "type": "DOM"
                },
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "The flag if the Stream audio track should be appended to the element.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "video",
                            "description": "The flag if the Stream video track should be appended to the element.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "example": [
                "\n  var stream = new Temasys.Stream({ audio: true, video: true });\n  stream.on(\"stateChange\", function (state) {\n    if (state === stream.STATE_ENUM.START) {\n      stream.attachElement(videoDOM);\n    }\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 234,
            "description": "Function to mute Stream audio and video tracks.",
            "itemtype": "method",
            "name": "muteTracks",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "The flag if the Stream audio track should be muted.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "video",
                            "description": "The flag if the Stream video track should be muted.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                "\n  var stream = new Temasys.Stream({ audio: true, video: true });\n  stream.on(\"stateChange\", function (state) {\n    if (state === stream.STATE_ENUM.START) {\n      stream.muteTracks().then(function (mutedStatus) {\n        console.log(\"Audio muted ->\", mutedStatus.audio);\n        console.log(\"Video muted ->\", mutedStatus.video);\n      }).catch(function (error, mutedStatus) {\n        console.error(\"Failed muting ->\", error);\n        console.error(\"Audio muted (current) ->\", mutedStatus.audio);\n        console.error(\"Video muted (current) ->\", mutedStatus.video);\n      });\n    }\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/stream.js",
            "line": 261,
            "description": "Function to stop Stream audio and video tracks.",
            "itemtype": "method",
            "name": "stopTracks",
            "params": [
                {
                    "name": "options",
                    "description": "The options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "The flag if the Stream audio track should be stopped.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "audio",
                            "description": "The flag if the Stream audio track should be stopped.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Promise for function request completion.",
                "type": "Promise"
            },
            "example": [
                " \n  stream.stopTracks().then(function (activeStatus) {\n    console.log(\"Audio active ->\", activeStatus.audio);\n    console.log(\"Video active ->\", activeStatus.video);\n  }).catch(function (error, activeStatus) {\n    console.error(\"Failed stopping tracks ->\", error);\n    console.error(\"Audio active (current) ->\", activeStatus.audio);\n    console.error(\"Video active (current) ->\", activeStatus.video);\n  });"
            ],
            "since": "0.7.0",
            "class": "Temasys.Stream"
        },
        {
            "file": "source/components/utils.js",
            "line": 8,
            "description": "Function that creates an event emitter manager.",
            "itemtype": "method",
            "name": "createEventManager",
            "params": [
                {
                    "name": "return",
                    "description": "The event manager functions.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "once",
                            "description": "Function to subscribe a callback function to an event once.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "eventName",
                                    "description": "The event name.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn",
                                    "description": "The callback function.",
                                    "type": "Function"
                                },
                                {
                                    "name": "fnCondition",
                                    "description": "The condition function that is invoked\n  each time event is emitted, and once the condition function returns `true`, the callback function is invoked.\n- When not provided, the value is `function () { return true; }`.",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "persistent",
                                    "description": "The flag if callback function should be invoked\n  each time the condition function is met.\n- When not provided as `true`, the callback function will only be invoked once the condition is met.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "on",
                            "description": "Function to subscribe a callback function to an event.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "eventName",
                                    "description": "The event name.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn",
                                    "description": "The callback function.",
                                    "type": "Function"
                                }
                            ]
                        },
                        {
                            "name": "off",
                            "description": "Function to unsubscribe a callback function to an event.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "eventName",
                                    "description": "The event name.\n- When not provided, every callback functions will be unsubscribe to every events.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn",
                                    "description": "The callback function.\n- When not provided, every callback functions related to the event will be unsubscribed.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "catchExceptions",
                            "description": "Function to catch any errors thrown in callback functions.",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "fn",
                                    "description": "The exception function that is invoked\n  each time an exception is caught.\n- When not provided as a type of `Function`, any exceptions will be thrown in the callback functions\n  and not be caught.",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "emit",
                            "description": "Function to emit an event.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "eventName",
                                    "description": "The event name.\n- Parameters after it would be considered the event callback function parameter payloads.\n  E.g. `.emit(\"test\", a, b, c)` would result in `.on(\"test\", function (a, b, c) { .. })`",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n// Create the event manager\nvar manager = Temasys.Utils.createEventManager;\nvar offCbFn = function () {\n  console.log(\"D\");\n};\n\n// Subscribe to an event\nmanager.on(\"test\", function () {\n  console.log(\"A\");\n});\nmanager.once(\"test\", function () {\n  console.log(\"B\");\n});\nmanager.on(\"test\", function () {\n  console.log(\"C\");\n});\nmanager.on(\"test\", offCbFn);\n\n// Emit the event - Results: A, B, C, D\nmanager.emit(\"test\");\n\n// Emit the event (2) - Results: A, C, D\nmanager.emit(\"test\");\n\n// Unsubscribe to an event for a specific callback function\nmanager.on(\"test\", offCbFn);\n\n// Emit the event - Results: A, C\nmanager.emit(\"test\");\n\n// Subscribe to various events\nmanager.on(\"test2\", function () {\n  console.log(\"E\");\n});\nmanager.on(\"test2\", function () {\n  console.log(\"F\");\n});\nmanager.on(\"test3\", function () {\n  console.log(\"G\");\n});\nmanager.on(\"test4\", function () {\n  console.log(\"H\");\n});\n\n// Emit the events - Results: A, C, E, F, G, H\nmanager.emit(\"test\");\nmanager.emit(\"test2\");\nmanager.emit(\"test3\");\nmanager.emit(\"test4\");\n\n// Unsubscribe to an event\nmanager.off(\"test\");\n\n// Emit the events - Results: E, F, G, H\nmanager.emit(\"test\");\nmanager.emit(\"test2\");\nmanager.emit(\"test3\");\nmanager.emit(\"test4\");\n\n// Unsubscribe to all events\nmanager.off();\n\n// Emit the events - Results: None\nmanager.emit(\"test\");\nmanager.emit(\"test2\");\nmanager.emit(\"test3\");\nmanager.emit(\"test4\");\n\n// Catch exceptions in event handlers\nmanager.on(\"error\", function () {\n  throw new Error(\"test\");\n});\nmanager.catchExceptions(function (error) {\n  console.log(error);\n});\n\n// Emit the event - Results: \"test\"\nmanager.emit(\"error\");\n\n// Subscribe with condition that invokes once condition is met\nmanager.once(\"test\", function () {\n  console.log(\"I\");\n}, function (current) {\n  return current > 3;\n});\n\n// Subscribe with condition that invokes every time condition is met\nmanager.once(\"test\", function () {\n  console.log(\"J\");\n}, function (current) {\n  return current > 2;\n}, true);\n\n// Emit the event > current: 0 - Results: None\nmanager.emit(\"test\", 0);\n\n// Emit the event > current: 3 - Results: J\nmanager.emit(\"test\", 3);\n\n// Emit the event > current: 4 - Results: I, J\nmanager.emit(\"test\", 4);\n\n// Emit the event > current: 5 - Results: J\nmanager.emit(\"test\", 5);"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 151,
            "description": "Function that handles caught errors.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 162,
            "description": "Function that returns the documented `.on()` method.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 177,
            "description": "Function that returns the documented `.once()` method.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 197,
            "description": "Function that returns the documented `.off()` method.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 233,
            "description": "Function that returns the documented `.catch()` method.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 240,
            "description": "Function that returns the documented `.emit()` method.",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 274,
            "description": "Function that loops an object.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "Array|JSON"
                },
                {
                    "name": "fn",
                    "description": "The callback function invoked for each object item looped.\n- To break the function loop, return `true`.\n- To increment or decrement loop, return a (`Number`), and be careful of using it to prevent infinite loops.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "item",
                            "description": "The object item.",
                            "type": "Any"
                        },
                        {
                            "name": "index",
                            "description": "The object item index or property key.",
                            "type": "Number|String"
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example 1: Loop Array - Results: a 1, b 2, c 3\nTemasys.Utils.forEach([\"a\", \"b\", \"c\"], function (item, index) {\n  console.log(item, index);\n});\n\n// Example 2: Loop JSON - Results: 1 a, 2 b, 3 c\nTemasys.Utils.forEach({ a: 1, b: 2, c: 3 }, function (item, prop) {\n  console.log(item, prop);\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 320,
            "description": "Function that copies an object to remove pointer reference.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "Array|JSON"
                },
                {
                    "name": "return",
                    "description": "The copied object.",
                    "type": "Array|JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|JSON"
            },
            "example": [
                "\n// Example 1: Copy an Array - Results: [1, 2, 3]\nvar copyArray = Temasys.Utils.copy([1,2,3]);\n\n// Example 2: Copy a JSON - Results: { a: \"0\", b: \"1\", c: \"2\" }\nvar copyJSON = Temasys.Utils.copy({\n  a: \"0\",\n  b: \"1\",\n  c: \"2\"\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 355,
            "description": "Function that extends an object to another object.\n- Note that conflicting properties will be overwritten.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "object",
                    "description": "The object.",
                    "type": "JSON"
                },
                {
                    "name": "extendObject",
                    "description": "The object to extend.",
                    "type": "JSON"
                },
                {
                    "name": "return",
                    "description": "The extended object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "example": [
                "\n// Example: Extend a JSON - Results: { a: 1, b: 2, c: 3 }\nvar extended = Temasys.Utils.extend({\n  a: 1,\n  b: 2\n}, {\n  c: 3\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 387,
            "description": "Function that generates an unique identifier (UUID).",
            "itemtype": "method",
            "name": "generateUUID",
            "example": [
                "\n// Example: Generate an UUID\nvar uuid = Temasys.Utils.generateUUID();"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/components/utils.js",
            "line": 412,
            "description": "Function that gets the client browser current and recommended version supports.",
            "itemtype": "method",
            "name": "getClientSupports",
            "params": [
                {
                    "name": "return",
                    "description": "The Promise for the request result.",
                    "type": "Promise",
                    "props": [
                        {
                            "name": "then",
                            "description": "Function to subscribe to when request result is successful.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "fn",
                                    "description": "The callback function.",
                                    "type": "Function"
                                },
                                {
                                    "name": "fn.result",
                                    "description": "The result.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current",
                                    "description": "The current versions and supports.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.browser",
                                    "description": "The browser information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.browser.name",
                                    "description": "The browser name.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.current.browser.version",
                                    "description": "The browser version.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.current.browser.platform",
                                    "description": "The browser platform.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.current.browser.mobilePlatformVersion",
                                    "description": "The browser mobile platform version\n  if the client is accessing from Android and iOS mobile devices.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.dependencies",
                                    "description": "The dependencies loaded.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.dependencies.adapterjs",
                                    "description": "The loaded AdapterJS dependency version.\n- This is defined only for when the AdapterJS dependency versions `0.13.0` and above is loaded.\n- Note that this is required for starting `Temasys.Room` session connections.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.dependencies.io",
                                    "description": "The flag if the socket.io-client dependency is loaded.\n- Note that this is required for starting `Temasys.Room` session connections.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin",
                                    "description": "The WebRTC plugin information.\n- This is defined only when the WebRTC plugin is loaded for the current accessing webpage, which is loaded from\n  the AdapterJS dependency.\n- For more advanced usage of the WebRTC plugin, see https://confluence.temasys.com.sg/display/TWT/Useful+debug+APIs.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.active",
                                    "description": "The flag if the WebRTC plugin is active.\n- This determines if the WebRTC and `getUserMedia()` API functionalities is enabled.\n- It is also advisable to check if the plugin `<object>` element css `display` is set to `\"none\"` as the\n  `display` property must be displayed in order for the plugin to load, which is some cases the WebRTC plugin is active\n  but disabled (hence made inactive) because of the `display` css settings. To prevent displaying the plugin\n  `<object>` element, you may set the css `visibility` to `\"hidden\"` and use `z-index` properties to cover it.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.version",
                                    "description": "The WebRTC plugin version.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.company",
                                    "description": "The WebRTC plugin company name it is built for.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.expirationDate",
                                    "description": "The WebRTC plugin expiration date if any.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.whiteList",
                                    "description": "The WebRTC plugin whitelist settings.\n- This is defined only when whitelisting is configured for the WebRTC plugin.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.whiteList.enabled",
                                    "description": "The flag if current accessing domain\n  is configured in the list of whitelisted domains for the WebRTC plugin.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.whiteList.restrictsUsage",
                                    "description": "The flag that disables the\n  WebRTC and `getUserMedia()` API for the WebRTC plugin unless current accessing domain is configured\n  in the list of whitelisted domains.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.whiteList.restrictsFeatures",
                                    "description": "The flag that disables the\n  `webrtcPlugin.features` for the WebRTC plugin unless current accessing domain is configured in the\n  list of whitelisted domains.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features",
                                    "description": "The WebRTC plugin features supports.\n- The enabling of these features are determined based on the WebRTC plugin pricing plan selected.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.crashReporter",
                                    "description": "The flag if\n  the crash reporter is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.autoUpdate",
                                    "description": "The flag if\n  auto updating of the plugin is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.screensharing",
                                    "description": "The flag if\n  screensharing functionalities is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.h264",
                                    "description": "The flag if\n  H264 video codec is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.httpProxy",
                                    "description": "The flag if\n  connections behind HTTP proxy is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.noPermissionPopup",
                                    "description": "The flag if\n  permission popup is disabled for the WebRTC plugin when invoking `getUserMedia()` API method.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.webrtcPlugin.features.experimentalAEC",
                                    "description": "The flag if\n  experimental AEC (acoustic echo cancellation) is enabled for the WebRTC plugin.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports",
                                    "description": "The browser supports.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc",
                                    "description": "The WebRTC and `getUserMedia()` API supports.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.connection",
                                    "description": "The flag if `RTCPeerConnection` API is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.datachannel",
                                    "description": "The flag if `RTCDataChannel` API is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.dtmfsender",
                                    "description": "The flag if `RTCDTMFSender` API is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.generateCertificate",
                                    "description": "The flag if\n  `RTCPeerConnection.generateCertificate` API is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.iceRestart",
                                    "description": "The flag if ICE credentials restart is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.maxBandwidth",
                                    "description": "The flag if maximum sending bandwidth\n  limitations (`b=AS` or `b=TIAS` flags) is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.turns",
                                    "description": "The flag if TURN over TLS protocol is supported\n  when connecting to TURN server.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.stun",
                                    "description": "The flag if STUN connections is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.turnOverTcp",
                                    "description": "The flag if TURN connections over TCP IP\n  protocol is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.screensharing",
                                    "description": "The flag if screensharing functionalities\n  is supported.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs",
                                    "description": "The list of codecs supported.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send",
                                    "description": "The sending codecs.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio",
                                    "description": "The sending audio codecs.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio._codecName",
                                    "description": "The codec information.\n- The property key (`#codeName`) value is the codec name.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio._codecName.payloadType",
                                    "description": "The\n  codec payload number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio._codecName.clockRate",
                                    "description": "The\n  codec clock rate in Hz (hertz).",
                                    "type": "Number"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio._codecName.payloadType",
                                    "description": "The\n  number of channels, where mono is represented as `1`, and stereo as `2`.",
                                    "type": "Number"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.audio._codecName.sdpFmtpLine",
                                    "description": "The\n  codec parameters configured as its corresponding `a=fmtp` SDP line.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.send.video",
                                    "description": "The sending video codecs.\n- Object signature matches `current.supports.webrtc.codecs.send.audio`.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.recv",
                                    "description": "The receiving codecs.\n- Object signature matches `current.supports.webrtc.codecs.send.audio`.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.recv.audio",
                                    "description": "The receiving audio codecs.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.webrtc.codecs.recv.video",
                                    "description": "The receiving video codecs.\n- Object signature matches `current.supports.webrtc.codecs.send.audio`.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.current.supports.xhr",
                                    "description": "The flag if `XMLHttpRequest` API is supported.\n- Note that this is required for starting `Temasys.Room` session connections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.current.supports.corsRequest",
                                    "description": "The flag if CORS (cross origin resource sharing)\n  domain requests is supported, in which the CORS domain is determined from current accessing domain request.\n- Note that this is required for CORS authentication when starting `Temasys.Room` session connections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "fn.result.recommended",
                                    "description": "The recommended dependencies, browsers and WebRTC plugin versions.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.recommended.browsers",
                                    "description": "The browsers.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.recommended.browsers.chrome",
                                    "description": "The chrome browser recommended versions.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.recommended.browser.chrome.minVersion",
                                    "description": "The recommended minimum version.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.chrome.maxVersion",
                                    "description": "The recommended maximum version if any.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.recommended.browser.chrome.minMobilePlatformVersion",
                                    "description": "The recommended\n  minimum version of the mobile platform if any.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.recommended.browser.chrome.maxMobilePlatformVersion",
                                    "description": "The recommended\n  maximum version of the mobile platform if any.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.recommended.browser.opera",
                                    "description": "The opera browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.firefox",
                                    "description": "The firefox browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.IE",
                                    "description": "The IE browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.safari",
                                    "description": "The safari browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.edge",
                                    "description": "The Edge browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.browser.bowser",
                                    "description": "The Bowser browser recommended versions.\n- Object signature matches `recommended.browser.chrome`.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.webrtcPlugin",
                                    "description": "The WebRTC plugin versions recommended.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.recommended.webrtcPlugin.minVersion",
                                    "description": "The recommended WebRTC plugin minimum version.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.webrtcPlugin.maxVersion",
                                    "description": "The recommended WebRTC\n plugin maxmimum version if any.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "fn.result.recommended.dependencies",
                                    "description": "The dependencies.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "fn.result.recommended.dependencies.adapterjs",
                                    "description": "The recommended AdapterJS dependency version.",
                                    "type": "String"
                                },
                                {
                                    "name": "fn.result.recommended.dependencies.io",
                                    "description": "The recommended socket.io-client dependency version.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "catch",
                            "description": "Function to subscribe to when request result has errors.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "fn",
                                    "description": "The callback function.",
                                    "type": "Function"
                                },
                                {
                                    "name": "fn.error",
                                    "description": "The error object.",
                                    "type": "Error"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n// Example: Get the supports\nTemasys.Utils.getClientSupports().then(function (result) {\n  console.info(\"==== Browser information ==== \");\n  console.log(\"- Name ->\", result.current.browser.name);\n  console.log(\"- Version ->\", result.current.browser.version);\n  console.log(\"- Platform ->\", result.current.browser.platform + (result.current.browser.mobilePlatformVersion ?\n    \" (OS version: \" + result.current.browser.mobilePlatformVersion : \"\"));\n\n  console.info(\"==== Dependencies information ==== \");\n  console.log(\"- AdapterJS version ->\", result.current.dependencies.adapterjs || 'Not Loaded');\n  console.log(\"- Socket.io-client loaded ->\", result.current.dependencies.io);\n\n  if (result.current.webrtcPlugin) {\n    console.info(\"==== WebRTC plugin information ==== \");\n    console.log(\"- Company ->\", result.current.webrtcPlugin.company);\n    console.log(\"- Version ->\", result.current.webrtcPlugin.version);\n    console.log(\"- Expiration date ->\", result.current.webrtcPlugin.expirationDate || 'None');\n\n    if (result.current.webrtcPlugin.whiteList) {\n      console.log(\"- Whitelisted plugin:\");\n      console.log(\"-- Domain is enabled ->\", result.current.webrtcPlugin.whiteList.enabled);\n      console.log(\"-- Whitelist restriction of features ->\", result.current.webrtcPlugin.whiteList.restrictsFeatures);\n      console.log(\"-- Whitelist restriction of WebRTC API ->\", result.current.webrtcPlugin.whiteList.restrictsUsage);\n    }\n  }\n\n  console.info(\"==== Supports ====\");\n  console.log(\"- XMLHttpRequest API ->\", result.current.supports.xhr);\n  console.log(\"- CORS domain request ->\", result.current.supports.corsRequest);\n  console.log(\"- WebRTC:\");\n  console.log(\"-- Enabled ->\", result.current.supports.webrtc.connection);\n  console.log(\"-- Datachannel ->\", result.current.supports.webrtc.datachannel);\n  console.log(\"-- DTMFSender ->\", result.current.supports.webrtc.dtmfsender);\n  console.log(\"-- Generation of new certificate ->\", result.current.supports.webrtc.generateCertificate);\n  console.log(\"-- ICE restart ->\", result.current.supports.webrtc.iceRestart);\n  console.log(\"-- TURN over TLS connections ->\", result.current.supports.webrtc.turns);\n  console.log(\"-- Max sending bandwidth limits ->\", result.current.supports.webrtc.maxBandwidth);\n  console.log(\"-- STUN ->\", result.current.supports.webrtc.stun);\n  console.log(\"-- TURN over TCP ->\", result.current.supports.webrtc.turnOverTcp);\n\n  var parseCodecs = function (kind, dir) {\n    console.log(\"-- \" + kind + \" \" + dir + \" codecs:\");\n    for (var codecName in result.current.supports.webrtc.codecs[dir][kind]) {\n      if (result.current.supports.webrtc.codecs[dir][kind].hasOwnProperty(codecName)) {\n        console.log(\"--- \" + codecName + \":\")\n        console.log(\"---- Payload ->\", result.current.supports.webrtc.codecs[dir][kind][codecName].payloadType);\n        console.log(\"---- Channels ->\", result.current.supports.webrtc.codecs[dir][kind][codecName].channels);\n        console.log(\"---- Clockrate ->\", result.current.supports.webrtc.codecs[dir][kind][codecName].clockRate);\n        console.log(\"---- Params ->\", result.current.supports.webrtc.codecs[dir][kind][codecName].sdpFmtpLine || 'None');\n      }\n    }\n  };\n\n  parseCodecs('audio', 'send');\n  parseCodecs('video', 'send');\n  parseCodecs('audio', 'recv');\n  parseCodecs('video', 'recv');\n\n  console.info(\"==== Recommended Browsers Versions ====\");\n  for (var browserName in result.recommended.browsers) {\n    if (result.recommended.browsers.hasOwnProperty(browserName)) {\n      console.log(\"- \" + browserName + \" :\");\n      console.log(\"-- Min version ->\", result.recommended.browsers[browserName].minVersion || 'N/A');\n      console.log(\"-- Max version ->\", result.recommended.browsers[browserName].maxVersion || 'N/A');\n      console.log(\"-- Min mobile platform version ->\", result.recommended.browsers[browserName].mobilePlatformMinVersion || 'N/A');\n      console.log(\"-- Max mobile platform version ->\", result.recommended.browsers[browserName].mobilePlatformMaxVersion || 'N/A');\n    }\n  }\n\n  console.info(\"==== Recommended WebRTC Plugin Versions ====\");\n  console.log(\"- Min version ->\", result.recommended.webrtcPlugin.minVersion || 'N/A');\n  console.log(\"- Max version ->\", result.recommended.webrtcPlugin.maxVersion || 'N/A');\n\n  console.info(\"==== Recommended Dependencies Versions ====\");\n  console.log(\"- AdapterJS version ->\", result.recommended.dependencies.adapterjs);\n  console.log(\"- Socket.io-client version ->\", result.recommended.dependencies.io);\n}).catch(function (error) {\n  console.error(\"Browser supports retrieval error ->\", error);\n});"
            ],
            "since": "0.7.0",
            "class": "Temasys.Utils"
        },
        {
            "file": "source/template/header.js",
            "line": 20,
            "description": "Global function that clones an object.",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 125,
            "description": "Stores the flag if Peers should have any Datachannel connections.",
            "itemtype": "attribute",
            "name": "_enableDataChannel",
            "default": "true",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 136,
            "description": "Stores the list of Peer Datachannel connections.",
            "itemtype": "attribute",
            "name": "_dataChannels",
            "params": [
                {
                    "name": "#peerId",
                    "description": "The list of Datachannels associated with Peer ID.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "#channelLabel",
                            "description": "The Datachannel connection.\n  The property name <code>\"main\"</code> is reserved for messaging Datachannel type.",
                            "type": "RTCDataChannel"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 149,
            "description": "Stores the list of data transfers from / to Peers.",
            "itemtype": "attribute",
            "name": "_dataTransfers",
            "params": [
                {
                    "name": "#transferId",
                    "description": "The data transfer session.",
                    "type": "JSON"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 160,
            "description": "Stores the list of sending data streaming sessions to Peers.",
            "itemtype": "attribute",
            "name": "_dataStreams",
            "params": [
                {
                    "name": "#streamId",
                    "description": "The data stream session.",
                    "type": "JSON"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 171,
            "description": "Stores the list of buffered ICE candidates that is received before\n  remote session description is received and set.",
            "itemtype": "attribute",
            "name": "_peerCandidatesQueue",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The list of the Peer connection buffered ICE candidates received.",
                    "type": "Array",
                    "props": [
                        {
                            "name": "<#index>",
                            "description": "The Peer connection buffered ICE candidate received.",
                            "type": "RTCIceCandidate"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 184,
            "description": "Stores the list of ICE candidates received before signaling end.",
            "itemtype": "attribute",
            "name": "_peerEndOfCandidatesCounter",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 194,
            "description": "Stores the list of Peer connection ICE candidates.",
            "itemtype": "attribute",
            "name": "_gatheredCandidates",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The list of the Peer connection ICE candidates.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "sending",
                            "description": "The list of the Peer connection ICE candidates sent.",
                            "type": "JSON"
                        },
                        {
                            "name": "receiving",
                            "description": "The list of the Peer connection ICE candidates received.",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.14",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 207,
            "description": "Stores the flags for ICE candidate filtering.",
            "itemtype": "attribute",
            "name": "_filterCandidatesType",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 221,
            "description": "Stores the flag that indicates if Peer connections should trickle ICE.",
            "itemtype": "attribute",
            "name": "_enableIceTrickle",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 232,
            "description": "Stores the flag that indicates if STUN ICE servers should be used when constructing Peer connection.",
            "itemtype": "attribute",
            "name": "_enableSTUN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 243,
            "description": "Stores the flag that indicates if TURN ICE servers should be used when constructing Peer connection.",
            "itemtype": "attribute",
            "name": "_enableTURN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 254,
            "description": "Stores the flag that indicates if public STUN ICE servers should be used when constructing Peer connection.",
            "itemtype": "attribute",
            "name": "_usePublicSTUN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 265,
            "description": "Stores the global number of Peer connection retries that would increase the wait-for-response timeout\n  for the Peer connection health timer.",
            "itemtype": "attribute",
            "name": "_retryCounters",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 276,
            "description": "Stores the list of the Peer connections.",
            "itemtype": "attribute",
            "name": "_peerConnections",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The Peer connection.",
                    "type": "RTCPeerConnection"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 287,
            "description": "Stores the list of the Peer connections stats.",
            "itemtype": "attribute",
            "name": "_peerStats",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The Peer connection stats.",
                    "type": "JSON"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 298,
            "description": "Stores the list of the Peer connections stats.",
            "itemtype": "attribute",
            "name": "_peerBandwidth",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The Peer connection stats.",
                    "type": "JSON"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 309,
            "description": "Stores the list of the Peer custom configs.",
            "itemtype": "attribute",
            "name": "_peerCustomConfigs",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 319,
            "description": "The flag if User is using plugin.",
            "itemtype": "attribute",
            "name": "_isUsingPlugin",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 329,
            "description": "Stores the option for the TURN protocols to use.\nThis should configure the TURN ICE servers urls <code>?transport=protocol</code> flag.",
            "itemtype": "attribute",
            "name": "_TURNTransport",
            "type": "String",
            "default": "\"any\"",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 342,
            "description": "Stores the list of Peers session information.",
            "itemtype": "attribute",
            "name": "_peerInformations",
            "params": [
                {
                    "name": "<#peerId>",
                    "description": "The Peer session information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "userData",
                            "description": "The Peer custom data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "settings",
                            "description": "The Peer streaming information.",
                            "type": "JSON"
                        },
                        {
                            "name": "mediaStatus",
                            "description": "The Peer streaming muted status.",
                            "type": "JSON"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer agent information.",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 357,
            "description": "Stores the Signaling user credentials from the API response required for connecting to the Signaling server.",
            "itemtype": "attribute",
            "name": "_user",
            "params": [
                {
                    "name": "uid",
                    "description": "The API result \"username\".",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The API result \"userCred\".",
                    "type": "String"
                },
                {
                    "name": "timeStamp",
                    "description": "The API result \"timeStamp\".",
                    "type": "String"
                },
                {
                    "name": "sid",
                    "description": "The Signaling server receive user Peer ID.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 371,
            "description": "Stores the User custom data.\nBy default, if no custom user data is set, it is an empty string <code>\"\"</code>.",
            "itemtype": "attribute",
            "name": "_userData",
            "type": "JSON|String",
            "default": "\"\"",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 383,
            "description": "Stores the User connection priority weight.\nIf Peer has a higher connection weight, it will do the offer from its Peer connection first.",
            "itemtype": "attribute",
            "name": "_peerPriorityWeight",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 394,
            "description": "Stores the flag that indicates if \"autoIntroduce\" is enabled.\nIf enabled, the Peers connecting the same Room will receive each others \"enter\" message ping.",
            "itemtype": "attribute",
            "name": "_autoIntroduce",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 406,
            "description": "Stores the flag that indicates if \"isPrivileged\" is enabled.\nIf enabled, the User has Privileged features which has the ability to retrieve the list of\n  Peers in the same App space with <code>getPeers()</code> method\n  and introduce Peers to each other with <code>introducePeer</code> method.",
            "itemtype": "attribute",
            "name": "isPrivileged",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 420,
            "description": "Stores the list of Peers retrieved from the Signaling from <code>getPeers()</code> method.",
            "itemtype": "attribute",
            "name": "_peerList",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 430,
            "description": "Stores the current Room name that User is connected to.",
            "itemtype": "attribute",
            "name": "_selectedRoom",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 440,
            "description": "Stores the flag that indicates if Room is locked.",
            "itemtype": "attribute",
            "name": "_roomLocked",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 450,
            "description": "Stores the flag that indicates if User is connected to the Room.",
            "itemtype": "attribute",
            "name": "_inRoom",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 460,
            "description": "Stores the list of <code>on()</code> event handlers.",
            "itemtype": "attribute",
            "name": "_EVENTS",
            "params": [
                {
                    "name": "<#event>",
                    "description": "The list of event handlers associated with the event.",
                    "type": "Array",
                    "props": [
                        {
                            "name": "<#index>",
                            "description": "The event handler function.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 472,
            "description": "Stores the list of <code>once()</code> event handlers.\nThese events are only triggered once.",
            "itemtype": "attribute",
            "name": "_onceEvents",
            "params": [
                {
                    "name": "<#event>",
                    "description": "The list of event handlers associated with the event.",
                    "type": "Array",
                    "props": [
                        {
                            "name": "<#index>",
                            "description": "The array of event handler function and its condition function.",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 485,
            "description": "Stores the timestamps data used for throttling.",
            "itemtype": "attribute",
            "name": "_timestamp",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 501,
            "description": "Stores the throttling interval timeout.",
            "itemtype": "attribute",
            "name": "_throttlingTimeouts",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 515,
            "description": "Stores the flag if throttling should throw when called less than the interval timeout.",
            "itemtype": "attribute",
            "name": "_throttlingShouldThrowError",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 525,
            "description": "Stores the current socket connection information.",
            "itemtype": "attribute",
            "name": "_socketSession",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.13",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 535,
            "description": "Stores the queued socket messages.\nThis is to prevent too many sent over less than a second interval that might cause dropped messages\n  or jams to the Signaling connection.",
            "itemtype": "attribute",
            "name": "_socketMessageQueue",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 547,
            "description": "Stores the <code>setTimeout</code> to sent queued socket messages.",
            "itemtype": "attribute",
            "name": "_socketMessageTimeout",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 557,
            "description": "Stores the list of socket ports to use to connect to the Signaling.\nThese ports are defined by default which is commonly used currently by the Signaling.\nShould re-evaluate this sometime.",
            "itemtype": "attribute",
            "name": "_socketPorts",
            "params": [
                {
                    "name": "http:",
                    "description": "The list of HTTP socket ports.",
                    "type": "Array"
                },
                {
                    "name": "https:",
                    "description": "The list of HTTPS socket ports.",
                    "type": "Array"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 574,
            "description": "Stores the flag that indicates if socket connection to the Signaling has opened.",
            "itemtype": "attribute",
            "name": "_channelOpen",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 584,
            "description": "Stores the Signaling server url.",
            "itemtype": "attribute",
            "name": "_signalingServer",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 594,
            "description": "Stores the Signaling server protocol.",
            "itemtype": "attribute",
            "name": "_signalingServerProtocol",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 604,
            "description": "Stores the Signaling server port.",
            "itemtype": "attribute",
            "name": "_signalingServerPort",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 614,
            "description": "Stores the Signaling socket connection object.",
            "itemtype": "attribute",
            "name": "_socket",
            "type": "io",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 624,
            "description": "Stores the socket connection timeout when establishing connection to the Signaling.",
            "itemtype": "attribute",
            "name": "_socketTimeout",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 634,
            "description": "Stores the flag that indicates if XDomainRequest is used for IE 8/9.",
            "itemtype": "attribute",
            "name": "_socketUseXDR",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 644,
            "description": "Stores the value if ICE restart is supported.",
            "itemtype": "attribute",
            "name": "_enableIceRestart",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 655,
            "description": "Stores the flag if MCU environment is enabled.",
            "itemtype": "attribute",
            "name": "_hasMCU",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 665,
            "description": "Stores the flag if HTTPS connections should be enforced when connecting to\n  the API or Signaling server if App is accessing from HTTP domain.\nHTTPS connections are enforced if App is accessing from HTTPS domains.",
            "itemtype": "attribute",
            "name": "_forceSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 678,
            "description": "Stores the flag if TURNS connections should be enforced when connecting to\n  the TURN server if App is accessing from HTTP domain.\nTURNS connections are enforced if App is accessing from HTTPS domains.",
            "itemtype": "attribute",
            "name": "_forceTURNSSL",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 691,
            "description": "Stores the flag if TURN connections should be enforced when connecting to Peers.\nThis filters all non \"relay\" ICE candidates to enforce connections via the TURN server.",
            "itemtype": "attribute",
            "name": "_forceTURN",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 703,
            "description": "Stores the construct API REST path to obtain Room credentials.",
            "itemtype": "attribute",
            "name": "_path",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 713,
            "description": "Stores the API server url.",
            "itemtype": "attribute",
            "name": "_roomServer",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 723,
            "description": "Stores the App Key configured in <code>init()</code>.",
            "itemtype": "attribute",
            "name": "_appKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 733,
            "description": "Stores the default Room name to connect to when <code>joinRoom()</code> does not provide a Room name.",
            "itemtype": "attribute",
            "name": "_defaultRoom",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 743,
            "description": "Stores the <code>init()</code> credentials starting DateTime stamp in ISO 8601.",
            "itemtype": "attribute",
            "name": "_roomStart",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 753,
            "description": "Stores the <code>init()</code> credentials duration counted in hours.",
            "itemtype": "attribute",
            "name": "_roomDuration",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 763,
            "description": "Stores the <code>init()</code> generated credentials string.",
            "itemtype": "attribute",
            "name": "_roomCredentials",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 773,
            "description": "Stores the current <code>init()</code> readyState.",
            "itemtype": "attribute",
            "name": "_readyState",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 783,
            "description": "Stores the \"cid\" used for <code>joinRoom()</code>.",
            "itemtype": "attribute",
            "name": "_key",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 793,
            "description": "Stores the \"apiOwner\" used for <code>joinRoom()</code>.",
            "itemtype": "attribute",
            "name": "_appKeyOwner",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 803,
            "description": "Stores the Room credentials information for <code>joinRoom()</code>.",
            "itemtype": "attribute",
            "name": "_room",
            "params": [
                {
                    "name": "id",
                    "description": "The \"rid\" for <code>joinRoom()</code>.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The \"roomCred\" for <code>joinRoom()</code>.",
                    "type": "String"
                },
                {
                    "name": "startDateTime",
                    "description": "The \"start\" for <code>joinRoom()</code>.",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The \"len\" for <code>joinRoom()</code>.",
                    "type": "String"
                },
                {
                    "name": "connection",
                    "description": "The RTCPeerConnection constraints and configuration. This is not used in the SDK\n  except for the \"mediaConstraints\" property that sets the default <code>getUserMedia()</code> settings.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 819,
            "description": "Stores the list of Peer messages timestamp.",
            "itemtype": "attribute",
            "name": "_peerMessagesStamps",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 829,
            "description": "Stores the flag that indicates if <code>getUserMedia()</code> should fallback to retrieve\n  audio only Stream after retrieval of audio and video Stream had failed.",
            "itemtype": "attribute",
            "name": "_audioFallback",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 841,
            "description": "Stores the Streams.",
            "itemtype": "attribute",
            "name": "_streams",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 854,
            "description": "Stores the default camera Stream settings.",
            "itemtype": "attribute",
            "name": "_streamsDefaultSettings",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 880,
            "description": "Stores all the Stream required muted settings.",
            "itemtype": "attribute",
            "name": "_streamsMutedSettings",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 893,
            "description": "Stores all the Stream sending maximum bandwidth settings.",
            "itemtype": "attribute",
            "name": "_streamsBandwidthSettings",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 906,
            "description": "Stores all the Stream stopped callbacks.",
            "itemtype": "attribute",
            "name": "_streamsStoppedCbs",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 916,
            "description": "Stores all the Stream sessions.\nDefined as <code>false</code> when Stream has already ended.",
            "itemtype": "attribute",
            "name": "_streamsSession",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 927,
            "description": "Stores the preferred sending Peer connection streaming audio codec.",
            "itemtype": "attribute",
            "name": "_selectedAudioCodec",
            "type": "String",
            "default": "\"auto\"",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 938,
            "description": "Stores the preferred sending Peer connection streaming video codec.",
            "itemtype": "attribute",
            "name": "_selectedVideoCodec",
            "type": "String",
            "default": "\"auto\"",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 949,
            "description": "Stores the flag if ulpfec and red codecs should be removed.",
            "itemtype": "attribute",
            "name": "_disableVideoFecCodecs",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 960,
            "description": "Stores the flag if CN (Comfort Noise) codec should be removed.",
            "itemtype": "attribute",
            "name": "_disableComfortNoiseCodec",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 971,
            "description": "Stores the flag if REMB feedback packets should be removed.",
            "itemtype": "attribute",
            "name": "_disableREMB",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 982,
            "description": "Stores the session description settings.",
            "itemtype": "attribute",
            "name": "_sdpSettings",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1002,
            "description": "Stores the publish only settings.",
            "itemtype": "attribute",
            "name": "_publishOnly",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1012,
            "description": "Stores the parent ID.",
            "itemtype": "attribute",
            "name": "_parentId",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1022,
            "description": "Stores the list of recordings.",
            "itemtype": "attribute",
            "name": "_recordings",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1033,
            "description": "Stores the current active recording session ID.\nThere can only be 1 recording session at a time in a Room",
            "itemtype": "attribute",
            "name": "_currentRecordingId",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1045,
            "description": "Stores the recording session timeout to ensure 4 seconds has been recorded.",
            "itemtype": "attribute",
            "name": "_recordingStartInterval",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1056,
            "description": "Stores the flag if MCU should use renegotiation.",
            "itemtype": "attribute",
            "name": "_mcuUseRenegoRestart",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1066,
            "description": "Stores the debugging TURN/STUN ICE server.",
            "itemtype": "attribute",
            "name": "_iceServer",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1076,
            "description": "Stores the debugging Signaling server.",
            "itemtype": "attribute",
            "name": "_socketServer",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1086,
            "description": "Stores the currently supported codecs.",
            "itemtype": "attribute",
            "name": "_currentCodecSupport",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1096,
            "description": "Stores the session description orders and info.",
            "itemtype": "attribute",
            "name": "_sdpSessions",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1106,
            "description": "Stores the flag if voice activity detection should be enabled.",
            "itemtype": "attribute",
            "name": "_voiceActivityDetection",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1117,
            "description": "Stores the datachannel binary data chunk type.",
            "itemtype": "attribute",
            "name": "_binaryChunkType",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1128,
            "description": "Stores the RTCPeerConnection configuration.",
            "itemtype": "attribute",
            "name": "_peerConnectionConfig",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1138,
            "description": "Stores the RTCPeerConnection configuration.",
            "itemtype": "attribute",
            "name": "_peerConnectionConfig",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1148,
            "description": "Stores the User's priority weight scheme to determine if User is offerer or answerer.",
            "itemtype": "attribute",
            "name": "_priorityWeightScheme",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 1158,
            "description": "Stores the auto bandwidth settings.",
            "itemtype": "attribute",
            "name": "_bandwidthAdjuster",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 1,
            "description": "The list of Datachannel connection states.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_STATE",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "<small>Value <code>\"connecting\"</code></small>\n  The value of the state when Datachannel is attempting to establish a connection.",
                    "type": "String"
                },
                {
                    "name": "OPEN",
                    "description": "<small>Value <code>\"open\"</code></small>\n  The value of the state when Datachannel has established a connection.",
                    "type": "String"
                },
                {
                    "name": "CLOSING",
                    "description": "<small>Value <code>\"closing\"</code></small>\n  The value of the state when Datachannel connection is closing.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "<small>Value <code>\"closed\"</code></small>\n  The value of the state when Datachannel connection has closed.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>\"error\"</code></small>\n  The value of the state when Datachannel has encountered an exception during connection.",
                    "type": "String"
                },
                {
                    "name": "CREATE_ERROR",
                    "description": "<small>Value <code>\"createError\"</code></small>\n  The value of the state when Datachannel has failed to establish a connection.",
                    "type": "String"
                },
                {
                    "name": "BUFFERED_AMOUNT_LOW",
                    "description": "<small>Value <code>\"bufferedAmountLow\"</code></small>\n  The value of the state when Datachannel when the amount of data buffered to be sent\n  falls below the Datachannel threshold.\n  <small>This state should occur only during after <a href=\"#method_sendBlobData\">\n  <code>sendBlobData()</code> method</a> or <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> or\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.</small>",
                    "type": "String"
                },
                {
                    "name": "SEND_MESSAGE_ERROR",
                    "description": "<small>Value <code>\"sendMessageError\"</code></small>\n  The value of the state when Datachannel when data transfer packets or P2P message fails to send.\n  <small>This state should occur only during after <a href=\"#method_sendBlobData\">\n  <code>sendBlobData()</code> method</a> or <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> or\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 43,
            "description": "The list of Datachannel types.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_TYPE",
            "params": [
                {
                    "name": "MESSAGING",
                    "description": "<small>Value <code>\"messaging\"</code></small>\n  The value of the Datachannel type that is used only for messaging in\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.\n  <small>However for Peers that do not support simultaneous data transfers, this Datachannel\n  type will be used to do data transfers (1 at a time).</small>\n  <small>Each Peer connections will only have one of this Datachannel type and the\n  connection will only close when the Peer connection is closed (happens when <a href=\"#event_peerConnectionState\">\n  <code>peerConnectionState</code> event</a> triggers parameter payload <code>state</code> as\n  <code>CLOSED</code> for Peer).</small>",
                    "type": "String"
                },
                {
                    "name": "DATA",
                    "description": "<small>Value <code>\"data\"</code></small>\n  The value of the Datachannel type that is used only for a data transfer in\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> and\n  <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>.\n  <small>The connection will close after the data transfer has been completed or terminated (happens when\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter payload\n  <code>state</code> as <code>DOWNLOAD_COMPLETED</code>, <code>UPLOAD_COMPLETED</code>,\n  <code>REJECTED</code>, <code>CANCEL</code> or <code>ERROR</code> for Peer).</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 73,
            "description": "The list of Datachannel sending message error types.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_MESSAGE_ERROR",
            "params": [
                {
                    "name": "MESSAGE",
                    "description": "<small>Value <code>\"message\"</code></small>\n  The value of the Datachannel sending message error type when encountered during\n  sending P2P message from <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.",
                    "type": "String"
                },
                {
                    "name": "TRANSFER",
                    "description": "<small>Value <code>\"transfer\"</code></small>\n  The value of the Datachannel sending message error type when encountered during\n  data transfers from <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> or\n  <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 93,
            "description": "Function that starts a Datachannel connection with Peer.",
            "itemtype": "method",
            "name": "_createDataChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 196,
            "description": "Function that returns the Datachannel buffer threshold and amount.",
            "itemtype": "method",
            "name": "_getDataChannelBuffer",
            "return": {
                "description": "The buffered amount information.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 218,
            "description": "Function that sends data over the Datachannel connection.",
            "itemtype": "method",
            "name": "_sendMessageToDataChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 293,
            "description": "Function that stops the Datachannel connection and removes object references.",
            "itemtype": "method",
            "name": "_closeDataChannel",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 1,
            "description": "The list of supported data transfer data types.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_DATA_TYPE",
            "params": [
                {
                    "name": "BINARY_STRING",
                    "description": "<small>Value <code>\"binaryString\"</code></small>\n  The value of data transfer data type when Blob binary data chunks encoded to Base64 encoded string are\n  sent or received over the Datachannel connection for the data transfer session.\n  <small>Used only in <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> when\n  parameter <code>sendChunksAsBinary</code> value is <code>false</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "ARRAY_BUFFER",
                    "description": "<small>Value <code>\"arrayBuffer\"</code></small>\n  The value of data transfer data type when ArrayBuffer binary data chunks are\n  sent or received over the Datachannel connection for the data transfer session.\n  <small>Used only in <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> when\n  parameter <code>sendChunksAsBinary</code> value is <code>true</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "BLOB",
                    "description": "<small>Value <code>\"blob\"</code></small>\n  The value of data transfer data type when Blob binary data chunks are\n  sent or received over the Datachannel connection for the data transfer session.\n  <small>Used only in <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> when\n  parameter <code>sendChunksAsBinary</code> value is <code>true</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "STRING",
                    "description": "<small>Value <code>\"string\"</code></small>\n  The value of data transfer data type when only string data chunks are\n  sent or received over the Datachannel connection for the data transfer session.\n  <small>Used only in <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a>.</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 35,
            "description": "Stores the data chunk size for Blob transfers.",
            "itemtype": "attribute",
            "name": "_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 46,
            "description": "Stores the data chunk size for Blob transfers transferring from/to\n  Firefox browsers due to limitation tested in the past in some PCs (linx predominatly).",
            "itemtype": "attribute",
            "name": "_MOZ_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 58,
            "description": "Stores the data chunk size for binary Blob transfers.",
            "itemtype": "attribute",
            "name": "_BINARY_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 69,
            "description": "Stores the data chunk size for binary Blob transfers.",
            "itemtype": "attribute",
            "name": "_MOZ_BINARY_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 80,
            "description": "Stores the data chunk size for data URI string transfers.",
            "itemtype": "attribute",
            "name": "_CHUNK_DATAURL_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 91,
            "description": "Function that converts Base64 string into Blob object.\nThis is referenced from devnull69@stackoverflow.com #6850276.",
            "itemtype": "method",
            "name": "_base64ToBlob",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 111,
            "description": "Function that converts a Blob object into Base64 string.",
            "itemtype": "method",
            "name": "_blobToBase64",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 128,
            "description": "Function that converts a Blob object into ArrayBuffer object.",
            "itemtype": "method",
            "name": "_blobToArrayBuffer",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 149,
            "description": "Function that chunks Blob object based on the data chunk size provided.\nIf provided Blob object size is lesser than or equals to the chunk size, it should return an array\n  of length of <code>1</code>.",
            "itemtype": "method",
            "name": "_chunkBlobData",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 181,
            "description": "Function that chunks large string into string chunks based on the data chunk size provided.\nIf provided string length is lesser than or equals to the chunk size, it should return an array\n  of length of <code>1</code>.",
            "itemtype": "method",
            "name": "_chunkDataURL",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Note that this is used only for SDK developer purposes.<br>\n  Current version: <code>0.1.0</code>\n</blockquote>\nThe value of the current version of the data transfer protocol.",
            "itemtype": "attribute",
            "name": "DT_PROTOCOL_VERSION",
            "type": "String",
            "readonly": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 15,
            "description": "The list of data transfers directions.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_TYPE",
            "params": [
                {
                    "name": "UPLOAD",
                    "description": "<small>Value <code>\"upload\"</code></small>\n  The value of the data transfer direction when User is uploading data to Peer.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD",
                    "description": "<small>Value <code>\"download\"</code></small>\n  The value of the data transfer direction when User is downloading data from Peer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 32,
            "description": "The list of data transfers session types.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_SESSION_TYPE",
            "params": [
                {
                    "name": "BLOB",
                    "description": "<small>Value <code>\"blob\"</code></small>\n  The value of the session type for\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> data transfer.",
                    "type": "String"
                },
                {
                    "name": "DATA_URL",
                    "description": "<small>Value <code>\"dataURL\"</code></small>\n  The value of the session type for\n  <a href=\"#method_sendBlobData\"><code>method_sendBlobData()</code> method</a> data transfer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 51,
            "description": "The list of data transfer states.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_STATE",
            "params": [
                {
                    "name": "UPLOAD_REQUEST",
                    "description": "<small>Value <code>\"request\"</code></small>\n  The value of the state when receiving an upload data transfer request from Peer to User.\n  <small>At this stage, the upload data transfer request from Peer may be accepted or rejected with the\n  <a href=\"#method_acceptDataTransfer\"><code>acceptDataTransfer()</code> method</a> invoked by User.</small>",
                    "type": "String"
                },
                {
                    "name": "USER_UPLOAD_REQUEST",
                    "description": "<small>Value <code>\"userRequest\"</code></small>\n  The value of the state when User sent an upload data transfer request to Peer.\n  <small>At this stage, the upload data transfer request to Peer may be accepted or rejected with the\n  <a href=\"#method_acceptDataTransfer\"><code>acceptDataTransfer()</code> method</a> invoked by Peer.</small>",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_STARTED",
                    "description": "<small>Value <code>\"uploadStarted\"</code></small>\n  The value of the state when the data transfer request has been accepted\n  and data transfer will start uploading data to Peer.\n  <small>At this stage, the data transfer may be terminated with the\n  <a href=\"#method_cancelDataTransfer\"><code>cancelDataTransfer()</code> method</a>.</small>",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_STARTED",
                    "description": "<small>Value <code>\"downloadStarted\"</code></small>\n  The value of the state when the data transfer request has been accepted\n  and data transfer will start downloading data from Peer.\n  <small>At this stage, the data transfer may be terminated with the\n  <a href=\"#method_cancelDataTransfer\"><code>cancelDataTransfer()</code> method</a>.</small>",
                    "type": "String"
                },
                {
                    "name": "REJECTED",
                    "description": "<small>Value <code>\"rejected\"</code></small>\n  The value of the state when upload data transfer request to Peer has been rejected and terminated.",
                    "type": "String"
                },
                {
                    "name": "USER_REJECTED",
                    "description": "<small>Value <code>\"userRejected\"</code></small>\n  The value of the state when User rejected and terminated upload data transfer request from Peer.",
                    "type": "String"
                },
                {
                    "name": "UPLOADING",
                    "description": "<small>Value <code>\"uploading\"</code></small>\n  The value of the state when data transfer is uploading data to Peer.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOADING",
                    "description": "<small>Value <code>\"downloading\"</code></small>\n  The value of the state when data transfer is downloading data from Peer.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_COMPLETED",
                    "description": "<small>Value <code>\"uploadCompleted\"</code></small>\n  The value of the state when data transfer has uploaded successfully to Peer.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_COMPLETED",
                    "description": "<small>Value <code>\"downloadCompleted\"</code></small>\n  The value of the state when data transfer has downloaded successfully from Peer.",
                    "type": "String"
                },
                {
                    "name": "CANCEL",
                    "description": "<small>Value <code>\"cancel\"</code></small>\n  The value of the state when data transfer has been terminated from / to Peer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>\"error\"</code></small>\n  The value of the state when data transfer has errors and has been terminated from / to Peer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 109,
            "description": "The list of data streaming states.",
            "itemtype": "attribute",
            "name": "DATA_STREAM_STATE",
            "params": [
                {
                    "name": "SENDING_STARTED",
                    "description": "<small>Value <code>\"sendStart\"</code></small>\n  The value of the state when data streaming session has started from User to Peer.",
                    "type": "String"
                },
                {
                    "name": "RECEIVING_STARTED",
                    "description": "<small>Value <code>\"receiveStart\"</code></small>\n  The value of the state when data streaming session has started from Peer to Peer.",
                    "type": "String"
                },
                {
                    "name": "RECEIVED",
                    "description": "<small>Value <code>\"received\"</code></small>\n  The value of the state when data streaming session data chunk has been received from Peer to User.",
                    "type": "String"
                },
                {
                    "name": "SENT",
                    "description": "<small>Value <code>\"sent\"</code></small>\n  The value of the state when data streaming session data chunk has been sent from User to Peer.",
                    "type": "String"
                },
                {
                    "name": "SENDING_STOPPED",
                    "description": "<small>Value <code>\"sendStop\"</code></small>\n  The value of the state when data streaming session has stopped from User to Peer.",
                    "type": "String"
                },
                {
                    "name": "RECEIVING_STOPPED",
                    "description": "<small>Value <code>\"receivingStop\"</code></small>\n  The value of the state when data streaming session has stopped from Peer to User.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>\"error\"</code></small>\n  The value of the state when data streaming session has errors.\n  <small>At this stage, the data streaming state is considered <code>SENDING_STOPPED</code> or\n  <code>RECEIVING_STOPPED</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "START_ERROR",
                    "description": "<small>Value <code>\"startError\"</code></small>\n  The value of the state when data streaming session failed to start from User to Peer.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 146,
            "description": "Stores the list of data transfer protocols.",
            "itemtype": "attribute",
            "name": "_DC_PROTOCOL_TYPE",
            "params": [
                {
                    "name": "WRQ",
                    "description": "The protocol to initiate data transfer.",
                    "type": "String"
                },
                {
                    "name": "ACK",
                    "description": "The protocol to request for data transfer chunk.\n  Give <code>-1</code> to reject the request at the beginning and <code>0</code> to accept\n  the data transfer request.",
                    "type": "String"
                },
                {
                    "name": "CANCEL",
                    "description": "The protocol to terminate data transfer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The protocol when data transfer has errors and has to be terminated.",
                    "type": "String"
                },
                {
                    "name": "MESSAGE",
                    "description": "The protocol that is used to send P2P messages.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 170,
            "description": "Function that starts an uploading data transfer from User to Peers.",
            "itemtype": "method",
            "name": "sendBlobData",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob object.",
                    "type": "Blob"
                },
                {
                    "name": "timeout",
                    "description": "The timeout to wait for response from Peer.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "60"
                },
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to start data transfer with.\n- When provided as an Array, it will start uploading data transfers with all connections\n  with all the Peer IDs provided.\n- When not provided, it will start uploading data transfers with all the currently connected Peers in the Room.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "sendChunksAsBinary",
                    "description": "<blockquote class=\"info\">\n  Note that this is currently not supported for MCU enabled Peer connections or Peer connections connecting from\n  Android, iOS and Linux SDKs. This would fallback to <code>transferInfo.chunkType</code> to\n  <code>BINARY_STRING</code> when MCU is connected. </blockquote> The flag if data transfer\n  binary data chunks should not be encoded as Base64 string during data transfers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggering <code>state</code> parameter payload\n  as <code>UPLOAD_COMPLETED</code> for all Peers targeted for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "transferId",
                                    "description": "The data transfer ID.\n  <small>Defined as <code>null</code> when <code>sendBlobData()</code> fails to start data transfer.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list Peer IDs targeted for the data transfer.",
                                    "type": "Array"
                                },
                                {
                                    "name": "transferErrors",
                                    "description": "The list of data transfer errors.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferErrors.#peerId",
                                    "description": "The data transfer error associated\n  with the Peer ID defined in <code>#peerId</code> property.\n  <small>If <code>#peerId</code> value is <code>\"self\"</code>, it means that it is the error when there\n  are no Peer connections to start data transfer with.</small>",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> except without the\n  <code>percentage</code> and <code>data</code> property.</small>",
                                    "type": "JSON"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list Peer IDs targeted for the data transfer.",
                                    "type": "Array"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> except without the\n  <code>percentage</code> property and <code>data</code>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if User is in Room. <ol>\n  <li>If User is not in Room: <ol><li><a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if there is any available Datachannel connections. <ol>\n  <li>If User is not in Room: <ol><li><a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if provided <code>data</code> parameter is valid. <ol>\n  <li>If it is invalid: <ol><li><a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if Peer connection and Datachannel connection are in correct states. <ol>\n  <li>If Peer connection or session does not exists: <ol><li><a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If Peer connection is not stable: <small>The stable state can be checked with <a href=\"#event_peerConnectionState\">\n  <code>peerConnectionState</code> event</a> triggering parameter payload <code>state</code> as <code>STABLE</code>\n  for Peer.</small> <ol><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If Peer connection messaging Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n  <code>MESSAGING</code> for Peer.</small> <ol><li><a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggers parameter payload <code>state</code> as <code>ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If MCU is enabled for the App Key provided in <a href=\"#method_init\"><code>init()</code>method</a> and connected: <ol>\n  <li>If MCU Peer connection is not stable: <small>The stable state can be checked with <a href=\"#event_peerConnectionState\">\n  <code>peerConnectionState</code> event</a> triggering parameter payload <code>state</code> as <code>STABLE</code>\n  and <code>peerId</code> value as <code>\"MCU\"</code> for MCU Peer.</small>\n  <ol><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If MCU Peer connection messaging Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code>, <code>peerId</code> value as <code>\"MCU\"</code>\n  and <code>channelType</code> as <code>MESSAGING</code> for MCU Peer.</small>\n  <ol><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if should open a new data Datachannel.<ol>\n  <li>If Peer supports simultaneous data transfer, open new data Datachannel: <small>If MCU is connected,\n  this opens a new data Datachannel with MCU Peer with all the Peers IDs information that supports\n  simultaneous data transfers targeted for the data transfer session instead of opening new data Datachannel\n  with all Peers targeted for the data transfer session.</small> <ol>\n  <li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggers parameter\n  payload <code>state</code> as <code>CONNECTING</code> and <code>channelType</code> as <code>DATA</code>.\n  <small>Note that there is no timeout to wait for parameter payload <code>state</code> to be\n  <code>OPEN</code>.</small></li>\n  <li>If Datachannel has been created and opened successfully: <ol>\n  <li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggers parameter payload\n  <code>state</code> as <code>OPEN</code> and <code>channelType</code> as <code>DATA</code>.</li></ol></li>\n  <li>Else: <ol><li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>CREATE_ERROR</code> and <code>channelType</code> as\n  <code>DATA</code>.</li><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li></ol></li><li>Else: <small>If MCU is connected,\n  this uses the messaging Datachannel with MCU Peer with all the Peers IDs information that supports\n  simultaneous data transfers targeted for the data transfer session instead of using the messaging Datachannels\n  with all Peers targeted for the data transfer session.</small> <ol><li>If messaging Datachannel connection has a\n  data transfer in-progress: <ol><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li><li>If there is any conflicting <a href=\"#method_streamData\"><code>streamData()</code>\n  method</a> data streaming session: <small>If <code>sendChunksAsBinary</code> is provided as <code>true</code>,\n  it cannot start if existing data streaming session is expected binary data chunks, and if provided as\n  <code>false</code>, or method invoked is <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a>,\n  or Peer is using string data chunks fallback due to its support despite provided as <code>true</code>,\n  it cannot start if existing data streaming session is expected string data chunks.</small><ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li></li></ol></ol></li></ol></li>\n  <li>Starts the data transfer to Peer. <ol>\n  <li><a href=\"#event_incomingDataRequest\"><code>incomingDataRequest</code> event</a> triggers.</li>\n  <li><em>For User only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>USER_UPLOAD_REQUEST</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>UPLOAD_REQUEST</code>.</li>\n  <li>Peer invokes <a href=\"#method_acceptDataTransfer\"><code>acceptDataTransfer()</code> method</a>. <ol>\n  <li>If parameter <code>accept</code> value is <code>true</code>: <ol>\n  <li>User starts upload data transfer to Peer. <ol>\n  <li><em>For User only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>UPLOAD_STARTED</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>DOWNLOAD_STARTED</code>.</li></ol></li>\n  <li>If Peer / User invokes <a href=\"#method_cancelDataTransfer\"><code>cancelDataTransfer()</code> method</a>: <ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>CANCEL</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If data transfer has timeout errors: <ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>Checks for Peer connection and Datachannel connection during data transfer: <ol>\n  <li>If MCU is enabled for the App Key provided in <a href=\"#method_init\"><code>init()</code>\n  method</a> and connected: <ol>\n  <li>If MCU Datachannel has closed abruptly during data transfer: <ol>\n  <small>This can be checked with <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n  triggering parameter payload <code>state</code> as <code>CLOSED</code>, <code>peerId</code> value as\n  <code>\"MCU\"</code> and <code>channelType</code> as <code>DATA</code> for targeted Peers that supports simultaneous\n  data transfer or <code>MESSAGING</code> for targeted Peers that do not support it.</small> <ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>If MCU Peer connection has changed from not being stable: <ol>\n  <small>This can be checked with <a href=\"#event_peerConnectionState\"><code>peerConnection</code> event</a>\n  triggering parameter payload <code>state</code> as not <code>STABLE</code>, <code>peerId</code> value as\n  <code>\"MCU\"</code>.</small> <ol><li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>If Peer connection has changed from not being stable: <ol>\n  <small>This can be checked with <a href=\"#event_peerConnectionState\"><code>peerConnection</code> event</a>\n  triggering parameter payload <code>state</code> as not <code>STABLE</code>.</small> <ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li></ol></li>\n  <li>Else: <ol><li>If Datachannel has closed abruptly during data transfer:\n  <small>This can be checked with <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n  triggering parameter payload <code>state</code> as <code>CLOSED</code> and <code>channelType</code>\n  as <code>DATA</code> for Peer that supports simultaneous data transfer or <code>MESSAGING</code>\n  for Peer that do not support it.</small> <ol>\n  <li><a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> triggers parameter\n  <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li></ol></li>\n  <li>If data transfer is still progressing: <ol>\n  <li><em>For User only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>UPLOADING</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>DOWNLOADING</code>.</li></ol></li>\n  <li>If data transfer has completed <ol>\n  <li><a href=\"#event_incomingData\"><code>incomingData</code> event</a> triggers.</li>\n  <li><em>For User only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>UPLOAD_COMPLETED</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>DOWNLOAD_COMPLETED</code>.</li></ol></li></ol></li>\n  <li>If parameter <code>accept</code> value is <code>false</code>: <ol>\n  <li><em>For User only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>REJECTED</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>USER_REJECTED</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li></ol>",
            "example": [
                "\n&lt;body&gt;\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(0)\"&gt; 1s timeout (Default)\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(120)\"&gt; 2s timeout\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(300)\"&gt; 5s timeout\n &lt;hr&gt;\n &lt;input type=\"file\" onchange=\"uploadFile(this.files[0], this.getAttribute('data'))\" data=\"peerId\"&gt;\n &lt;input type=\"file\" onchange=\"uploadFileGroup(this.files[0], this.getAttribute('data').split(',')))\" data=\"peerIdA,peerIdB\"&gt;\n &lt;input type=\"file\" onchange=\"uploadFileAll(this.files[0])\" data=\"\"&gt;\n &lt;script&gt;\n   var transferTimeout = 0;\n\n   function setTransferTimeout (timeout) {\n     transferTimeout = timeout;\n   }\n\n   // Example 1: Upload data to a Peer\n   function uploadFile (file, peerId) {\n     var cb = function (error, success) {\n       if (error) return;\n       console.info(\"File has been transferred to '\" + peerId + \"' successfully\");\n     };\n     if (transferTimeout > 0) {\n       skylinkDemo.sendBlobData(file, peerId, transferTimeout, cb);\n     } else {\n       skylinkDemo.sendBlobData(file, peerId, cb);\n     }\n   }\n\n   // Example 2: Upload data to a list of Peers\n   function uploadFileGroup (file, peerIds) {\n     var cb = function (error, success) {\n       var listOfPeers = error ? error.listOfPeers : success.listOfPeers;\n       var listOfPeersErrors = error ? error.transferErrors : {};\n       for (var i = 0; i < listOfPeers.length; i++) {\n         if (listOfPeersErrors[listOfPeers[i]]) {\n           console.error(\"Failed file transfer to '\" + listOfPeers[i] + \"'\");\n         } else {\n           console.info(\"File has been transferred to '\" + listOfPeers[i] + \"' successfully\");\n         }\n       }\n     };\n     if (transferTimeout > 0) {\n       skylinkDemo.sendBlobData(file, peerIds, transferTimeout, cb);\n     } else {\n       skylinkDemo.sendBlobData(file, peerIds, cb);\n     }\n   }\n\n   // Example 2: Upload data to a list of Peers\n   function uploadFileAll (file) {\n     var cb = function (error, success) {\n       var listOfPeers = error ? error.listOfPeers : success.listOfPeers;\n       var listOfPeersErrors = error ? error.transferErrors : {};\n       for (var i = 0; i < listOfPeers.length; i++) {\n         if (listOfPeersErrors[listOfPeers[i]]) {\n           console.error(\"Failed file transfer to '\" + listOfPeers[i] + \"'\");\n         } else {\n           console.info(\"File has been transferred to '\" + listOfPeers[i] + \"' successfully\");\n         }\n       }\n     };\n     if (transferTimeout > 0) {\n       skylinkDemo.sendBlobData(file, transferTimeout, cb);\n     } else {\n       skylinkDemo.sendBlobData(file, cb);\n     }\n   }\n&lt;/script&gt;\n&lt;/body&gt;"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 422,
            "description": "Function that starts an uploading string data transfer from User to Peers.",
            "itemtype": "method",
            "name": "sendURLData",
            "params": [
                {
                    "name": "data",
                    "description": "The data string to transfer to Peer.",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The timeout to wait for response from Peer.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "60"
                },
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to start data transfer with.\n- When provided as an Array, it will start uploading data transfers with all connections\n  with all the Peer IDs provided.\n- When not provided, it will start uploading data transfers with all the currently connected Peers in the Room.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_dataTransferState\">\n  <code>dataTransferState</code> event</a> triggering <code>state</code> parameter payload\n  as <code>UPLOAD_COMPLETED</code> for all Peers targeted for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "transferId",
                                    "description": "The data transfer ID.\n  <small>Defined as <code>null</code> when <code>sendURLData()</code> fails to start data transfer.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list Peer IDs targeted for the data transfer.",
                                    "type": "Array"
                                },
                                {
                                    "name": "transferErrors",
                                    "description": "The list of data transfer errors.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferErrors.#peerId",
                                    "description": "The data transfer error associated\n  with the Peer ID defined in <code>#peerId</code> property.\n  <small>If <code>#peerId</code> value is <code>\"self\"</code>, it means that it is the error when there\n  are no Peer connections to start data transfer with.</small>",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> except without the\n  <code>percentage</code> property and <code>data</code>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list Peer IDs targeted for the data transfer.",
                                    "type": "Array"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a> except without the\n  <code>percentage</code> property and <code>data</code>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "<small>Event sequence follows <a href=\"#method_sendBlobData\">\n<code>sendBlobData()</code> method</a>.</small>",
            "example": [
                "\n&lt;body&gt;\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(0)\"&gt; 1s timeout (Default)\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(120)\"&gt; 2s timeout\n &lt;input type=\"radio\" name=\"timeout\" onchange=\"setTransferTimeout(300)\"&gt; 5s timeout\n &lt;hr&gt;\n &lt;input type=\"file\" onchange=\"showImage(this.files[0], this.getAttribute('data'))\" data=\"peerId\"&gt;\n &lt;input type=\"file\" onchange=\"showImageGroup(this.files[0], this.getAttribute('data').split(',')))\" data=\"peerIdA,peerIdB\"&gt;\n &lt;input type=\"file\" onchange=\"showImageAll(this.files[0])\" data=\"\"&gt;\n &lt;image id=\"target-1\" src=\"\"&gt;\n &lt;image id=\"target-2\" src=\"\"&gt;\n &lt;image id=\"target-3\" src=\"\"&gt;\n &lt;script&gt;\n   var transferTimeout = 0;\n\n   function setTransferTimeout (timeout) {\n     transferTimeout = timeout;\n   }\n\n   function retrieveImageDataURL(file, cb) {\n     var fr = new FileReader();\n     fr.onload = function () {\n       cb(fr.result);\n     };\n     fr.readAsDataURL(files[0]);\n   }\n\n   // Example 1: Send image data URL to a Peer\n   function showImage (file, peerId) {\n     var cb = function (error, success) {\n       if (error) return;\n       console.info(\"Image has been transferred to '\" + peerId + \"' successfully\");\n     };\n     retrieveImageDataURL(file, function (str) {\n       if (transferTimeout > 0) {\n         skylinkDemo.sendURLData(str, peerId, transferTimeout, cb);\n       } else {\n         skylinkDemo.sendURLData(str, peerId, cb);\n       }\n       document.getElementById(\"target-1\").src = str;\n     });\n   }\n\n   // Example 2: Send image data URL to a list of Peers\n   function showImageGroup (file, peerIds) {\n     var cb = function (error, success) {\n       var listOfPeers = error ? error.listOfPeers : success.listOfPeers;\n       var listOfPeersErrors = error ? error.transferErrors : {};\n       for (var i = 0; i < listOfPeers.length; i++) {\n         if (listOfPeersErrors[listOfPeers[i]]) {\n           console.error(\"Failed image transfer to '\" + listOfPeers[i] + \"'\");\n         } else {\n           console.info(\"Image has been transferred to '\" + listOfPeers[i] + \"' successfully\");\n         }\n       }\n     };\n     retrieveImageDataURL(file, function (str) {\n       if (transferTimeout > 0) {\n         skylinkDemo.sendURLData(str, peerIds, transferTimeout, cb);\n       } else {\n         skylinkDemo.sendURLData(str, peerIds, cb);\n       }\n       document.getElementById(\"target-2\").src = str;\n     });\n   }\n\n   // Example 2: Send image data URL to a list of Peers\n   function uploadFileAll (file) {\n     var cb = function (error, success) {\n       var listOfPeers = error ? error.listOfPeers : success.listOfPeers;\n       var listOfPeersErrors = error ? error.transferErrors : {};\n       for (var i = 0; i < listOfPeers.length; i++) {\n         if (listOfPeersErrors[listOfPeers[i]]) {\n           console.error(\"Failed image transfer to '\" + listOfPeers[i] + \"'\");\n         } else {\n           console.info(\"Image has been transferred to '\" + listOfPeers[i] + \"' successfully\");\n         }\n       }\n     };\n     retrieveImageDataURL(file, function (str) {\n       if (transferTimeout > 0) {\n         skylinkDemo.sendURLData(str, transferTimeout, cb);\n       } else {\n         skylinkDemo.sendURLData(str, cb);\n       }\n       document.getElementById(\"target-3\").src = str;\n     });\n   }\n&lt;/script&gt;\n&lt;/body&gt;"
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 557,
            "description": "Function that accepts or rejects an upload data transfer request from Peer to User.",
            "itemtype": "method",
            "name": "acceptDataTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID.",
                    "type": "String"
                },
                {
                    "name": "accept",
                    "description": "The flag if User accepts the upload data transfer request from Peer.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n  // Example 1: Accept Peer upload data transfer request\n  skylinkDemo.on(\"incomingDataRequest\", function (transferId, peerId, transferInfo, isSelf) {\n     if (!isSelf) {\n       skylinkDemo.acceptDataTransfer(peerId, transferId, true);\n     }\n  });\n\n  // Example 2: Reject Peer upload data transfer request\n  skylinkDemo.on(\"incomingDataRequest\", function (transferId, peerId, transferInfo, isSelf) {\n     if (!isSelf) {\n       skylinkDemo.acceptDataTransfer(peerId, transferId, false);\n     }\n  });"
            ],
            "trigger": "<small>Event sequence follows <a href=\"#method_sendBlobData\">\n<code>sendBlobData()</code> method</a> after <code>acceptDataTransfer()</code> method is invoked.</small>",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 693,
            "description": "<blockquote class=\"info\">\n  For MCU enabled Peer connections, the cancel data transfer functionality may differ, as it\n  will result in all Peers related to the data transfer ID to be terminated.\n</blockquote>\nFunction that terminates a currently uploading / downloading data transfer from / to Peer.",
            "itemtype": "method",
            "name": "cancelDataTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID.",
                    "type": "String"
                }
            ],
            "example": [
                "\n  // Example 1: Cancel Peer data transfer\n  var transferSessions = {};\n\n  skylinkDemo.on(\"dataTransferState\", function (state, transferId, peerId) {\n    if ([skylinkDemo.DATA_TRANSFER_STATE.DOWNLOAD_STARTED,\n      skylinkDemo.DATA_TRANSFER_STATE.UPLOAD_STARTED].indexOf(state) > -1) {\n      if (!Array.isArray(transferSessions[transferId])) {\n        transferSessions[transferId] = [];\n      }\n      transferSessions[transferId].push(peerId);\n    } else {\n      transferSessions[transferId].splice(transferSessions[transferId].indexOf(peerId), 1);\n    }\n  });\n\n  function cancelTransfer (peerId, transferId) {\n    skylinkDemo.cancelDataTransfer(peerId, transferId);\n  }"
            ],
            "trigger": "<small>Event sequence follows <a href=\"#method_sendBlobData\">\n<code>sendBlobData()</code> method</a> after <code>cancelDataTransfer()</code> method is invoked.</small>",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 748,
            "description": "Emit data state event function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 821,
            "description": "Function that sends a message to Peers via the Datachannel connection.\n<small>Consider using <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> if you are\nsending large strings to Peers.</small>",
            "itemtype": "method",
            "name": "sendP2PMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to send message to.\n- When provided as an Array, it will send the message to only Peers which IDs are in the list.\n- When not provided, it will broadcast the message to all connected Peers with Datachannel connection in the Room.",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n <li>Sends P2P message to all targeted Peers. <ol>\n <li>If Peer connection Datachannel has not been opened: <small>This can be checked with\n <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n triggering parameter payload <code>state</code> as <code>OPEN</code> and\n <code>channelType</code> as <code>MESSAGING</code> for Peer.</small> <ol>\n <li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggers\n parameter payload <code>state</code> as <code>SEND_MESSAGE_ERROR</code>.</li>\n <li><b>ABORT</b> step and return error.</li></ol></li>\n <li><a href=\"#event_incomingMessage\"><code>incomingMessage</code> event</a> triggers\n parameter payload <code>message.isDataChannel</code> value as <code>true</code> and\n <code>isSelf</code> value as <code>true</code>.</li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Broadcasting to all Peers\n  skylinkDemo.on(\"dataChannelState\", function (state, peerId, error, channelName, channelType) {\n     if (state === skylinkDemo.DATA_CHANNEL_STATE.OPEN &&\n       channelType === skylinkDemo.DATA_CHANNEL_TYPE.MESSAGING) {\n       skylinkDemo.sendP2PMessage(\"Hi all!\");\n     }\n  });\n\n  // Example 2: Sending to specific Peers\n  var peersInExclusiveParty = [];\n\n  skylinkDemo.on(\"peerJoined\", function (peerId, peerInfo, isSelf) {\n    if (isSelf) return;\n    if (peerInfo.userData.exclusive) {\n      peersInExclusiveParty[peerId] = false;\n    }\n  });\n\n  skylinkDemo.on(\"dataChannelState\", function (state, peerId, error, channelName, channelType) {\n     if (state === skylinkDemo.DATA_CHANNEL_STATE.OPEN &&\n       channelType === skylinkDemo.DATA_CHANNEL_TYPE.MESSAGING) {\n       peersInExclusiveParty[peerId] = true;\n     }\n  });\n\n  function updateExclusivePartyStatus (message) {\n    var readyToSend = [];\n    for (var p in peersInExclusiveParty) {\n      if (peersInExclusiveParty.hasOwnProperty(p)) {\n        readyToSend.push(p);\n      }\n    }\n    skylinkDemo.sendP2PMessage(message, readyToSend);\n  }"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 956,
            "description": "<blockquote class=\"info\">\n  Note that this feature is not supported by MCU enabled Peer connections.<br>\n  To start streaming data, see the <a href=\"#method_streamData\"><code>streamData()</code>\n  method</a>. To stop data streaming session, see the <a href=\"#method_stopStreamingData\"><code>\n  stopStreamingData()</code> method</a>.\n</blockquote>\nFunction that starts a data chunks streaming session from User to Peers.",
            "itemtype": "method",
            "name": "startStreamingData",
            "params": [
                {
                    "name": "isStringStream",
                    "description": "The flag if data streaming session sending data chunks\n  should be expected as string data chunks sent.\n  <small>By default, data chunks are expected to be sent in Blob or ArrayBuffer, and ArrayBuffer\n  data chunks will be converted to Blob.</small>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to send message to.\n- When provided as an Array, it will start streaming session to only Peers which IDs are in the list.\n- When not provided, it will start the streaming session to all connected Peers with Datachannel connection in the Room.",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if User is in Room. <ol>\n  <li>If User is not in Room: <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if there is any available Datachannel connections. <ol>\n  <li>If User is not in Room: <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if Peer connection and Datachannel connection are in correct states. <ol>\n  <li>If Peer connection or session does not exists: <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code>\n  as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If Peer connection messaging Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n  <code>MESSAGING</code> for Peer.</small> <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code> as <code>START_ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li>\n  <li>If MCU is enabled for the App Key provided in <a href=\"#method_init\"><code>init()</code>method</a> and connected: <ol>\n  <li>If MCU Peer connection messaging Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code>, <code>peerId</code> value as <code>\"MCU\"</code>\n  and <code>channelType</code> as <code>MESSAGING</code> for MCU Peer.</small>\n  <ol><li><a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>START_ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Checks if should open a new data Datachannel.<ol>\n  <li>If Peer supports simultaneous data streaming, open new data Datachannel: <small>If MCU is connected,\n  this opens a new data Datachannel with MCU Peer with all the Peers IDs information that supports\n  simultaneous data transfers targeted for the data streaming session instead of opening new data Datachannel\n  with all Peers targeted for the data streaming session.</small> <ol>\n  <li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggers parameter\n  payload <code>state</code> as <code>CONNECTING</code> and <code>channelType</code> as <code>DATA</code>.\n  <small>Note that there is no timeout to wait for parameter payload <code>state</code> to be\n  <code>OPEN</code>.</small></li>\n  <li>If Datachannel has been created and opened successfully: <ol>\n  <li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggers parameter payload\n  <code>state</code> as <code>OPEN</code> and <code>channelType</code> as <code>DATA</code>.</li></ol></li>\n  <li>Else: <ol><li><a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>CREATE_ERROR</code> and <code>channelType</code> as\n  <code>DATA</code>.</li><li><a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li></ol></li><li>Else: <small>If MCU is connected,\n  this uses the messaging Datachannel with MCU Peer with all the Peers IDs information that supports\n  simultaneous data transfers targeted for the data streaming session instead of using the messaging Datachannels\n  with all Peers targeted for the data streaming session.</small> <ol><li>If messaging Datachannel connection has a\n  data streaming in-progress: <ol><li><a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li><li>If there is any conflicting <a href=\"#method_streamData\"><code>streamData()</code>\n  method</a> data streaming session: <small>If <code>isStringStream</code> is provided as <code>true</code> and\n  <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> or <a href=\"#method_sendURLData\">\n  <code>sendURLData()</code> method</a> has an existing binary string transfer, it cannot start string data\n  streaming session. Else if <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>\n  has an existing binary data transfer, it cannot start binary data streaming session.</small><ol>\n  <li><a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>START_ERROR</code>.</li><li><b>ABORT</b> step and\n  return error.</li></ol></li></li></ol></ol></li></ol></li>\n  <li>Starts the data streaming session with Peer. <ol>\n  <li><a href=\"#event_incomingDataStreamStarted\"><code>incomingDataStreamStarted</code> event</a> triggers.</li>\n  <li><em>For User only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>SENDING_STARTED</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RECEIVING_STARTED</code>.</li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Start streaming to all Peers\n  skylinkDemo.on(\"dataChannelState\", function (state, peerId, error, channelName, channelType) {\n     if (state === skylinkDemo.DATA_CHANNEL_STATE.OPEN &&\n       channelType === skylinkDemo.DATA_CHANNEL_TYPE.MESSAGING) {\n       skylinkDemo.startStreamingData(false);\n     }\n  });\n\n  // Example 2: Start streaming to specific Peers\n  var peersInExclusiveParty = [];\n\n  skylinkDemo.on(\"peerJoined\", function (peerId, peerInfo, isSelf) {\n    if (isSelf) return;\n    if (peerInfo.userData.exclusive) {\n      peersInExclusiveParty[peerId] = false;\n    }\n  });\n\n  skylinkDemo.on(\"dataChannelState\", function (state, peerId, error, channelName, channelType) {\n     if (state === skylinkDemo.DATA_CHANNEL_STATE.OPEN &&\n       channelType === skylinkDemo.DATA_CHANNEL_TYPE.MESSAGING) {\n       peersInExclusiveParty[peerId] = true;\n     }\n  });\n\n  function updateExclusivePartyStatus (message) {\n    var readyToSend = [];\n    for (var p in peersInExclusiveParty) {\n      if (peersInExclusiveParty.hasOwnProperty(p)) {\n        readyToSend.push(p);\n      }\n    }\n    skylinkDemo.startStreamingData(message, readyToSend);\n  }"
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1354,
            "description": "<blockquote class=\"info\">\n  Note that this feature is not supported by MCU enabled Peer connections.<br>\n  To start data streaming session, see the <a href=\"#method_startStreamingData\"><code>startStreamingData()</code>\n  method</a>. To stop data streaming session, see the <a href=\"#method_stopStreamingData\"><code>stopStreamingData()</code> method</a>\n</blockquote>\nFunction that sends a data chunk from User to Peers for an existing active data streaming session.",
            "itemtype": "method",
            "name": "streamData",
            "params": [
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.",
                    "type": "String"
                },
                {
                    "name": "chunk",
                    "description": "The data chunk.\n  <small>By default when it is not string data streaming, data chunks when is are expected to be\n  sent in Blob or ArrayBuffer, and ArrayBuffer data chunks will be converted to Blob.</small>\n  <small>For binary data chunks, the limit is <code>65456</code>.</small>\n  <small>For string data chunks, the limit is <code>1212</code>.</small>",
                    "type": "String|Blob|ArrayBuffer"
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if Peer connection and Datachannel connection are in correct states. <ol>\n  <li>If Peer connection (or MCU Peer connection if enabled)\n  data streaming Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n  <code>MESSAGING</code> for Peer.</small> <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code> as <code>ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Starts sending the data chunk to Peer. <ol>\n  <li><a href=\"#event_incomingDataStream\"><code>incomingDataStream</code> event</a> triggers.</li>\n  <li><em>For User only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>SENT</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RECEIVED</code>.</li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Start streaming\n  var currentStreamId = null\n  if (file.size > chunkLimit) {\n    while ((file.size - 1) > endCount) {\n      endCount = startCount + chunkLimit;\n      chunks.push(file.slice(startCount, endCount));\n      startCount += chunkLimit;\n    }\n    if ((file.size - (startCount + 1)) > 0) {\n      chunks.push(file.slice(startCount, file.size - 1));\n    }\n  } else {\n    chunks.push(file);\n  }\n  var processNextFn = function () {\n    if (chunks.length > 0) {\n      skylinkDemo.once(\"incomingDataStream\", function () {\n        setTimeout(processNextFn, 1);\n      }, function (data, evtStreamId, evtPeerId, streamInfo, isSelf) {\n        return isSelf && evtStreamId === currentStreamId;\n      });\n      var chunk = chunks[0];\n      chunks.splice(0, 1);\n      skylinkDemo.streamData(currentStreamId, chunk);\n    } else {\n      skylinkDemo.stopStreamingData(currentStreamId);\n    }\n  };\n  skylinkDemo.once(\"incomingDataStreamStarted\", processNextFn, function (streamId, peerId, streamInfo, isSelf) {\n    currentStreamId = streamId;\n    return isSelf;\n  });\n  skylinkDemo.once(\"incomingDataStreamStopped\", function () {\n    // Render file\n  }, function (streamId, peerId, streamInfo, isSelf) {\n    return currentStreamId === streamId && isSelf;\n  });\n  skylinkDemo.startStreamingData(false);"
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1553,
            "description": "<blockquote class=\"info\">\n  To start data streaming session, see the <a href=\"#method_startStreamingData\"><code>startStreamingData()</code>\n  method</a> To start streaming data, see the <a href=\"#method_streamData\"><code>streamData()</code>\n  method</a>.\n</blockquote>\nFunction that stops a data chunks streaming session from User to Peers.",
            "itemtype": "method",
            "name": "stopStreamingData",
            "params": [
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.",
                    "type": "String"
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if Peer connection and Datachannel connection are in correct states. <ol>\n  <li>If Peer connection (or MCU Peer connection if enabled)\n  data streaming Datachannel has not been opened: <small>This can be checked with\n  <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a> triggering parameter\n  payload <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n  <code>MESSAGING</code> for Peer.</small> <ol><li><a href=\"#event_dataStreamState\">\n  <code>dataStreamState</code> event</a> triggers parameter payload <code>state</code> as <code>ERROR</code>.</li>\n  <li><b>ABORT</b> step and return error.</li></ol></li></ol></li>\n  <li>Stops the data streaming session to Peer. <ol>\n  <li><a href=\"#event_incomingDataStreamStopped\"><code>incomingDataStreamStopped</code> event</a> triggers.</li>\n  <li><em>For User only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>SENDING_STOPPED</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RECEIVING_STOPPED</code>.</li></ol></li></ol>",
            "example": [
                "\n  skylinkDemo.stopStreamData(streamId);"
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1692,
            "description": "Function that starts the data transfer to Peers.",
            "itemtype": "method",
            "name": "_startDataTransfer",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1889,
            "description": "Complete Peer function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1953,
            "description": "Function that starts or listens the data transfer status to Peer.\nThis reacts differently during MCU environment.",
            "itemtype": "method",
            "name": "_startDataTransferToPeer",
            "return": {
                "description": "Returns a Boolean only during MCU environment which flag indicates if Peer requires interop\n  (Use messaging Datachannel connection instead).",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1968,
            "description": "Emit event for Peers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1978,
            "description": "Return error and trigger them if failed before or during data transfers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1994,
            "description": "Send WRQ protocol to start data transfers.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2232,
            "description": "Function that returns the data transfer session.",
            "itemtype": "method",
            "name": "_getTransferInfo",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2314,
            "description": "Function that returns the compiled data transfer data.",
            "itemtype": "method",
            "name": "_getTransferData",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2341,
            "description": "Function that handles the data transfers sessions timeouts.",
            "itemtype": "method",
            "name": "_handleDataTransferTimeoutForPeer",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2385,
            "description": "Emit event for Peers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2432,
            "description": "Function that handles the data received from Datachannel and\nroutes to the relevant data transfer protocol handler.",
            "itemtype": "method",
            "name": "_processDataChannelData",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2608,
            "description": "Function that handles the \"WRQ\" data transfer protocol.",
            "itemtype": "method",
            "name": "_WRQProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2751,
            "description": "Function that handles the \"ACK\" data transfer protocol.",
            "itemtype": "method",
            "name": "_ACKProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2770,
            "description": "Emit event for Peers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2853,
            "description": "Function that handles the \"MESSAGE\" data transfer protocol.",
            "itemtype": "method",
            "name": "_MESSAGEProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2874,
            "description": "Function that handles the \"ERROR\" data transfer protocol.",
            "itemtype": "method",
            "name": "_ERRORProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2893,
            "description": "Emit event for Peers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2925,
            "description": "Function that handles the \"CANCEL\" data transfer protocol.",
            "itemtype": "method",
            "name": "_CANCELProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2942,
            "description": "Emit event for Peers function.",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2974,
            "description": "Function that handles the data transfer chunk received.",
            "itemtype": "method",
            "name": "_DATAProtocolHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of Peer connection ICE gathering states.",
            "itemtype": "attribute",
            "name": "CANDIDATE_GENERATION_STATE",
            "params": [
                {
                    "name": "GATHERING",
                    "description": "<small>Value <code>\"gathering\"</code></small>\n  The value of the state when Peer connection is gathering ICE candidates.\n  <small>These ICE candidates are sent to Peer for its connection to check for a suitable matching\n  pair of ICE candidates to establish an ICE connection for stream audio, video and data.\n  See <a href=\"#event_iceConnectionState\"><code>iceConnectionState</code> event</a> for ICE connection status.</small>\n  <small>This state cannot happen until Peer connection remote <code>\"offer\"</code> / <code>\"answer\"</code>\n  session description is set. See <a href=\"#event_peerConnectionState\">\n  <code>peerConnectionState</code> event</a> for session description exchanging status.</small>",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "<small>Value <code>\"completed\"</code></small>\n  The value of the state when Peer connection gathering of ICE candidates has completed.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 29,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of Peer connection remote ICE candidate processing states for trickle ICE connections.",
            "itemtype": "attribute",
            "name": "CANDIDATE_PROCESSING_STATE",
            "params": [
                {
                    "name": "RECEIVED",
                    "description": "<small>Value <code>\"received\"</code></small>\n  The value of the state when the remote ICE candidate was received.",
                    "type": "String"
                },
                {
                    "name": "DROPPED",
                    "description": "<small>Value <code>\"received\"</code></small>\n  The value of the state when the remote ICE candidate is dropped.",
                    "type": "String"
                },
                {
                    "name": "BUFFERED",
                    "description": "<small>Value <code>\"buffered\"</code></small>\n  The value of the state when the remote ICE candidate is buffered.",
                    "type": "String"
                },
                {
                    "name": "PROCESSING",
                    "description": "<small>Value <code>\"processing\"</code></small>\n  The value of the state when the remote ICE candidate is being processed.",
                    "type": "String"
                },
                {
                    "name": "PROCESS_SUCCESS",
                    "description": "<small>Value <code>\"processSuccess\"</code></small>\n  The value of the state when the remote ICE candidate has been processed successfully.\n  <small>The ICE candidate that is processed will be used to check against the list of\n  locally generated ICE candidate to start matching for the suitable pair for the best ICE connection.</small>",
                    "type": "String"
                },
                {
                    "name": "PROCESS_ERROR",
                    "description": "<small>Value <code>\"processError\"</code></small>\n  The value of the state when the remote ICE candidate has failed to be processed.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 64,
            "description": "Function that handles the Peer connection gathered ICE candidate to be sent.",
            "itemtype": "method",
            "name": "_onIceCandidate",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 191,
            "description": "Function that buffers the Peer connection ICE candidate when received\n  before remote session description is received and set.",
            "itemtype": "method",
            "name": "_addIceCandidateToQueue",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 215,
            "description": "Function that adds all the Peer connection buffered ICE candidates received.\nThis should be called only after the remote session description is received and set.",
            "itemtype": "method",
            "name": "_addIceCandidateFromQueue",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 248,
            "description": "Function that adds the ICE candidate to Peer connection.",
            "itemtype": "method",
            "name": "_addIceCandidate",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of Peer connection ICE connection states.",
            "itemtype": "attribute",
            "name": "ICE_CONNECTION_STATE",
            "params": [
                {
                    "name": "CHECKING",
                    "description": "<small>Value <code>\"checking\"</code></small>\n  The value of the state when Peer connection is checking for a suitable matching pair of\n  ICE candidates to establish ICE connection.\n  <small>Exchanging of ICE candidates happens during <a href=\"#event_candidateGenerationState\">\n  <code>candidateGenerationState</code> event</a>.</small>",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "<small>Value <code>\"connected\"</code></small>\n  The value of the state when Peer connection has found a suitable matching pair of\n  ICE candidates to establish ICE connection but is still checking for a better\n  suitable matching pair of ICE candidates for the best ICE connectivity.\n  <small>At this state, ICE connection is already established and audio, video and\n  data streaming has already started.</small>",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "<small>Value <code>\"completed\"</code></small>\n  The value of the state when Peer connection has found the best suitable matching pair\n  of ICE candidates to establish ICE connection and checking has stopped.\n  <small>At this state, ICE connection is already established and audio, video and\n  data streaming has already started. This may happpen after <code>CONNECTED</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "<small>Value <code>\"failed\"</code></small>\n  The value of the state when Peer connection ICE connection has failed.",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "<small>Value <code>\"disconnected\"</code></small>\n  The value of the state when Peer connection ICE connection is disconnected.\n  <small>At this state, the Peer connection may attempt to revive the ICE connection.\n  This may happen due to flaky network conditions.</small>",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "<small>Value <code>\"closed\"</code></small>\n  The value of the state when Peer connection ICE connection has closed.\n  <small>This happens when Peer connection is closed and no streaming can occur at this stage.</small>",
                    "type": "String"
                },
                {
                    "name": "TRICKLE_FAILED",
                    "description": "<small>Value <code>\"trickeFailed\"</code></small>\n  The value of the state when Peer connection ICE connection has failed during trickle ICE.\n  <small>Trickle ICE is enabled in <a href=\"#method_init\"><code>init()</code> method</a>\n  <code>enableIceTrickle</code> option.</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 53,
            "description": "<blockquote class=\"info\">\n  Note that configuring the protocol may not necessarily result in the desired network transports protocol\n  used in the actual TURN network traffic as it depends which protocol the browser selects and connects with.\n  This simply configures the TURN ICE server urls <code?transport=(protocol)</code> query option when constructing\n  the Peer connection. When all protocols are selected, the ICE servers urls are duplicated with all protocols.\n</blockquote>\nThe list of TURN network transport protocols options when constructing Peer connections\nconfigured in the <a href=\"#method_init\"><code>init()</code> method</a>.\n<small>Example <code>.urls</code> inital input: [<code>\"turn:server.com?transport=tcp\"</code>,\n<code>\"turn:server1.com:3478\"</code>, <code>\"turn:server.com?transport=udp\"</code>]</small>",
            "itemtype": "attribute",
            "name": "TURN_TRANSPORT",
            "params": [
                {
                    "name": "TCP",
                    "description": "<small>Value  <code>\"tcp\"</code></small>\n  The value of the option to configure using only TCP network transport protocol.\n  <small>Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n  <code>\"turn:server1.com:3478?transport=tcp\"</code>]</small>",
                    "type": "String"
                },
                {
                    "name": "UDP",
                    "description": "<small>Value  <code>\"udp\"</code></small>\n  The value of the option to configure using only UDP network transport protocol.\n  <small>Example <code>.urls</code> output: [<code>\"turn:server.com?transport=udp\"</code>,\n  <code>\"turn:server1.com:3478?transport=udp\"</code>]</small>",
                    "type": "String"
                },
                {
                    "name": "ANY",
                    "description": "<small>Value  <code>\"any\"</code></small>\n  The value of the option to configure using any network transport protocols configured from the Signaling server.\n  <small>Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n  <code>\"turn:server1.com:3478\"</code>, <code>\"turn:server.com?transport=udp\"</code>]</small>",
                    "type": "String"
                },
                {
                    "name": "NONE",
                    "description": "<small>Value <code>\"none\"</code></small>\n  The value of the option to not configure using any network transport protocols.\n  <small>Example <code>.urls</code> output: [<code>\"turn:server.com\"</code>, <code>\"turn:server1.com:3478\"</code>]</small>\n  <small>Configuring this does not mean that no protocols will be used, but\n  rather removing <code>?transport=(protocol)</code> query option in\n  the TURN ICE server <code>.urls</code> when constructing the Peer connection.</small>",
                    "type": "String"
                },
                {
                    "name": "ALL",
                    "description": "<small>Value  <code>\"all\"</code></small>\n  The value of the option to configure using both TCP and UDP network transport protocols.\n  <small>Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n  <code>\"turn:server.com?transport=udp\"</code>, <code>\"turn:server1.com:3478?transport=tcp\"</code>,\n  <code>\"turn:server1.com:3478?transport=udp\"</code>]</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 101,
            "description": "Function that filters and configures the ICE servers received from Signaling\n  based on the <code>init()</code> configuration and returns the updated\n  list of ICE servers to be used when constructing Peer connection.",
            "itemtype": "method",
            "name": "_setIceServers",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of Peer connection session description exchanging states.",
            "itemtype": "attribute",
            "name": "PEER_CONNECTION_STATE",
            "params": [
                {
                    "name": "STABLE",
                    "description": "<small>Value <code>\"stable\"</code></small>\n  The value of the state when there is no session description being exchanged between Peer connection.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_OFFER",
                    "description": "<small>Value <code>\"have-local-offer\"</code></small>\n  The value of the state when local <code>\"offer\"</code> session description is set.\n  <small>This should transition to <code>STABLE</code> state after remote <code>\"answer\"</code>\n  session description is set.</small>\n  <small>See <a href=\"#event_handshakeProgress\"><code>handshakeProgress</code> event</a> for a more\n  detailed exchanging of session description states.</small>",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_OFFER",
                    "description": "<small>Value <code>\"have-remote-offer\"</code></small>\n  The value of the state when remote <code>\"offer\"</code> session description is set.\n  <small>This should transition to <code>STABLE</code> state after local <code>\"answer\"</code>\n  session description is set.</small>\n  <small>See <a href=\"#event_handshakeProgress\"><code>handshakeProgress</code> event</a> for a more\n  detailed exchanging of session description states.</small>",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "<small>Value <code>\"closed\"</code></small>\n  The value of the state when Peer connection is closed and no session description can be exchanged and set.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 36,
            "description": "The list of <a href=\"#method_getConnectionStatus\"><code>getConnectionStatus()</code>\nmethod</a> retrieval states.",
            "itemtype": "attribute",
            "name": "GET_CONNECTION_STATUS_STATE",
            "params": [
                {
                    "name": "RETRIEVING",
                    "description": "<small>Value <code>0</code></small>\n  The value of the state when <code>getConnectionStatus()</code> is retrieving the Peer connection stats.",
                    "type": "Number"
                },
                {
                    "name": "RETRIEVE_SUCCESS",
                    "description": "<small>Value <code>1</code></small>\n  The value of the state when <code>getConnectionStatus()</code> has retrieved the Peer connection stats successfully.",
                    "type": "Number"
                },
                {
                    "name": "RETRIEVE_ERROR",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the state when <code>getConnectionStatus()</code> has failed retrieving the Peer connection stats.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 57,
            "description": "<blockquote class=\"info\">\n As there are more features getting implemented, there will be eventually more different types of\n server Peers.\n</blockquote>\nThe list of available types of server Peer connections.",
            "itemtype": "attribute",
            "name": "SERVER_PEER_TYPE",
            "params": [
                {
                    "name": "MCU",
                    "description": "<small>Value <code>\"mcu\"</code></small>\n  The value of the server Peer type that is used for MCU connection.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 76,
            "description": "<blockquote class=\"info\">\n Learn more about how ICE works in this\n <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of available Peer connection bundle policies.",
            "itemtype": "attribute",
            "name": "BUNDLE_POLICY",
            "params": [
                {
                    "name": "MAX_COMPAT",
                    "description": "<small>Value <code>\"max-compat\"</code></small>\n  The value of the bundle policy to generate ICE candidates for each media type\n  so each media type flows through different transports.",
                    "type": "String"
                },
                {
                    "name": "MAX_BUNDLE",
                    "description": "<small>Value <code>\"max-bundle\"</code></small>\n  The value of the bundle policy to generate ICE candidates for one media type\n  so all media type flows through a single transport.",
                    "type": "String"
                },
                {
                    "name": "BALANCED",
                    "description": "<small>Value <code>\"balanced\"</code></small>\n  The value of the bundle policy to use <code>MAX_BUNDLE</code> if Peer supports it,\n  else fallback to <code>MAX_COMPAT</code>.",
                    "type": "String"
                },
                {
                    "name": "NONE",
                    "description": "<small>Value <code>\"none\"</code></small>\n  The value of the bundle policy to not use any media bundle.\n  <small>This removes the <code>a=group:BUNDLE</code> line from session descriptions.</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 107,
            "description": "<blockquote class=\"info\">\n Learn more about how ICE works in this\n <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of available Peer connection RTCP mux policies.",
            "itemtype": "attribute",
            "name": "RTCP_MUX_POLICY",
            "params": [
                {
                    "name": "REQUIRE",
                    "description": "<small>Value <code>\"require\"</code></small>\n  The value of the RTCP mux policy to generate ICE candidates for RTP only and RTCP shares the same ICE candidates.",
                    "type": "String"
                },
                {
                    "name": "NEGOTIATE",
                    "description": "<small>Value <code>\"negotiate\"</code></small>\n  The value of the RTCP mux policy to generate ICE candidates for both RTP and RTCP each.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 128,
            "description": "<blockquote class=\"info\">\n Learn more about how ICE works in this\n <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nThe list of available Peer connection certificates cryptographic algorithm to use.",
            "itemtype": "attribute",
            "name": "PEER_CERTIFICATE",
            "params": [
                {
                    "name": "RSA",
                    "description": "<small>Value <code>\"RSA\"</code></small>\n  The value of the Peer connection certificate algorithm to use RSA-1024.",
                    "type": "String"
                },
                {
                    "name": "ECDSA",
                    "description": "<small>Value <code>\"ECDSA\"</code></small>\n  The value of the Peer connection certificate algorithm to use ECDSA.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "<small>Value <code>\"AUTO\"</code></small>\n  The value of the Peer connection to use the default certificate generated.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 152,
            "description": "<blockquote class=\"info\">\n  Note that Edge browser does not support renegotiation.\n  For MCU enabled Peer connections with <code>options.mcuUseRenegoRestart</code> set to <code>false</code>\n  in the <a href=\"#method_init\"><code>init()</code> method</a>, the restart functionality may differ, you\n  may learn more about how to workaround it\n  <a href=\"http://support.temasys.io/support/discussions/topics/12000002853\">in this article here</a>.\n  For restarts with Peers connecting from Android, iOS or C++ SDKs, restarts might not work as written in\n  <a href=\"http://support.temasys.io/support/discussions/topics/12000005188\">in this article here</a>.\n  Note that this functionality should be used when Peer connection stream freezes during a connection.\n  For a better user experience for only MCU enabled Peer connections, the functionality is throttled when invoked many\n  times in less than the milliseconds interval configured in the <a href=\"#method_init\"><code>init()</code> method</a>.\n</blockquote>\nFunction that refreshes Peer connections to update with the current streaming.",
            "itemtype": "method",
            "name": "refreshConnection",
            "params": [
                {
                    "name": "targetPeerId",
                    "description": "<blockquote class=\"info\">\n  Note that this is ignored if MCU is enabled for the App Key provided in\n  <a href=\"#method_init\"><code>init()</code> method</a>. <code>refreshConnection()</code> will \"refresh\"\n  all Peer connections. See the <u>Event Sequence</u> for more information.</blockquote>\n  The target Peer ID to refresh connection with.\n- When provided as an Array, it will refresh all connections with all the Peer IDs provided.\n- When not provided, it will refresh all the currently connected Peers in the Room.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "iceRestart",
                    "description": "<blockquote class=\"info\">\n  Note that this flag will not be honoured for MCU enabled Peer connections where\n  <code>options.mcuUseRenegoRestart</code> flag is set to <code>false</code> as it is not necessary since for MCU\n  \"restart\" case is to invoke <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> again, or that it is\n  not supported by the MCU.</blockquote>\n  The flag if ICE connections should restart when refreshing Peer connections.\n  <small>This is used when ICE connection state is <code>FAILED</code> or <code>DISCONNECTED</code>, which state\n  can be retrieved with the <a href=\"#event_iceConnectionState\"><code>iceConnectionState</code> event</a>.</small>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options",
                    "description": "<blockquote class=\"info\">\n  Note that for MCU connections, the <code>bandwidth</code> or <code>googleXBandwidth</code>\n  settings will override for all Peers or the current Room connection session settings.</blockquote>\n  The custom Peer configuration settings.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "bandwidth",
                            "description": "The configuration to set the maximum streaming bandwidth to send to Peers.\n  <small>Object signature follows <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>\n  <code>options.bandwidth</code> settings.</small>",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "googleXBandwidth",
                            "description": "The configuration to set the experimental google\n  video streaming bandwidth sent to Peers.\n  <small>Object signature follows <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>\n  <code>options.googleXBandwidth</code> settings.</small>",
                            "type": "JSON",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_peerRestart\">\n  <code>peerRestart</code> event</a> triggering <code>isSelfInitiateRestart</code> parameter payload\n  value as <code>true</code> for all Peers targeted for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of Peer IDs targeted.",
                                    "type": "Array"
                                },
                                {
                                    "name": "refreshErrors",
                                    "description": "The list of Peer connection refresh errors.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "refreshErrors.#peerId",
                                    "description": "The Peer connection refresh error associated\n  with the Peer ID defined in <code>#peerId</code> property.\n  <small>If <code>#peerId</code> value is <code>\"self\"</code>, it means that it is the error when there\n  is no Peer connections to refresh with.</small>",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "refreshSettings",
                                    "description": "The list of Peer connection refresh settings.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "refreshSettings.#peerId",
                                    "description": "The Peer connection refresh settings associated\n  with the Peer ID defined in <code>#peerId</code> property.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "refreshSettings.#peerId.iceRestart",
                                    "description": "The flag if ICE restart is enabled for\n  this Peer connection refresh session.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "refreshSettings.#peerId.customSettings",
                                    "description": "The Peer connection custom settings.\n  <small>Object signature follows <a href=\"#method_getPeersCustomSettings\"><code>getPeersCustomSettings</code>\n  method</a> returned per <code>#peerId</code> object.</small>",
                                    "type": "JSON"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of Peer IDs targeted.",
                                    "type": "Array"
                                },
                                {
                                    "name": "refreshSettings",
                                    "description": "The list of Peer connection refresh settings.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "refreshSettings.#peerId",
                                    "description": "The Peer connection refresh settings associated\n  with the Peer ID defined in <code>#peerId</code> property.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "refreshSettings.#peerId.iceRestart",
                                    "description": "The flag if ICE restart is enabled for\n  this Peer connection refresh session.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "refreshSettings.#peerId.customSettings",
                                    "description": "The Peer connection custom settings.\n  <small>Object signature follows <a href=\"#method_getPeersCustomSettings\"><code>getPeersCustomSettings</code>\n  method</a> returned per <code>#peerId</code> object.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if MCU is enabled for App Key provided in <a href=\"#method_init\"><code>init()</code> method</a><ol>\n  <li>If MCU is enabled: <ol><li>If there are connected Peers in the Room: <ol>\n  <li><a href=\"#event_peerRestart\"><code>peerRestart</code> event</a> triggers parameter payload\n  <code>isSelfInitiateRestart</code> value as <code>true</code> for all connected Peer connections.</li>\n  <li><a href=\"#event_serverPeerRestart\"><code>serverPeerRestart</code> event</a> triggers for\n  connected MCU server Peer connection.</li></ol></li>\n  <li>If <code>options.mcuUseRenegoRestart</code> value is <code>false</code> set in the\n  <a href=\"#method_init\"><code>init()</code> method</a>: <ol><li>\n  Invokes <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> <small><code>refreshConnection()</code>\n  will retain the User session information except the Peer ID will be a different assigned ID due to restarting the\n  Room session.</small> <ol><li>If request has errors <ol><li><b>ABORT</b> and return error.\n  </li></ol></li></ol></li></ol></li></ol></li>\n  <li>Else: <ol><li>If there are connected Peers in the Room: <ol>\n  <li>Refresh connections for all targeted Peers. <ol>\n  <li>If Peer connection exists: <ol>\n  <li><a href=\"#event_peerRestart\"><code>peerRestart</code> event</a> triggers parameter payload\n  <code>isSelfInitiateRestart</code> value as <code>true</code> for all targeted Peer connections.</li></ol></li>\n  <li>Else: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  </ol></li></ol></li></ol></ol></li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Refreshing a Peer connection\n  function refreshFrozenVideoStream (peerId) {\n    skylinkDemo.refreshConnection(peerId, function (error, success) {\n      if (error) return;\n      console.log(\"Refreshing connection for '\" + peerId + \"'\");\n    });\n  }\n\n  // Example 2: Refreshing a list of Peer connections\n  function refreshFrozenVideoStreamGroup (peerIdA, peerIdB) {\n    skylinkDemo.refreshConnection([peerIdA, peerIdB], function (error, success) {\n      if (error) {\n        if (error.transferErrors[peerIdA]) {\n          console.error(\"Failed refreshing connection for '\" + peerIdA + \"'\");\n        } else {\n          console.log(\"Refreshing connection for '\" + peerIdA + \"'\");\n        }\n        if (error.transferErrors[peerIdB]) {\n          console.error(\"Failed refreshing connection for '\" + peerIdB + \"'\");\n        } else {\n          console.log(\"Refreshing connection for '\" + peerIdB + \"'\");\n        }\n      } else {\n        console.log(\"Refreshing connection for '\" + peerIdA + \"' and '\" + peerIdB + \"'\");\n      }\n    });\n  }\n\n  // Example 3: Refreshing all Peer connections\n  function refreshFrozenVideoStreamAll () {\n    skylinkDemo.refreshConnection(function (error, success) {\n      if (error) {\n        for (var i = 0; i < error.listOfPeers.length; i++) {\n          if (error.refreshErrors[error.listOfPeers[i]]) {\n            console.error(\"Failed refreshing connection for '\" + error.listOfPeers[i] + \"'\");\n          } else {\n            console.info(\"Refreshing connection for '\" + error.listOfPeers[i] + \"'\");\n          }\n        }\n      } else {\n        console.log(\"Refreshing connection for all Peers\", success.listOfPeers);\n      }\n    });\n  }\n\n  // Example 4: Refresh Peer connection when ICE connection has failed or disconnected\n  //            and do a ICE connection refresh (only for non-MCU case)\n  skylinkDemo.on(\"iceConnectionState\", function (state, peerId) {\n     if (!usesMCUKey && [skylinkDemo.ICE_CONNECTION_STATE.FAILED,\n       skylinkDemo.ICE_CONNECTION_STATE.DISCONNECTED].indexOf(state) > -1) {\n       skylinkDemo.refreshConnection(peerId, true);\n     }\n  });"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 378,
            "description": "Function that refresh connections.",
            "itemtype": "method",
            "name": "_refreshPeerConnection",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 464,
            "description": "<blockquote class=\"info\">\nNote that this is not well supported in the Edge browser.\n</blockquote>\nFunction that retrieves Peer connection bandwidth and ICE connection stats.",
            "itemtype": "method",
            "name": "getConnectionStatus",
            "params": [
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to retrieve connection stats from.\n- When provided as an Array, it will retrieve all connection stats from all the Peer IDs provided.\n- When not provided, it will retrieve all connection stats from the currently connected Peers in the Room.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_getConnectionStatusStateChange\">\n  <code>getConnectionStatusStateChange</code> event</a> triggering <code>state</code> parameter payload\n  value as <code>RETRIEVE_SUCCESS</code> for all Peers targeted for request success.</small>\n  [Rel: Skylink.GET_CONNECTION_STATUS_STATE]",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of Peer IDs targeted.",
                                    "type": "Array"
                                },
                                {
                                    "name": "retrievalErrors",
                                    "description": "The list of Peer connection stats retrieval errors.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "retrievalErrors.#peerId",
                                    "description": "The Peer connection stats retrieval error associated\n  with the Peer ID defined in <code>#peerId</code> property.\n  <small>If <code>#peerId</code> value is <code>\"self\"</code>, it means that it is the error when there\n  are no Peer connections to refresh with.</small>",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "connectionStats",
                                    "description": "The list of Peer connection stats.\n  <small>These are the Peer connection stats that has been managed to be successfully retrieved.</small>",
                                    "type": "JSON"
                                },
                                {
                                    "name": "connectionStats.#peerId",
                                    "description": "The Peer connection stats associated with\n  the Peer ID defined in <code>#peerId</code> property.\n  <small>Object signature matches the <code>stats</code> parameter payload received in the\n  <a href=\"#event_getConnectionStatusStateChange\"><code>getConnectionStatusStateChange</code> event</a>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of Peer IDs targeted.",
                                    "type": "Array"
                                },
                                {
                                    "name": "connectionStats",
                                    "description": "The list of Peer connection stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "connectionStats.#peerId",
                                    "description": "The Peer connection stats associated with\n  the Peer ID defined in <code>#peerId</code> property.\n  <small>Object signature matches the <code>stats</code> parameter payload received in the\n  <a href=\"#event_getConnectionStatusStateChange\"><code>getConnectionStatusStateChange</code> event</a>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Retrieves Peer connection stats for all targeted Peers. <ol>\n  <li>If Peer connection has closed or does not exists: <small>This can be checked with\n  <a href=\"#event_peerConnectionState\"><code>peerConnectionState</code> event</a>\n  triggering parameter payload <code>state</code> as <code>CLOSED</code> for Peer.</small> <ol>\n  <li><a href=\"#event_getConnectionStatusStateChange\"> <code>getConnectionStatusStateChange</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RETRIEVE_ERROR</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li>\n  <li><a href=\"#event_getConnectionStatusStateChange\"><code>getConnectionStatusStateChange</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RETRIEVING</code>.</li>\n  <li>Received response from retrieval. <ol>\n  <li>If retrieval was successful: <ol>\n  <li><a href=\"#event_getConnectionStatusStateChange\"><code>getConnectionStatusStateChange</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RETRIEVE_SUCCESS</code>.</li></ol></li>\n  <li>Else: <ol>\n  <li><a href=\"#event_getConnectionStatusStateChange\"> <code>getConnectionStatusStateChange</code> event</a>\n  triggers parameter payload <code>state</code> as <code>RETRIEVE_ERROR</code>.</li>\n  </ol></li></ol></li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Retrieve a Peer connection stats\n  function startBWStatsInterval (peerId) {\n    setInterval(function () {\n      skylinkDemo.getConnectionStatus(peerId, function (error, success) {\n        if (error) return;\n        var sendVideoBytes  = success.connectionStats[peerId].video.sending.bytes;\n        var sendAudioBytes  = success.connectionStats[peerId].audio.sending.bytes;\n        var recvVideoBytes  = success.connectionStats[peerId].video.receiving.bytes;\n        var recvAudioBytes  = success.connectionStats[peerId].audio.receiving.bytes;\n        var localCandidate  = success.connectionStats[peerId].selectedCandidate.local;\n        var remoteCandidate = success.connectionStats[peerId].selectedCandidate.remote;\n        console.log(\"Sending audio (\" + sendAudioBytes + \"bps) video (\" + sendVideoBytes + \")\");\n        console.log(\"Receiving audio (\" + recvAudioBytes + \"bps) video (\" + recvVideoBytes + \")\");\n        console.log(\"Local candidate: \" + localCandidate.ipAddress + \":\" + localCandidate.portNumber +\n          \"?transport=\" + localCandidate.transport + \" (type: \" + localCandidate.candidateType + \")\");\n        console.log(\"Remote candidate: \" + remoteCandidate.ipAddress + \":\" + remoteCandidate.portNumber +\n          \"?transport=\" + remoteCandidate.transport + \" (type: \" + remoteCandidate.candidateType + \")\");\n      });\n    }, 1000);\n  }\n\n  // Example 2: Retrieve a list of Peer connection stats\n  function printConnStats (peerId, data) {\n    if (!data.connectionStats[peerId]) return;\n    var sendVideoBytes  = data.connectionStats[peerId].video.sending.bytes;\n    var sendAudioBytes  = data.connectionStats[peerId].audio.sending.bytes;\n    var recvVideoBytes  = data.connectionStats[peerId].video.receiving.bytes;\n    var recvAudioBytes  = data.connectionStats[peerId].audio.receiving.bytes;\n    var localCandidate  = data.connectionStats[peerId].selectedCandidate.local;\n    var remoteCandidate = data.connectionStats[peerId].selectedCandidate.remote;\n    console.log(peerId + \" - Sending audio (\" + sendAudioBytes + \"bps) video (\" + sendVideoBytes + \")\");\n    console.log(peerId + \" - Receiving audio (\" + recvAudioBytes + \"bps) video (\" + recvVideoBytes + \")\");\n    console.log(peerId + \" - Local candidate: \" + localCandidate.ipAddress + \":\" + localCandidate.portNumber +\n      \"?transport=\" + localCandidate.transport + \" (type: \" + localCandidate.candidateType + \")\");\n    console.log(peerId + \" - Remote candidate: \" + remoteCandidate.ipAddress + \":\" + remoteCandidate.portNumber +\n      \"?transport=\" + remoteCandidate.transport + \" (type: \" + remoteCandidate.candidateType + \")\");\n  }\n\n  function startBWStatsInterval (peerIdA, peerIdB) {\n    setInterval(function () {\n      skylinkDemo.getConnectionStatus([peerIdA, peerIdB], function (error, success) {\n        if (error) {\n          printConnStats(peerIdA, error.connectionStats);\n          printConnStats(peerIdB, error.connectionStats);\n        } else {\n          printConnStats(peerIdA, success.connectionStats);\n          printConnStats(peerIdB, success.connectionStats);\n        }\n      });\n    }, 1000);\n  }\n\n  // Example 3: Retrieve all Peer connection stats\n  function printConnStats (listOfPeers, data) {\n    listOfPeers.forEach(function (peerId) {\n      if (!data.connectionStats[peerId]) return;\n      var sendVideoBytes  = data.connectionStats[peerId].video.sending.bytes;\n      var sendAudioBytes  = data.connectionStats[peerId].audio.sending.bytes;\n      var recvVideoBytes  = data.connectionStats[peerId].video.receiving.bytes;\n      var recvAudioBytes  = data.connectionStats[peerId].audio.receiving.bytes;\n      var localCandidate  = data.connectionStats[peerId].selectedCandidate.local;\n      var remoteCandidate = data.connectionStats[peerId].selectedCandidate.remote;\n      console.log(peerId + \" - Sending audio (\" + sendAudioBytes + \"bps) video (\" + sendVideoBytes + \")\");\n      console.log(peerId + \" - Receiving audio (\" + recvAudioBytes + \"bps) video (\" + recvVideoBytes + \")\");\n      console.log(peerId + \" - Local candidate: \" + localCandidate.ipAddress + \":\" + localCandidate.portNumber +\n        \"?transport=\" + localCandidate.transport + \" (type: \" + localCandidate.candidateType + \")\");\n      console.log(peerId + \" - Remote candidate: \" + remoteCandidate.ipAddress + \":\" + remoteCandidate.portNumber +\n        \"?transport=\" + remoteCandidate.transport + \" (type: \" + remoteCandidate.candidateType + \")\");\n    });\n  }\n\n  function startBWStatsInterval (peerIdA, peerIdB) {\n    setInterval(function () {\n      skylinkDemo.getConnectionStatus(function (error, success) {\n        if (error) {\n          printConnStats(error.listOfPeers, error.connectionStats);\n        } else {\n          printConnStats(success.listOfPeers, success.connectionStats);\n        }\n      });\n    }, 1000);\n  }"
            ],
            "since": "0.6.14",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 735,
            "description": "Function that retrieves Peer connection stats.",
            "itemtype": "method",
            "name": "_retrieveStats",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1499,
            "description": "Function that starts the Peer connection session.\nRemember to remove previous method of reconnection (re-creating the Peer connection - destroy and create connection).",
            "itemtype": "method",
            "name": "_addPeer",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1534,
            "description": "Function that re-negotiates a Peer connection.\nRemember to remove previous method of reconnection (re-creating the Peer connection - destroy and create connection).",
            "itemtype": "method",
            "name": "_restartPeerConnection",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1685,
            "description": "Function that ends the Peer connection session.",
            "itemtype": "method",
            "name": "_removePeer",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1785,
            "description": "Function that creates the Peer connection.",
            "itemtype": "method",
            "name": "_createPeerConnection",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 2031,
            "description": "Function that handles the <code>_restartPeerConnection</code> scenario\n  for MCU enabled Peer connections.\nThis is implemented currently by making the user leave and join the Room again.\nThe Peer ID will not stay the same though.",
            "itemtype": "method",
            "name": "_restartMCUConnection",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 2179,
            "description": "Function that handles the stats tabulation.",
            "itemtype": "method",
            "name": "_parseConnectionStats",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 2199,
            "description": "Function that signals the end-of-candidates flag.",
            "itemtype": "method",
            "name": "_signalingEndOfCandidates",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 1,
            "description": "Function that overwrites the User current custom data.",
            "itemtype": "method",
            "name": "setUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "The updated custom data.",
                    "type": "JSON|String"
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Updates User custom data. <ol>\n  <li>If User is in Room: <ol>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers with parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li></ol></li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Set/Update User custom data before joinRoom()\n  var userData = \"beforejoin\";\n\n  skylinkDemo.setUserData(userData);\n\n  skylinkDemo.joinRoom(function (error, success) {\n     if (error) return;\n     if (success.peerInfo.userData === userData) {\n       console.log(\"User data is sent\");\n     }\n  });\n\n  // Example 2: Update User custom data after joinRoom()\n  var userData = \"afterjoin\";\n\n  skylinkDemo.joinRoom(function (error, success) {\n    if (error) return;\n    skylinkDemo.setUserData(userData);\n    if (skylinkDemo.getPeerInfo().userData === userData) {\n      console.log(\"User data is updated and sent\");\n    }\n  });"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 61,
            "description": "Function that returns the User / Peer current custom data.",
            "itemtype": "method",
            "name": "getUserData",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID to return the current custom data from.\n- When not provided or that the Peer ID is does not exists, it will return\n  the User current custom data.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The User / Peer current custom data.",
                "type": "JSON|String"
            },
            "example": [
                "\n  // Example 1: Get Peer current custom data\n  var peerUserData = skylinkDemo.getUserData(peerId);\n\n  // Example 2: Get User current custom data\n  var userUserData = skylinkDemo.getUserData();"
            ],
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 88,
            "description": "Function that returns the User / Peer current session information.",
            "itemtype": "method",
            "name": "getPeerInfo",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID to return the current session information from.\n- When not provided or that the Peer ID is does not exists, it will return\n  the User current session information.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The User / Peer current session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get Peer current session information\n  var peerPeerInfo = skylinkDemo.getPeerInfo(peerId);\n\n  // Example 2: Get User current session information\n  var userPeerInfo = skylinkDemo.getPeerInfo();"
            ],
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 292,
            "description": "Function that gets the list of connected Peers in the Room.",
            "itemtype": "method",
            "name": "getPeersInRoom",
            "return": {
                "description": "The list of connected Peers. <ul>\n  <li><code>#peerId</code><var><b>{</b>JSON<b>}</b></var><p>The Peer information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a> except there is\n  the <code>isSelf</code> flag that determines if Peer is User or not.</small></p></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of currently connected Peers in the same Room\n  var peers = skylinkDemo.getPeersInRoom();"
            ],
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 323,
            "description": "Function that gets the list of connected Peers Streams in the Room.",
            "itemtype": "method",
            "name": "getPeersStream",
            "return": {
                "description": "The list of Peers Stream. <ul>\n  <li><code>#peerId</code><var><b>{</b>JSON<b>}</b></var><p>The Peer Stream.</p><ul>\n  <li><code>stream</code><var><b>{</b>MediaStream<b>}</b></var><p>The Stream object.</p></li>\n  <li><code>streamId</code><var><b>{</b>String<b>}</b></var><p>The Stream ID.</p></li>\n  <li><code>isSelf</code><var><b>{</b>Boolean<b>}</b></var><p>The flag if Peer is User.</p></li>\n  </p></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of current Peers Streams in the same Room\n  var streams = skylinkDemo.getPeersStream();"
            ],
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 386,
            "description": "Function that gets the current list of connected Peers Datachannel connections in the Room.",
            "itemtype": "method",
            "name": "getPeersDatachannels",
            "return": {
                "description": "The list of Peers Stream. <ul>\n  <li><code>#peerId</code><var><b>{</b>JSON<b>}</b></var><p>The Peer Datachannels information.</p><ul>\n  <li><code>#channelName</code><var><b>{</b>JSON<b>}</b></var><p>The Datachannel information.</p><ul>\n  <li><code>channelName</code><var><b>{</b>String<b>}</b></var><p>The Datachannel ID..</p><ul>\n  <li><code>channelType</code><var><b>{</b>String<b>}</b></var><p>The Datachannel type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]</p></li>\n  <li><code>channelProp</code><var><b>{</b>String<b>}</b></var><p>The Datachannel property.</p></li>\n  <li><code>currentTransferId</code><var><b>{</b>String<b>}</b></var><p>The Datachannel connection\n  current progressing transfer session. <small>Defined as <code>null</code> when there is\n  currently no transfer session progressing on the Datachannel connection.</small></p></li>\n  <li><code>currentStreamId</code><var><b>{</b>String<b>}</b></var><p>The Datachannel connection\n  current data streaming session ID. <small>Defined as <code>null</code> when there is currently\n  no data streaming session on the Datachannel connection.</small></p></li>\n  <li><code>readyState</code><var><b>{</b>String<b>}</b></var><p>The Datachannel connection readyState.\n  [Rel: Skylink.DATA_CHANNEL_STATE]</p></li>\n  <li><code>bufferedAmountLow</code><var><b>{</b>Number<b>}</b></var><p>The Datachannel buffered amount.</p></li>\n  <li><code>bufferedAmountLowThreshold</code><var><b>{</b>Number<b>}</b></var><p>The Datachannel\n  buffered amount threshold.</p></li>\n  </p></li></p></li></ul></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of current Peers Datachannels in the same Room\n  var channels = skylinkDemo.getPeersDatachannels();"
            ],
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 442,
            "description": "Function that gets the list of current data transfers.",
            "itemtype": "method",
            "name": "getCurrentDataTransfers",
            "return": {
                "description": "The list of Peers Stream. <ul>\n  <li><code>#transferId</code><var><b>{</b>JSON<b>}</b></var><p>The data transfer session.</p><ul>\n  <li><code>transferInfo</code><var><b>{</b>JSON<b>}</b></var><p>The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  except without the <code>data</code> property.</small></p></li>\n  <li><code>peerId</code><var><b>{</b>String<b>}</b></var><p>The sender Peer ID.</p></li>\n  <li><code>isSelf</code><var><b>{</b>Boolean<b>}</b></var><p>The flag if Peer is User.</p></li>\n  </p></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of current data transfers in the same Room\n  var currentTransfers = skylinkDemo.getCurrentDataTransfers();"
            ],
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 480,
            "description": "Function that gets the list of current data streaming sessions.",
            "itemtype": "method",
            "name": "getCurrentDataStreamsSession",
            "return": {
                "description": "The list of Peers Stream. <ul>\n  <li><code>#streamId</code><var><b>{</b>JSON<b>}</b></var><p>The data streaming session.</p><ul>\n  <li><code>streamInfo</code><var><b>{</b>JSON<b>}</b></var><p>The data streaming information.\n  <small>Object signature matches the <code>streamInfo</code> parameter payload received in the\n  <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  except without the <code>chunk</code> amd <code>chunkSize</code> property.</small></p></li>\n  <li><code>peerId</code><var><b>{</b>String<b>}</b></var><p>The sender Peer ID.</p></li>\n  <li><code>isSelf</code><var><b>{</b>Boolean<b>}</b></var><p>The flag if Peer is User.</p></li>\n  </p></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of current data streaming sessions in the same Room\n  var currentDataStreams = skylinkDemo.getCurrentDataStreamsSession();"
            ],
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 524,
            "description": "Function that gets the list of current custom Peer settings sent and set.",
            "itemtype": "method",
            "name": "getPeerCustomSettings",
            "return": {
                "description": "The list of Peers custom settings sent and set. <ul>\n  <li><code>#peerId</code><var><b>{</b>JSON<b>}</b></var><p>The Peer settings sent and set.</p><ul>\n  <li><code>settings</code><var><b>{</b>JSON<b>}</b></var><p>The custom Peer settings.\n  <small>Object signature matches the <code>peerInfo.settings</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small></p></li>\n  <li><code>mediaStatus</code><var><b>{</b>JSON<b>}</b></var><p>The custom Peer Stream muted settings.\n  <small>Object signature matches the <code>peerInfo.mediaStatus</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small></p></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get the list of current Peer custom settings\n  var currentPeerSettings = skylinkDemo.getPeersCustomSettings();"
            ],
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 646,
            "description": "Function that returns the User session information to be sent to Peers.",
            "itemtype": "method",
            "name": "_getUserInfo",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 1,
            "description": "The list of Peer connection states.",
            "itemtype": "attribute",
            "name": "HANDSHAKE_PROGRESS",
            "params": [
                {
                    "name": "ENTER",
                    "description": "<small>Value <code>\"enter\"</code></small>\n  The value of the connection state when Peer has just entered the Room.\n  <small>At this stage, <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>\n  is triggered.</small>",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "<small>Value <code>\"welcome\"</code></small>\n  The value of the connection state when Peer is aware that User has entered the Room.\n  <small>At this stage, <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>\n  is triggered and Peer connection may commence.</small>",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "<small>Value <code>\"offer\"</code></small>\n  The value of the connection state when Peer connection has set the local / remote <code>\"offer\"</code>\n  session description to start streaming connection.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "<small>Value <code>\"answer\"</code></small>\n  The value of the connection state when Peer connection has set the local / remote <code>\"answer\"</code>\n  session description to establish streaming connection.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>\"error\"</code></small>\n  The value of the connection state when Peer connection has failed to establish streaming connection.\n  <small>This happens when there are errors that occurs in creating local <code>\"offer\"</code> /\n  <code>\"answer\"</code>, or when setting remote / local <code>\"offer\"</code> / <code>\"answer\"</code>.</small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 35,
            "description": "Function that creates the Peer connection offer session description.",
            "itemtype": "method",
            "name": "_doOffer",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 126,
            "description": "Function that creates the Peer connection answer session description.\nThis comes after receiving and setting the offer session description.",
            "itemtype": "method",
            "name": "_doAnswer",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 182,
            "description": "Function that sets the local session description and sends to Peer.\nIf trickle ICE is disabled, the local session description will be sent after\n  ICE gathering has been completed.",
            "itemtype": "method",
            "name": "_setLocalAndSendMessage",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/peer-privileged.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled for the App Key\n  provided in the <a href=\"#method_init\"><code>init()</code> method</a>, as only Users connecting using\n  the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n  Peer IDs from Rooms within the same App space.\n  <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n  Read more about privileged App Key feature here</a>.\n</blockquote>\nThe list of <a href=\"#method_getPeers\"><code>getPeers()</code> method</a> retrieval states.",
            "itemtype": "attribute",
            "name": "GET_PEERS_STATE",
            "params": [
                {
                    "name": "ENQUIRED",
                    "description": "<small>Value <code>\"enquired\"</code></small>\n  The value of the state when <code>getPeers()</code> is retrieving the list of Peer IDs\n  from Rooms within the same App space from the Signaling server.",
                    "type": "String"
                },
                {
                    "name": "RECEIVED",
                    "description": "<small>Value <code>\"received\"</code></small>\n  The value of the state when <code>getPeers()</code> has retrieved the list of Peer IDs\n  from Rooms within the same App space from the Signaling server successfully.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-privileged.js",
            "line": 28,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled and\n  <code>\"autoIntroduce\"</code> flag to be disabled for the App Key provided in the\n  <a href=\"#method_init\"><code>init()</code> method</a>, as only Users connecting using\n  the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n  Peer IDs from Rooms within the same App space.\n  <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n  Read more about privileged App Key feature here</a>.\n</blockquote>\nThe list of <a href=\"#method_introducePeer\"><code>introducePeer</code> method</a> Peer introduction request states.",
            "itemtype": "attribute",
            "name": "INTRODUCE_STATE",
            "params": [
                {
                    "name": "INTRODUCING",
                    "description": "<small>Value <code>\"enquired\"</code></small>\n  The value of the state when introduction request for the selected pair of Peers has been made to the Signaling server.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>\"error\"</code></small>\n  The value of the state when introduction request made to the Signaling server\n  for the selected pair of Peers has failed.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-privileged.js",
            "line": 54,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled for the App Key\n  provided in the <a href=\"#method_init\"><code>init()</code> method</a>, as only Users connecting using\n  the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n  Peer IDs from Rooms within the same App space.\n  <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n  Read more about privileged App Key feature here</a>.\n</blockquote>\nFunction that retrieves the list of Peer IDs from Rooms within the same App space.",
            "itemtype": "method",
            "name": "getPeers",
            "params": [
                {
                    "name": "showAll",
                    "description": "The flag if Signaling server should also return the list of privileged Peer IDs.\n<small>By default, the Signaling server does not include the list of privileged Peer IDs in the return result.</small>",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_getPeersStateChange\">\n  <code>getPeersStateChange</code> event</a> triggering <code>state</code> parameter payload value as\n  <code>RECEIVED</code> for request success.</small>\n  [Rel: Skylink.GET_PEERS_STATE]",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>getPeers()</code> error when retrieving list of Peer IDs from Rooms\n  within the same App space.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>\n  <small>Object signature matches the <code>peerList</code> parameter payload received in the\n  <a href=\"#event_getPeersStateChange\"><code>getPeersStateChange</code> event</a>.</small>",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If App Key provided in the <a href=\"#method_init\"><code>init()</code> method</a> is not\n  a Privileged enabled Key: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Retrieves the list of Peer IDs from Rooms within the same App space. <ol>\n  <li><a href=\"#event_getPeersStateChange\"><code>getPeersStateChange</code> event</a> triggers parameter\n  payload <code>state</code> value as <code>ENQUIRED</code>.</li>\n  <li>If received list from Signaling server successfully: <ol>\n  <li><a href=\"#event_getPeersStateChange\"><code>getPeersStateChange</code> event</a> triggers parameter\n  payload <code>state</code> value as <code>RECEIVED</code>.</li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Retrieving the un-privileged Peers\n  skylinkDemo.joinRoom(function (jRError, jRSuccess) {\n    if (jRError) return;\n    skylinkDemo.getPeers(function (error, success) {\n       if (error) return;\n       console.log(\"The list of only un-privileged Peers in the same App space ->\", success);\n    });\n  });\n\n  // Example 2: Retrieving the all Peers (privileged or un-privileged)\n  skylinkDemo.joinRoom(function (jRError, jRSuccess) {\n    if (jRError) return;\n    skylinkDemo.getPeers(true, function (error, success) {\n       if (error) return;\n       console.log(\"The list of all Peers in the same App space ->\", success);\n    });\n  });"
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-privileged.js",
            "line": 147,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled and\n  <code>\"autoIntroduce\"</code> flag to be disabled for the App Key provided in the\n  <a href=\"#method_init\"><code>init()</code> method</a>, as only Users connecting using\n  the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n  Peer IDs from Rooms within the same App space.\n  <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n  Read more about privileged App Key feature here</a>.\n</blockquote>\nFunction that selects and introduces a pair of Peers to start connection with each other.",
            "itemtype": "method",
            "name": "introducePeer",
            "params": [
                {
                    "name": "sendingPeerId",
                    "description": "The Peer ID to be connected with <code>receivingPeerId</code>.",
                    "type": "String"
                },
                {
                    "name": "receivingPeerId",
                    "description": "The Peer ID to be connected with <code>sendingPeerId</code>.",
                    "type": "String"
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If App Key provided in the <a href=\"#method_init\"><code>init()</code> method</a> is not\n  a Privileged enabled Key: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Starts sending introduction request for the selected pair of Peers to the Signaling server. <ol>\n  <li><a href=\"#event_introduceStateChange\"><code>introduceStateChange</code> event</a> triggers parameter\n  payload <code>state</code> value as <code>INTRODUCING</code>.</li>\n  <li>If received errors from Signaling server: <ol>\n  <li><a href=\"#event_introduceStateChange\"><code>introduceStateChange</code> event</a> triggers parameter\n  payload <code>state</code> value as <code>ERROR</code>.</li></ol></li></ol></li></ol>",
            "example": [
                "\n  // Example 1: Introduce a pair of Peers\n  skylinkDemo.on(\"introduceStateChange\", function (state, privilegedPeerId, sendingPeerId, receivingPeerId) {\n\t   if (state === skylinkDemo.INTRODUCE_STATE.INTRODUCING) {\n      console.log(\"Peer '\" + sendingPeerId + \"' has been introduced to '\" + receivingPeerId + \"'\");\n    }\n  });\n\n  skylinkDemo.joinRoom(function (jRError, jRSuccess) {\n    if (jRError) return;\n    skylinkDemo.getPeers(function (gPError, gPSuccess) {\n       if (gPError) return;\n       skylinkDemo.introducePeer(gPSuccess.roomName[0], gPSuccess.roomName[1]);\n    });\n  });"
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 1,
            "description": "The list of Signaling server reaction states during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION",
            "params": [
                {
                    "name": "WARNING",
                    "description": "<small>Value <code>\"warning\"</code></small>\n  The value of the state when Room session is about to end.",
                    "type": "String"
                },
                {
                    "name": "REJECT",
                    "description": "<small>Value <code>\"reject\"</code></small>\n  The value of the state when Room session has failed to start or has ended.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 18,
            "description": "The list of Signaling server reaction states reason of action code during\n<a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION_REASON",
            "params": [
                {
                    "name": "CREDENTIALS_EXPIRED",
                    "description": "<small>Value <code>\"oldTimeStamp\"</code></small>\n  The value of the reason code when Room session token has expired.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n  <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "CREDENTIALS_ERROR",
                    "description": "<small>Value <code>\"credentialError\"</code></small>\n  The value of the reason code when Room session token provided is invalid.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>",
                    "type": "String"
                },
                {
                    "name": "DUPLICATED_LOGIN",
                    "description": "<small>Value <code>\"duplicatedLogin\"</code></small>\n  The value of the reason code when Room session token has been used already.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n  <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "ROOM_NOT_STARTED",
                    "description": "<small>Value <code>\"notStart\"</code></small>\n  The value of the reason code when Room session has not started.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n  <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "EXPIRED",
                    "description": "<small>Value <code>\"expired\"</code></small>\n  The value of the reason code when Room session has ended already.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n  <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "<small>Value <code>\"locked\"</code></small>\n  The value of the reason code when Room is locked.\n  <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n  <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "FAST_MESSAGE",
                    "description": "<small>Value <code>\"fastmsg\"</code></small>\n   The value of the reason code when User is flooding socket messages to the Signaling server\n   that is sent too quickly within less than a second interval.\n   <small>Happens after Room session has started. This can be caused by various methods like\n   <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n   <a href=\"#method_setUserData\"><code>setUserData()</code> method</a>,\n   <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n   <a href=\"#method_enableAudio\"><code>enableAudio()</code> method</a>,\n   <a href=\"#method_enableVideo\"><code>enableVideo()</code> method</a>,\n   <a href=\"#method_disableAudio\"><code>disableAudio()</code> method</a> and\n   <a href=\"#method_disableVideo\"><code>disableVideo()</code> method</a></small>\n   <small>Results with: <code>WARNING</code></small>",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSING",
                    "description": "<small>Value <code>\"toClose\"</code></small>\n   The value of the reason code when Room session is ending.\n   <small>Happens after Room session has started. This serves as a prerequisite warning before\n   <code>ROOM_CLOSED</code> occurs.</small>\n   <small>Results with: <code>WARNING</code></small>",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSED",
                    "description": "<small>Value <code>\"roomclose\"</code></small>\n   The value of the reason code when Room session has just ended.\n   <small>Happens after Room session has started.</small>\n   <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "SERVER_ERROR",
                    "description": "<small>Value <code>\"serverError\"</code></small>\n   The value of the reason code when Room session fails to start due to some technical errors.\n   <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n   <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                },
                {
                    "name": "KEY_ERROR",
                    "description": "<small>Value <code>\"keyFailed\"</code></small>\n   The value of the reason code when Room session fails to start due to some technical error pertaining to\n   App Key initialization.\n   <small>Happens during <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> request.</small>\n   <small>Results with: <code>REJECT</code></small>",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 94,
            "description": "Function that starts the Room session.",
            "itemtype": "method",
            "name": "joinRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The Room name.\n- When not provided or is provided as an empty string, its value is the <code>options.defaultRoom</code>\n  provided in the <a href=\"#method_init\"><code>init()</code> method</a>.\n  <small>Note that if you are using credentials based authentication, you cannot switch the Room\n  that is not the same as the <code>options.defaultRoom</code> defined in the\n  <a href=\"#method_init\"><code>init()</code> method</a>.</small>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "The Room session configuration options.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "The User custom data.\n  <small>This can be set after Room session has started using the\n  <a href=\"#method_setUserData\"><code>setUserData()</code> method</a>.</small>",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "useExactConstraints",
                            "description": "The <a href=\"#method_getUserMedia\"><code>getUserMedia()</code>\n  method</a> <code>options.useExactConstraints</code> parameter settings.\n  <small>See the <code>options.useExactConstraints</code> parameter in the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> for more information.</small>",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "The <a href=\"#method_getUserMedia\"><code>getUserMedia()</code>\n  method</a> <code>options.audio</code> parameter settings.\n  <small>When value is defined as <code>true</code> or an object, <a href=\"#method_getUserMedia\">\n  <code>getUserMedia()</code> method</a> to be invoked to retrieve new Stream. If\n  <code>options.video</code> is not defined, it will be defined as <code>false</code>.</small>\n  <small>Object signature matches the <code>options.audio</code> parameter in the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.</small>",
                            "type": "Boolean|JSON",
                            "optional": true
                        },
                        {
                            "name": "video",
                            "description": "The <a href=\"#method_getUserMedia\"><code>getUserMedia()</code>\n  method</a> <code>options.video</code> parameter settings.\n  <small>When value is defined as <code>true</code> or an object, <a href=\"#method_getUserMedia\">\n  <code>getUserMedia()</code> method</a> to be invoked to retrieve new Stream. If\n  <code>options.audio</code> is not defined, it will be defined as <code>false</code>.</small>\n  <small>Object signature matches the <code>options.video</code> parameter in the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.</small>",
                            "type": "Boolean|JSON",
                            "optional": true
                        },
                        {
                            "name": "voiceActivityDetection",
                            "description": "The flag if voice activity detection should be enabled.\n  <small>This can only be toggled if User is and for the offerer, which is determined if User's\n  <code>peerInfo.config.priorityWeight</code> is higher than Peer's.</small>\n  <blockquote class=\"details\">\n  This works hand-in-hand with the <code>options.disableComfortNoiseCodec</code> flag in the\n  <a href=\"#method_init\"><code>init()</code> method</a> and the <code>options.audio.usedtx</code> setting in\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>. VAD (voice activity detection)\n  detects if there is an active voice in the Stream, and if there is no active voice in the Stream, the\n  <code>options.audio.usedtx</code> (if enabled) would prevent sending these empty bits. To prevent huge differences\n  when there is a silence and an active voice later, the CN codec would produce an empty voice to\n  make it sound better.</blockquote>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "bandwidth",
                            "description": "<blockquote class=\"info\">Note that this is currently not supported\n  with Firefox browsers versions 48 and below as noted in an existing\n  <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=976521#c21\">bugzilla ticket here</a>.</blockquote>\n  The configuration to set the maximum streaming bandwidth to send to Peers.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "The maximum audio streaming bandwidth sent to Peers in kbps.\n  <small>Recommended values are <code>50</code> to <code>200</code>. <code>50</code> is sufficient enough for\n  an audio call. The higher you go if you want clearer audio and to be able to hear music streaming.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "The maximum video streaming bandwidth sent to Peers.\n  <small>Recommended values are <code>256</code>-<code>500</code> for 180p quality,\n  <code>500</code>-<code>1024</code> for 360p quality, <code>1024</code>-<code>2048</code> for 720p quality\n  and <code>2048</code>-<code>4096</code> for 1080p quality.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "The maximum data streaming bandwidth sent to Peers.\n  <small>This affects the P2P messaging in <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>,\n  and data transfers in <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> and\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a>.</small>",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "googleXBandwidth",
                            "description": "<blockquote class=\"info\">Note that this is an experimental configuration\n  and may cause disruptions in connections or connectivity issues when toggled, or may not work depending on\n  browser supports. Currently, this only toggles the video codec bandwidth configuration.</blockquote>\n  The configuration to set the experimental google video streaming bandwidth sent to Peers.\n  <small>Note that Peers may override the \"receive from\" streaming bandwidth depending on the Peers configuration.</small>",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "min",
                                    "description": "The minimum experimental google video streaming bandwidth sent to Peers.\n  <small>This toggles the <code>\"x-google-min-bitrate\"</code> flag in the session description.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "max",
                                    "description": "The maximum experimental google video streaming bandwidth sent to Peers.\n  <small>This toggles the <code>\"x-google-max-bitrate\"</code> flag in the session description.</small>",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "manualGetUserMedia",
                            "description": "The flag if <code>joinRoom()</code> should trigger\n  <a href=\"#event_mediaAccessRequired\"><code>mediaAccessRequired</code> event</a> in which the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> or\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>\n  must be retrieved as a requirement before Room session may begin.\n  <small>This ignores the <code>options.audio</code> and <code>options.video</code> configuration.</small>\n  <small>After 30 seconds without any Stream retrieved, this results in the `callback(error, ..)` result.</small>",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "sdpSettings",
                            "description": "<blockquote class=\"info\">\n  Note that this is mainly used for debugging purposes and that it is an experimental flag, so\n  it may cause disruptions in connections or connectivity issues when toggled. Note that it might not work\n  with MCU enabled Peer connections or break MCU enabled Peer connections.</blockquote>\n  The configuration to set the session description settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "connection",
                                    "description": "The configuration to set the session description connection settings.\n  <small>Note that this configuration may disable the media streaming and these settings will be enabled for\n  MCU server Peer connection regardless of the flags configured.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "connection.audio",
                                    "description": "The configuration to enable audio session description connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "connection.video",
                                    "description": "The configuration to enable video session description connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "connection.data",
                                    "description": "The configuration to enable Datachannel session description connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "direction",
                                    "description": "The configuration to set the session description connection direction\n  to enable or disable uploading and downloading audio or video media streaming.\n  <small>Note that this configuration does not prevent RTCP packets from being sent and received.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "direction.audio",
                                    "description": "The configuration to set the session description\n  connection direction for audio streaming.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "direction.audio.send",
                                    "description": "The flag if uploading audio streaming\n  should be enabled when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "direction.audio.receive",
                                    "description": "The flag if downloading audio\n  streaming should be enabled when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "direction.video",
                                    "description": "The configuration to set the session description\n  connection direction for video streaming.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "direction.video.send",
                                    "description": "The flag if uploading video streaming\n  should be enabled when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "direction.video.receive",
                                    "description": "The flag if downloading video streaming\n  should be enabled when available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "publishOnly",
                            "description": "<blockquote class=\"info\">\n  For MCU enabled Peer connections, defining this flag would make Peer not know other Peers presence in the Room.<br>\n  For non-MCU enable Peer connections, defining this flag would cause other Peers in the Room to\n  not to send Stream to Peer, and overrides the config\n  <code>options.sdpSettings.direction.audio.receive</code> value to <code>false</code>,\n  <code>options.sdpSettings.direction.video.receive</code> value to <code>false</code>,\n  <code>options.sdpSettings.direction.video.send</code> value to <code>true</code> and\n  <code>options.sdpSettings.direction.audio.send</code> value to <code>true</code>.<br>\n  Note that this feature is currently is beta, and for any enquiries on enabling and its support for MCU enabled\n  Peer connections, please  contact <a href=\"http://support.temasys.io\">our support portal</a>.</blockquote></blockquote>\n  The config if Peer would publish only.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "props": [
                                {
                                    "name": "parentId",
                                    "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Use <code>options.parentId</code> instead.\n  </blockquote> The parent Peer ID to match to when Peer is connected.\n  <small>This is useful for identification for users connecting the Room twice simultaneously for multi-streaming.</small>\n  <small>If User Peer ID matches the parent Peer ID provided from Peer, User will not be connected to Peer.</small>",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "parentId",
                            "description": "The parent Peer ID to match to when Peer is connected.\n  <small>Note that configuring this value overrides the <code>options.publishOnly.parentId</code> value.</small>\n  <small>This is useful for identification for users connecting the Room twice simultaneously for multi-streaming.</small>\n  <small>If User Peer ID matches the parent Peer ID provided from Peer, User will not be connected to Peer.</small>",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "peerConnection",
                            "description": "<blockquote class=\"info\">\n  Note that this is mainly used for debugging purposes, so it may cause disruptions in connections or\n  connectivity issues when configured. </blockquote> The Peer connection constraints settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "bundlePolicy",
                                    "description": "The Peer connection media bundle policy.\n- When not provided, its value is <code>BALANCED</code>.\n  [Rel: Skylink.BUNDLE_POLICY]",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "rtcpMuxPolicy",
                                    "description": "The Peer connection RTP and RTCP ICE candidates mux policy.\n- When not provided, its value is <code>REQUIRE</code>.\n  [Rel: Skylink.RTCP_MUX_POLICY]",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "iceCandidatePoolSize",
                                    "description": "The number of ICE candidates to gather before\n  gathering it when setting local offer / answer session description.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "certificate",
                                    "description": "The type of certificate that Peer connection should\n  generate and use when available.\n- When not provided, its value is <code>AUTO</code>.\n  [Rel: Skylink.PEER_CERTIFICATE]",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "autoBandwidthAdjustment",
                            "description": "<blockquote class=\"info\">\n  Note that this is an experimental feature which may be removed or changed in the future releases.\n  This feature is also only available for non-MCU enabled Peer connections and Edge Peer connections.\n  </blockquote> The flag if Peer connections uploading and downloading bandwidth should be automatically adjusted\n  each time based on a specified interval.\n  <small>Note this would cause <a href=\"#event_peerRestart\"><code>peerRestart</code> event</a> to be triggered\n  for each specified interval.</small>",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "interval",
                                    "description": "The interval each time to adjust bandwidth\n  connections in seconds.\n  <small>Note that the minimum value is <code>10</code>.</small>",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10"
                                },
                                {
                                    "name": "limitAtPercentage",
                                    "description": "The percentage of the average bandwidth to adjust to.\n  <small>E.g. <code>avgBandwidth * (limitPercentage / 100)</code>.</small>",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "100"
                                },
                                {
                                    "name": "useUploadBwOnly",
                                    "description": "The flag if average bandwidth computation\n  should only consist of the upload bandwidth.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_peerJoined\">\n  <code>peerJoined</code> event</a> triggering <code>isSelf</code> parameter payload value as <code>true</code>\n  for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "error",
                                    "description": "The error received when starting Room session has failed.",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "errorCode",
                                    "description": "The current <a href=\"#method_init\"><code>init()</code> method</a> ready state.\n  <small>Defined as <code>null</code> when no <a href=\"#method_init\"><code>init()</code> method</a>\n  has not been called due to invalid configuration.</small>\n  [Rel: Skylink.READY_STATE_CHANGE]",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "room",
                                    "description": "The Room name.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "room",
                                    "description": "The Room name.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The User's Room session Peer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerInfo",
                                    "description": "The User's current Room session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Connecting to the default Room without Stream\n  skylinkDemo.joinRoom(function (error, success) {\n    if (error) return;\n    console.log(\"User connected.\");\n  });\n\n  // Example 2: Connecting to Room \"testxx\" with Stream\n  skylinkDemo.joinRoom(\"testxx\", {\n    audio: true,\n    video: true\n  }, function (error, success) {\n    if (error) return;\n    console.log(\"User connected with getUserMedia() Stream.\")\n  });\n\n  // Example 3: Connecting to default Room with Stream retrieved earlier\n  skylinkDemo.getUserMedia(function (gUMError, gUMSuccess) {\n    if (gUMError) return;\n    skylinkDemo.joinRoom(function (error, success) {\n      if (error) return;\n      console.log(\"User connected with getUserMedia() Stream.\");\n    });\n  });\n\n  // Example 4: Connecting to \"testxx\" Room with shareScreen() Stream retrieved manually\n  skylinkDemo.on(\"mediaAccessRequired\", function () {\n    skylinkDemo.shareScreen(function (sSError, sSSuccess) {\n      if (sSError) return;\n    });\n  });\n\n  skylinkDemo.joinRoom(\"testxx\", {\n    manualGetUserMedia: true\n  }, function (error, success) {\n    if (error) return;\n    console.log(\"User connected with shareScreen() Stream.\");\n  });\n\n  // Example 5: Connecting to \"testxx\" Room with User custom data\n  var data = { username: \"myusername\" };\n  skylinkDemo.joinRoom(\"testxx\", {\n    userData: data\n  }, function (error, success) {\n    if (error) return;\n    console.log(\"User connected with correct user data?\", success.peerInfo.userData.username === data.username);\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If User is in a Room: <ol>\n  <li>Invoke <a href=\"#method_leaveRoom\"><code>leaveRoom()</code> method</a>\n  to end current Room connection. <small>Invoked <a href=\"#method_leaveRoom\"><code>leaveRoom()</code>\n  method</a> <code>stopMediaOptions</code> parameter value will be <code>false</code>.</small>\n  <small>Regardless of request errors, <code>joinRoom()</code> will still proceed.</small></li></ol></li>\n  <li>Check if Room name provided matches the Room name of the currently retrieved Room session token. <ol>\n  <li>If Room name does not matches: <ol>\n  <li>Invoke <a href=\"#method_init\"><code>init()</code> method</a> to retrieve new Room session token. <ol>\n  <li>If request has errors: <ol><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li></ol></li>\n  <li>Open a new socket connection to Signaling server. <ol><li>If Socket connection fails: <ol>\n  <li><a href=\"#event_socketError\"><code>socketError</code> event</a> triggers parameter payload\n  <code>errorCode</code> as <code>CONNECTION_FAILED</code>. <ol>\n  <li>Checks if there are fallback ports and transports to use. <ol>\n  <li>If there are still fallback ports and transports: <ol>\n  <li>Attempts to retry socket connection to Signaling server. <ol>\n  <li><a href=\"#event_channelRetry\"><code>channelRetry</code> event</a> triggers.</li>\n  <li><a href=\"#event_socketError\"><code>socketError</code> event</a> triggers parameter\n  payload <code>errorCode</code> as <code>RECONNECTION_ATTEMPT</code>.</li>\n  <li>If attempt to retry socket connection to Signaling server has failed: <ol>\n  <li><a href=\"#event_socketError\"><code>socketError</code> event</a> triggers parameter payload\n  <code>errorCode</code> as <code>RECONNECTION_FAILED</code>.</li>\n  <li>Checks if there are still any more fallback ports and transports to use. <ol>\n  <li>If there are is no more fallback ports and transports to use: <ol>\n  <li><a href=\"#event_socketError\"><code>socketError</code> event</a> triggers\n  parameter payload <code>errorCode</code> as <code>RECONNECTION_ABORTED</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li><li>Else: <ol><li><b>REPEAT</b> attempt to retry socket connection\n  to Signaling server step.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_socketError\"><code>socketError</code> event</a> triggers\n  parameter payload <code>errorCode</code> as <code>CONNECTION_ABORTED</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li></ol></li>\n  <li>If socket connection to Signaling server has opened: <ol>\n  <li><a href=\"#event_channelOpen\"><code>channelOpen</code> event</a> triggers.</li></ol></li></ol></li>\n  <li>Checks if there is <code>options.manualGetUserMedia</code> requested <ol><li>If it is requested: <ol>\n  <li><a href=\"#event_mediaAccessRequired\"><code>mediaAccessRequired</code> event</a> triggers.</li>\n  <li>If more than 30 seconds has passed and no <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>\n  or <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>\n  has been retrieved: <ol><li><b>ABORT</b> and return error.</li></ol></li></ol></li><li>Else: <ol>\n  <li>If there is <code>options.audio</code> or <code>options.video</code> requested: <ol>\n  <li>Invoke <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>. <ol>\n  <li>If request has errors: <ol><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li></ol></li>\n  </ol></li><li>Starts the Room session <ol><li>If Room session has started successfully: <ol>\n  <li><a href=\"#event_peerJoined\"><code>peerJoined</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li>\n  <li>If MCU is enabled for the App Key provided in <a href=\"#method_init\"><code>init()</code>\n  method</a> and connected: <ol><li><a href=\"#event_serverPeerJoined\"><code>serverPeerJoined</code>\n  event</a> triggers <code>serverPeerType</code> as <code>MCU</code>. <small>MCU has\n  to be present in the Room in order for Peer connections to commence.</small></li>\n  <li>Checks for any available Stream <ol>\n  <li>If <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> is available: <ol>\n  <li><a href=\"#event_incomingStream\"><code>incomingStream</code> event</a>\n  triggers parameter payload <code>isSelf</code> value as <code>true</code> and <code>stream</code>\n  as <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>.\n  <small>User will be sending <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>\n  to Peers.</small></li></ol></li>\n  <li>Else if <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> is available: <ol>\n  <li><a href=\"#event_incomingStream\"><code>incomingStream</code> event</a> triggers parameter\n  payload <code>isSelf</code> value as <code>true</code> and <code>stream</code> as\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.\n  <small>User will be sending <code>getUserMedia()</code> Stream to Peers.</small></li></ol></li><li>Else: <ol>\n  <li>No Stream will be sent.</li></ol></li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_systemAction\"><code>systemAction</code> event</a> triggers\n  parameter payload <code>action</code> as <code>REJECT</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 477,
            "description": "<blockquote class=\"info\">\n  Note that this method will close any existing socket channel connection despite not being in the Room.\n</blockquote>\nFunction that stops Room session.",
            "itemtype": "method",
            "name": "leaveRoom",
            "params": [
                {
                    "name": "stopMediaOptions",
                    "description": "The flag if <code>leaveRoom()</code>\n  should stop both <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>\n  and <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.\n- When provided as a boolean, this sets both <code>stopMediaOptions.userMedia</code>\n  and <code>stopMediaOptions.screenshare</code> to its boolean value.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "true",
                    "props": [
                        {
                            "name": "userMedia",
                            "description": "The flag if <code>leaveRoom()</code>\n  should stop <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.\n  <small>This invokes <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "screenshare",
                            "description": "The flag if <code>leaveRoom()</code>\n  should stop <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>.\n  <small>This invokes <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_peerLeft\">\n  <code>peerLeft</code> event</a> triggering <code>isSelf</code> parameter payload value as <code>true</code>\n  for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>leaveRoom()</code> error when stopping Room session.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "peerId",
                                    "description": "The User's Room session Peer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "previousRoom",
                                    "description": "The Room name.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If Socket connection is opened: <ol><li><a href=\"#event_channelClose\"><code>channelClose</code> event</a> triggers.</li></ol></li>\n  <li>Checks if User is in Room. <ol><li>If User is not in a Room: <ol><li><b>ABORT</b> and return error.</li>\n  </ol></li><li>Else: <ol><li>If parameter <code>stopMediaOptions.userMedia</code> value is <code>true</code>: <ol>\n  <li>Invoke <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>.\n  <small>Regardless of request errors, <code>leaveRoom()</code> will still proceed.</small></li></ol></li>\n  <li>If parameter <code>stopMediaOptions.screenshare</code> value is <code>true</code>: <ol>\n  <li>Invoke <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>.\n  <small>Regardless of request errors, <code>leaveRoom()</code> will still proceed.</small></li></ol></li>\n  <li><a href=\"#event_peerLeft\"><code>peerLeft</code> event</a> triggers for User and all connected Peers in Room.</li>\n  <li>If MCU is enabled for the App Key provided in <a href=\"#method_init\"><code>init()</code> method</a>\n  and connected: <ol><li><a href=\"#event_serverPeerLeft\"><code>serverPeerLeft</code> event</a>\n  triggers parameter payload <code>serverPeerType</code> as <code>MCU</code>.</li></ol></li></ol></li></ol></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 593,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that locks the current Room when in session to prevent other Peers from joining the Room.",
            "itemtype": "method",
            "name": "lockRoom",
            "trigger": "<ol class=\"desc-seq\">\n  <li>Requests to Signaling server to lock Room <ol>\n  <li><a href=\"#event_roomLock\"><code>roomLock</code> event</a> triggers parameter payload\n  <code>isLocked</code> value as <code>true</code>.</li></ol></li></ol>",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 627,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that unlocks the current Room when in session to allow other Peers to join the Room.",
            "itemtype": "method",
            "name": "unlockRoom",
            "trigger": "<ol class=\"desc-seq\">\n  <li>Requests to Signaling server to unlock Room <ol>\n  <li><a href=\"#event_roomLock\"><code>roomLock</code> event</a> triggers parameter payload\n  <code>isLocked</code> value as <code>false</code>.</li></ol></li></ol>",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 661,
            "description": "Function that waits for Socket connection to Signaling to be opened.",
            "itemtype": "method",
            "name": "_waitForOpenChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1,
            "description": "Contains the current version of Skylink Web SDK.",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "String",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 11,
            "description": "The list of <a href=\"#method_init\"><code>init()</code> method</a> ready states.",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE",
            "params": [
                {
                    "name": "INIT",
                    "description": "<small>Value <code>0</code></small>\n  The value of the state when <code>init()</code> has just started.",
                    "type": "Number"
                },
                {
                    "name": "LOADING",
                    "description": "<small>Value <code>1</code></small>\n  The value of the state when <code>init()</code> is authenticating App Key provided\n  (and with credentials if provided as well) with the Auth server.",
                    "type": "Number"
                },
                {
                    "name": "COMPLETED",
                    "description": "<small>Value <code>2</code></small>\n  The value of the state when <code>init()</code> has successfully authenticated with the Auth server.\n  Room session token is generated for joining the <code>defaultRoom</code> provided in <code>init()</code>.\n  <small>Room session token has to be generated each time User switches to a different Room\n  in <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the state when <code>init()</code> has failed authenticating with the Auth server.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 39,
            "description": "The list of <a href=\"#method_init\"><code>init()</code> method</a> ready state failure codes.",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE_ERROR",
            "params": [
                {
                    "name": "API_INVALID",
                    "description": "<small>Value <code>4001</code></small>\n  The value of the failure code when provided App Key in <code>init()</code> does not exists.\n  <small>To resolve this, check that the provided App Key exists in\n  <a href=\"https://console.temasys.io\">the Temasys Console</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_DOMAIN_NOT_MATCH",
                    "description": "<small>Value <code>4002</code></small>\n  The value of the failure code when <code>\"domainName\"</code> property in the App Key does not\n  match the accessing server IP address.\n  <small>To resolve this, contact our <a href=\"http://support.temasys.io\">support portal</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_CORS_DOMAIN_NOT_MATCH",
                    "description": "<small>Value <code>4003</code></small>\n  The value of the failure code when <code>\"corsurl\"</code> property in the App Key does not match accessing CORS.\n  <small>To resolve this, configure the App Key CORS in\n  <a href=\"https://console.temasys.io\">the Temasys Console</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_INVALID",
                    "description": "<small>Value <code>4004</code></small>\n  The value of the failure code when there is no [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n  present in the HTTP headers during the request to the Auth server present nor\n  <code>options.credentials.credentials</code> configuration provided in the <code>init()</code>.\n  <small>To resolve this, ensure that CORS are present in the HTTP headers during the request to the Auth server.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_NOT_MATCH",
                    "description": "<small>Value <code>4005</code></small>\n  The value of the failure code when the <code>options.credentials.credentials</code> configuration provided in the\n  <code>init()</code> does not match up with the <code>options.credentials.startDateTime</code>,\n  <code>options.credentials.duration</code> or that the <code>\"secret\"</code> used to generate\n  <code>options.credentials.credentials</code> does not match the App Key's <code>\"secret</code> property provided.\n  <small>To resolve this, check that the <code>options.credentials.credentials</code> is generated correctly and\n  that the <code>\"secret\"</code> used to generate it is from the App Key provided in the <code>init()</code>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_INVALID_PARENT_KEY",
                    "description": "<small>Value <code>4006</code></small>\n  The value of the failure code when the App Key provided does not belong to any existing App.\n  <small>To resolve this, check that the provided App Key exists in\n  <a href=\"https://console.temasys.io\">the Developer Console</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_NO_MEETING_RECORD_FOUND",
                    "description": "<small>Value <code>4010</code></small>\n  The value of the failure code when provided <code>options.credentials</code>\n  does not match any scheduled meetings available for the \"Persistent Room\" enabled App Key provided.\n  <small>See the <a href=\"http://support.temasys.io/support/solutions/articles/\n12000002811-using-the-persistent-room-feature-to-configure-meetings\">Persistent Room article</a> to learn more.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_OVER_SEAT_LIMIT",
                    "description": "<small>Value <code>4020</code></small>\n  The value of the failure code when App Key has reached its current concurrent users limit.\n  <small>To resolve this, use another App Key. To create App Keys dynamically, see the\n  <a href=\"https://temasys.atlassian.net/wiki/display/TPD/SkylinkAPI+-+Application+Resources\">Application REST API\n  docs</a> for more information.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_RETRIEVAL_FAILED",
                    "description": "<small>Value <code>4021</code></small>\n  The value of the failure code when App Key retrieval of authentication token fails.\n  <small>If this happens frequently, contact our <a href=\"http://support.temasys.io\">support portal</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "API_WRONG_ACCESS_DOMAIN",
                    "description": "<small>Value <code>5005</code></small>\n  The value of the failure code when App Key makes request to the incorrect Auth server.\n  <small>To resolve this, ensure that the <code>roomServer</code> is not configured. If this persists even without\n  <code>roomServer</code> configuration, contact our <a href=\"http://support.temasys.io\">support portal</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "XML_HTTP_REQUEST_ERROR",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the failure code when requesting to Auth server has timed out.",
                    "type": "Number"
                },
                {
                    "name": "NO_SOCKET_IO",
                    "description": "<small>Value <code>1</code></small>\n  The value of the failure code when dependency <a href=\"http://socket.io/download/\">Socket.IO client</a> is not loaded.\n  <small>To resolve this, ensure that the Socket.IO client dependency is loaded before the Skylink SDK.\n  You may use the provided Socket.IO client <a href=\"http://socket.io/download/\">CDN here</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "NO_XMLHTTPREQUEST_SUPPORT",
                    "description": "<small>Value <code>2</code></small>\n  The value of the failure code when <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">\n  XMLHttpRequest API</a> required to make request to Auth server is not supported.\n  <small>To resolve this, display in the Web UI to ask clients to switch to the list of supported browser\n  as <a href=\"https://github.com/Temasys/SkylinkJS/tree/0.6.14#supported-browsers\">listed in here</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "NO_WEBRTC_SUPPORT",
                    "description": "<small>Value <code>3</code></small>\n  The value of the failure code when <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/\">\n  RTCPeerConnection API</a> required for Peer connections is not supported.\n  <small>To resolve this, display in the Web UI to ask clients to switch to the list of supported browser\n  as <a href=\"https://github.com/Temasys/SkylinkJS/tree/0.6.14#supported-browsers\">listed in here</a>.\n  For <a href=\"http://confluence.temasys.com.sg/display/TWPP\">plugin supported browsers</a>, if the clients\n  does not have the plugin installed, there will be an installation toolbar that will prompt for installation\n  to support the RTCPeerConnection API.</small>",
                    "type": "Number"
                },
                {
                    "name": "NO_PATH",
                    "description": "<small>Value <code>4</code></small>\n  The value of the failure code when provided <code>init()</code> configuration has errors.",
                    "type": "Number"
                },
                {
                    "name": "ADAPTER_NO_LOADED",
                    "description": "<small>Value <code>7</code></small>\n  The value of the failure code when dependency <a href=\"https://github.com/Temasys/AdapterJS/\">AdapterJS</a>\n  is not loaded.\n  <small>To resolve this, ensure that the AdapterJS dependency is loaded before the Skylink dependency.\n  You may use the provided AdapterJS <a href=\"https://github.com/Temasys/AdapterJS/\">CDN here</a>.</small>",
                    "type": "Number"
                },
                {
                    "name": "PARSE_CODECS",
                    "description": "<small>Value <code>8</code></small>\n  The value of the failure code when codecs support cannot be parsed and retrieved.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 140,
            "description": "Spoofs the REGIONAL_SERVER to prevent errors on deployed apps except the fact this no longer works.\nAutomatic regional selection has already been implemented hence REGIONAL_SERVER is no longer useful.",
            "itemtype": "attribute",
            "name": "REGIONAL_SERVER",
            "type": "JSON",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 155,
            "description": "The list of User's priority weight schemes for <a href=\"#method_joinRoom\">\n<code>joinRoom()</code> method</a> connections.",
            "itemtype": "attribute",
            "name": "PRIORITY_WEIGHT_SCHEME",
            "params": [
                {
                    "name": "ENFORCE_OFFERER",
                    "description": "<small>Value <code>\"enforceOfferer\"</code></small>\n  The value of the priority weight scheme to enforce User as the offerer.",
                    "type": "String"
                },
                {
                    "name": "ENFORCE_ANSWERER",
                    "description": "<small>Value <code>\"enforceAnswerer\"</code></small>\n  The value of the priority weight scheme to enforce User as the answerer.",
                    "type": "String"
                },
                {
                    "name": "AUTO",
                    "description": "<small>Value <code>\"auto\"</code></small>\n  The value of the priority weight scheme to let User be offerer or answerer based on Signaling server selection.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 176,
            "description": "Function that generates an <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\">UUID</a> (Unique ID).",
            "itemtype": "method",
            "name": "generateUUID",
            "return": {
                "description": "Returns a generated UUID (Unique ID).",
                "type": "String"
            },
            "since": "0.5.9",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 195,
            "description": "Function that authenticates and initialises App Key used for Room connections.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "The configuration options.\n- When provided as a string, it's configured as <code>options.appKey</code>.",
                    "type": "JSON|String",
                    "props": [
                        {
                            "name": "appKey",
                            "description": "The App Key.\n  <small>By default, <code>init()</code> uses [HTTP CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n  authentication. For credentials based authentication, see the <code>options.credentials</code> configuration\n  below. You can know more about the <a href=\"http://support.temasys.io/support/solutions/articles/\n12000002712-authenticating-your-application-key-to-start-a-connection\">in the authentication methods article here</a>\n  for more details on the various authentication methods.</small>\n  <small>If you are using the Persistent Room feature for scheduled meetings, you will require to\n  use the credential based authentication. See the <a href=\"http://support.temasys.io/support\n/solutions/articles/12000002811-using-the-persistent-room-feature-to-configure-meetings\">Persistent Room article here\n  </a> for more information.</small>",
                            "type": "String"
                        },
                        {
                            "name": "defaultRoom",
                            "description": "The default Room to connect to when no <code>room</code> parameter\n   is provided in  <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>.\n- When not provided or is provided as an empty string, its value is <code>options.appKey</code>.\n  <small>Note that switching Rooms is not available when using <code>options.credentials</code> based authentication.\n  The Room that User will be connected to is the <code>defaultRoom</code> provided.</small>",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "roomServer",
                            "description": "The Auth server for debugging purposes to use.\n  <small>Note that this is a debugging feature and is only used when instructed for debugging purposes.</small>",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The flag if Peer connections should\n  trickle ICE for faster connectivity.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "<blockquote class=\"info\">\n  Note that for Edge browsers, this value is overriden as <code>false</code> due to its supports.\n  </blockquote> The flag if Datachannel connections should be enabled.\n  <small>This is required to be enabled for <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>,\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> and\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableTURNServer",
                            "description": "The flag if TURN ICE servers should\n  be used when constructing Peer connections to allow TURN connections when required and enabled for the App Key.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableSTUNServer",
                            "description": "The flag if STUN ICE servers should\n  be used when constructing Peer connections to allow TURN connections when required.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "forceTURN",
                            "description": "The flag if Peer connections should enforce\n  connections over the TURN server.\n  <small>This overrides <code>options.enableTURNServer</code> value to <code>true</code> and\n  <code>options.enableSTUNServer</code> value to <code>false</code>, <code>options.filterCandidatesType.host</code>\n  value to <code>true</code>, <code>options.filterCandidatesType.srflx</code> value to <code>true</code> and\n  <code>options.filterCandidatesType.relay</code> value to <code>false</code>.</small>\n  <small>Note that currently for MCU enabled Peer connections, the <code>options.filterCandidatesType</code>\n  configuration is not honoured as Peers connected with MCU is similar as a forced TURN connection. The flags\n  will act as if the value is <code>false</code> and ICE candidates will never be filtered regardless of the\n  <code>options.filterCandidatesType</code> configuration.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "usePublicSTUN",
                            "description": "The flag if publicly available STUN ICE servers should\n  be used if <code>options.enableSTUNServer</code> is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "TURNServerTransport",
                            "description": "<blockquote class=\"info\">\n  Note that configuring the protocol may not necessarily result in the desired network transports protocol\n  used in the actual TURN network traffic as it depends which protocol the browser selects and connects with.\n  This simply configures the TURN ICE server urls <code?transport=(protocol)</code> query option when constructing\n  the Peer connection. When all protocols are selected, the ICE servers urls are duplicated with all protocols.<br>\n  Note that for Edge browsers, this value is overriden as <code>UDP</code> due to its supports.\n  </blockquote> The option to configure the <code>?transport=</code>\n  query parameter in TURN ICE servers when constructing a Peer connections.\n- When not provided, its value is <code>ANY</code>.\n  [Rel: Skylink.TURN_TRANSPORT]",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "disableVideoFecCodecs",
                            "description": "<blockquote class=\"info\">\n  Note that this is an experimental flag and may cause disruptions in connections or connectivity issues when toggled,\n  and to prevent connectivity issues, these codecs will not be removed for MCU enabled Peer connections.\n  </blockquote> The flag if video FEC (Forward Error Correction)\n  codecs like ulpfec and red should be removed in sending session descriptions.\n  <small>This can be useful for debugging purposes to prevent redundancy and overheads in RTP encoding.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "disableComfortNoiseCodec",
                            "description": "<blockquote class=\"info\">\n  Note that this is an experimental flag and may cause disruptions in connections or connectivity issues when toggled.\n  </blockquote> The flag if audio\n  <a href=\"https://en.wikipedia.org/wiki/Comfort_noise\">Comfort Noise (CN)</a> codec should be removed\n  in sending session descriptions.\n  <small>This can be useful for debugging purposes to test preferred audio quality and feedback.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "disableREMB",
                            "description": "<blockquote class=\"info\">\n  Note that this is mainly used for debugging purposes and that it is an experimental flag, so\n  it may cause disruptions in connections or connectivity issues when toggled. </blockquote>\n  The flag if video REMB feedback packets should be disabled in sending session descriptions.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "credentials",
                            "description": "The credentials used for authenticating App Key with\n  credentials to retrieve the Room session token used for connection in <a href=\"#method_joinRoom\">\n  <code>joinRoom()</code> method</a>.\n  <small>Note that switching of Rooms is not allowed when using credentials based authentication, unless\n  <code>init()</code> is invoked again with a different set of credentials followed by invoking\n  the <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a>.</small>",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "startDateTime",
                                    "description": "The credentials User session in Room starting DateTime\n  in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 format</a>.",
                                    "type": "String"
                                },
                                {
                                    "name": "duration",
                                    "description": "The credentials User session in Room duration in hours.",
                                    "type": "Number"
                                },
                                {
                                    "name": "credentials",
                                    "description": "The generated credentials used to authenticate\n  the provided App Key with its <code>\"secret\"</code> property.\n  <blockquote class=\"details\"><h5>To generate the credentials:</h5><ol>\n  <li>Concatenate a string that consists of the Room name you provide in the <code>options.defaultRoom</code>,\n  the <code>options.credentials.duration</code> and the <code>options.credentials.startDateTime</code>.\n  <small>Example: <code>var concatStr = defaultRoom + \"_\" + duration + \"_\" + startDateTime;</code></small></li>\n  <li>Hash the concatenated string with the App Key <code>\"secret\"</code> property using\n  <a href=\"https://en.wikipedia.org/wiki/SHA-1\">SHA-1</a>.\n  <small>Example: <code>var hash = CryptoJS.HmacSHA1(concatStr, appKeySecret);</code></small>\n  <small>See the <a href=\"https://code.google.com/p/crypto-js/#HMAC\"><code>CryptoJS.HmacSHA1</code> library</a>.</small></li>\n  <li>Encode the hashed string using <a href=\"https://en.wikipedia.org/wiki/Base64\">base64</a>\n  <small>Example: <code>var b64Str = hash.toString(CryptoJS.enc.Base64);</code></small>\n  <small>See the <a href=\"https://code.google.com/p/crypto-js/#The_Cipher_Output\">CryptoJS.enc.Base64</a> library</a>.</small></li>\n  <li>Encode the base64 encoded string to replace special characters using UTF-8 encoding.\n  <small>Example: <code>var credentials = encodeURIComponent(base64String);</code></small>\n  <small>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/\nGlobal_Objects/encodeURIComponent\">encodeURIComponent() API</a>.</small></li></ol></blockquote>",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "audioFallback",
                            "description": "The flag if <a href=\"#method_getUserMedia\">\n  <code>getUserMedia()</code> method</a> should fallback to retrieve only audio Stream when\n  retrieving audio and video Stream fails.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceSSL",
                            "description": "The flag if HTTPS connections should be enforced\n  during request to Auth server and socket connections to Signaling server\n  when accessing <code>window.location.protocol</code> value is <code>\"http:\"</code>.\n  <small>By default, <code>\"https:\"</code> protocol connections uses HTTPS connections.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "audioCodec",
                            "description": "<blockquote class=\"info\">\n  Note that if the audio codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n  <code>\"answer\"</code> session description to prefer the codec.<br>\n  Note that for Edge browsers, this value is set as <code>OPUS</code> due to its supports.</blockquote>\n  The option to configure the preferred audio codec to use to encode sending audio data when available for Peer connection.\n- When not provided, its value is <code>AUTO</code>.\n  [Rel: Skylink.AUDIO_CODEC]",
                            "type": "String|JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "codec",
                                    "description": "The audio codec to prefer to encode sending audio data when available.\n  <small>The value must not be <code>AUTO</code>.</small>\n  [Rel: Skylink.AUDIO_CODEC]",
                                    "type": "String"
                                },
                                {
                                    "name": "samplingRate",
                                    "description": "The audio codec sampling to prefer to encode sending audio data when available.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "channels",
                                    "description": "The audio codec channels to prefer to encode sending audio data when available.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "videoCodec",
                            "description": "<blockquote class=\"info\">\n  Note that if the video codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n  <code>\"answer\"</code> session description to prefer the codec.<br>\n  Note that for Edge browsers, this value is set as <code>H264</code> due to its supports.</blockquote>\n  The option to configure the preferred video codec to use to encode sending video data when available for Peer connection.\n- When not provided, its value is <code>AUTO</code>.\n  [Rel: Skylink.VIDEO_CODEC]",
                            "type": "String|JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "codec",
                                    "description": "The video codec to prefer to encode sending audio data when available.\n  <small>The value must not be <code>AUTO</code>.</small>\n  [Rel: Skylink.VIDEO_CODEC]",
                                    "type": "String"
                                },
                                {
                                    "name": "samplingRate",
                                    "description": "The video codec sampling to prefer to encode sending video data when available.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "socketTimeout",
                            "description": "The timeout for each attempts for socket connection\n  with the Signaling server to indicate that connection has timed out and has failed to establish.\n  <small>Note that the mininum timeout value is <code>5000</code>. If less, this value will be <code>5000</code>.</small>\n  <small>Note that it is recommended to use <code>12000</code> as the lowest timeout value if Peers are connecting\n  using Polling transports to prevent connection errors.</small>",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20000"
                        },
                        {
                            "name": "forceTURNSSL",
                            "description": "<blockquote class=\"info\">\n  Note that currently Firefox does not support the TURNS protocol, and that if TURNS is required,\n  TURN ICE servers using port <code>443</code> will be used instead.<br>\n  Note that for Edge browsers, this value is overriden as <code>false</code> due to its supports and\n  only port <code>3478</code> is used.</blockquote>\n  The flag if TURNS protocol should be used when <code>options.enableTURNServer</code> is enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "filterCandidatesType",
                            "description": "<blockquote class=\"info\">\n  Note that this a debugging feature and there might be connectivity issues when toggling these flags.\n  </blockquote> The configuration options to filter the type of ICE candidates sent and received.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "host",
                                    "description": "The flag if local network ICE candidates should be filtered out.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "srflx",
                                    "description": "The flag if STUN ICE candidates should be filtered out.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "relay",
                                    "description": "The flag if TURN ICE candidates should be filtered out.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "throttleIntervals",
                            "description": "The configuration options to configure the throttling method timeouts.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "shareScreen",
                                    "description": "The interval timeout for\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> throttling in milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "10000"
                                },
                                {
                                    "name": "getUserMedia",
                                    "description": "The interval timeout for\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> throttling in milliseconds.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "refreshConnection",
                                    "description": "<blockquote class=\"info\">\n  Note that this throttling is only done for MCU enabled Peer connections with the\n  <code>options.mcuUseRenegoRestart</code> being set to <code>false</code>.\n  </blockquote> The interval timeout for <a href=\"#method_refreshConnection\">\n  <code>refreshConnection()</code> method</a> throttling in milliseconds.\n  <small>Note that there will be no throttling when <a href=\"#method_refreshConnection\">\n  <code>refreshConnection()</code> method</a> is called internally.</small>",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "5000"
                                }
                            ]
                        },
                        {
                            "name": "throttleShouldThrowError",
                            "description": "The flag if throttled methods should throw errors when\n  method is invoked less than the interval timeout value configured in <code>options.throttleIntervals</code>.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "mcuUseRenegoRestart",
                            "description": "<blockquote class=\"info\">\n  Note that this feature is currently is beta and for any enquiries on enabling and its support, please\n  contact <a href=\"http://support.temasys.io\">our support portal</a>.</blockquote>\n  The flag if <a href=\"#method_refreshConnection\"><code>\n  refreshConnection()</code> method</a> should renegotiate like non-MCU enabled Peer connection for MCU\n  enabled Peer connections instead of invoking <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> again.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "iceServer",
                            "description": "The ICE servers for debugging purposes to use.\n  - When defined as string, the value is considered as <code>[options.iceServer]</code>.\n  <small>Note that this is a debugging feature and is only used when instructed for debugging purposes.</small>",
                            "type": "String|Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "#index",
                                    "description": "The ICE server url for debugging purposes to use.",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "socketServer",
                            "description": "The Signaling server for debugging purposes to use.\n  - When defined as string, the value is considered as <code>{ url: options.socketServer }</code>.\n  <small>Note that this is a debugging feature and is only used when instructed for debugging purposes.</small>",
                            "type": "String|JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "url",
                                    "description": "The Signaling server URL for debugging purposes to use.",
                                    "type": "String"
                                },
                                {
                                    "name": "ports",
                                    "description": "The list of Signaling server ports for debugging purposes to use.\n  <small>If not defined, it will use the default list of ports specified.</small>",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "ports.#index",
                                    "description": "The Signaling server port to fallback and use for debugging purposes.",
                                    "type": "Number"
                                },
                                {
                                    "name": "protocol",
                                    "description": "The Signaling server protocol for debugging purposes to use.\n  <small>If not defined, it will use the default protocol specified.</small>",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "codecParams",
                            "description": "<blockquote class=\"info\">\n  Note that some of these parameters are mainly used for experimental or debugging purposes. Toggling any of\n  these feature may result in disruptions in connectivity.</blockquote>\n  The audio and video codecs parameters to configure.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "video",
                                    "description": "The video codecs parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.h264",
                                    "description": "The H264 video codec parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.h264.profileLevelId",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The H264 video codec base16 encoded string which indicates the H264 baseline, main, or the extended profiles.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "video.h264.levelAsymmetryAllowed",
                                    "description": "<blockquote class=\"info\">\n  Note that this is an experimental parameter which may result in connectivity issues when toggled.</blockquote>\n  The flag if streaming H264 sending video data should be encoded at a different level\n  from receiving video data from Peer encoding to User when Peer is the offerer.\n  <small>If Peer is the offerer instead of the User, the Peer's <code>peerInfo.config.priorityWeight</code> will be\n  higher than User's <code>peerInfo.config.priorityWeight</code>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "video.h264.packetizationMode",
                                    "description": "<blockquote class=\"info\">\n  Note that this is an experimental parameter which may result in connectivity issues when enabled. It is\n  advisable to turn off this feature off when receiving H264 decoders do not support the packetization mode,\n  which may result in a blank receiving video stream.</blockquote>\n  The flag to enable H264 video codec packetization mode, which splits video frames that are larger\n  for a RTP packet into RTP packet chunks.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp8",
                                    "description": "The VP8 video codec parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp8.maxFr",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only. Do not toggle this otherwise.</blockquote>\n  The maximum number of fps (frames per second) that the VP8 video codec decoder is capable of\n  decoding when receiving encoded video data packets.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp8.maxFs",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only. Do not toggle this otherwise.</blockquote>\n  The maximum number of frame size macroblocks that the VP8 video codec decoder is capable of\n  decoding when receiving encoded video data packets.\n  <small>The value has to have the width and height of the frame in macroblocks less than the value of\n  <code>parseInt(Math.sqrt(maxFs * 8))</code>. E.g. If the value is <code>1200</code>, it is capable of\n  support <code>640x480</code> frame width and height, which heights up to <code>1552px</code>\n  (<code>97</code> macroblocks value.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp9",
                                    "description": "The VP9 video codec parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp9.maxFr",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only. Do not toggle this otherwise.</blockquote>\n  The maximum number of fps (frames per second) that the VP9 video codec decoder is capable of\n  decoding when receiving encoded video data packets.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.vp9.maxFs",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only. Do not toggle this otherwise.</blockquote>\n  The maximum number of frame size macroblocks that the VP9 video codec decoder is capable of\n  decoding when receiving encoded video data packets.\n  <small>The value has to have the width and height of the frame in macroblocks less than the value of\n  <code>parseInt(Math.sqrt(maxFs * 8))</code>. E.g. If the value is <code>1200</code>, it is capable of\n  support <code>640x480</code> frame width and height, which heights up to <code>1552px</code>\n  (<code>97</code> macroblocks value.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "audio",
                                    "description": "The audio codecs parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "audio.opus",
                                    "description": "<blockquote class=\"info\">\n  Note that this is only applicable to OPUS audio codecs with a sampling rate of <code>48000</code> Hz (hertz).\n  </blockquote> The OPUS audio codec parameters to configure.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "audio.opus.stereo",
                                    "description": "The flag if OPUS audio codec stereo band\n  should be configured for sending encoded audio data.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.opus.usedtx",
                                    "description": "<blockquote class=\"info\">\n  Note that this feature might not work depending on the browser support and implementation.</blockquote>\n  The flag if OPUS audio codec should enable DTX (Discontinuous Transmission) for sending encoded audio data.\n  <small>This might help to reduce bandwidth as it reduces the bitrate during silence or background noise, and\n  goes hand-in-hand with the <code>options.voiceActivityDetection</code> flag in <a href=\"#method_joinRoom\">\n  <code>joinRoom()</code> method</a>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.opus.useinbandfec",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The flag if OPUS audio codec has the capability to take advantage of the in-band FEC\n  (Forward Error Correction) when sending encoded audio data.\n  <small>This helps to reduce the harm of packet loss by encoding information about the previous packet loss.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.opus.maxplaybackrate",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The OPUS audio codec maximum output sampling rate in Hz (hertz) that is is capable of receiving\n  decoded audio data, to adjust to the hardware limitations and ensure that any sending audio data\n  would not encode at a higher sampling rate specified by this.\n  <small>This value must be between <code>8000</code> to <code>48000</code>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "minptime",
                                    "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The OPUS audio codec receiving audio data decoder minimum length of time in milleseconds should be\n  encapsulated in a single received encoded audio data packet.\n  <small>This value must be between <code>3</code> to <code>120</code></small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "priorityWeightScheme",
                            "description": "<blockquote class=\"info\">\n  Note that this parameter should only be used for debugging purposes only and may not work when\n  internals change.</blockquote> The User's priority weight to enforce User as offerer or answerer.\n- When not provided, its value is <code>AUTO</code>.\n  [Rel: Skylink.PRIORITY_WEIGHT_SCHEME]",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_readyStateChange\">\n  <code>readyStateChange</code> event</a> <code>state</code> parameter payload value\n  as <code>COMPLETED</code> for request success.</small>\n  [Rel: Skylink.READY_STATE_CHANGE]",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n- When defined as string, it's the error when required App Key is not provided.\n  <small>Defined as <code>null</code> when there are no errors in request</small>",
                            "type": "JSON|String",
                            "props": [
                                {
                                    "name": "errorCode",
                                    "description": "The <a href=\"#event_readyStateChange\"><code>readyStateChange</code>\n  event</a> <code>error.errorCode</code> parameter payload value.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                                    "type": "Number"
                                },
                                {
                                    "name": "error",
                                    "description": "The <a href=\"#event_readyStateChange\"><code>readyStateChange</code>\n  event</a> <code>error.content</code> parameter payload value.",
                                    "type": "Error|String"
                                },
                                {
                                    "name": "status",
                                    "description": "The <a href=\"#event_readyStateChange\"><code>readyStateChange</code>\n  event</a> <code>error.status</code> parameter payload value.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "serverUrl",
                                    "description": "The constructed REST URL requested to Auth server.",
                                    "type": "String"
                                },
                                {
                                    "name": "readyState",
                                    "description": "The current ready state.\n  [Rel: Skylink.READY_STATE_CHANGE]",
                                    "type": "Number"
                                },
                                {
                                    "name": "selectedRoom",
                                    "description": "The Room based on the current Room session token retrieved for.",
                                    "type": "String"
                                },
                                {
                                    "name": "appKey",
                                    "description": "The configured value of the <code>options.appKey</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "defaultRoom",
                                    "description": "The configured value of the <code>options.defaultRoom</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "roomServer",
                                    "description": "The configured value of the <code>options.roomServer</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "enableIceTrickle",
                                    "description": "The configured value of the <code>options.enableIceTrickle</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "enableDataChannel",
                                    "description": "The configured value of the <code>options.enableDataChannel</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "enableTURNServer",
                                    "description": "The configured value of the <code>options.enableTURNServer</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "enableSTUNServer",
                                    "description": "The configured value of the <code>options.enableSTUNServer</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "TURNTransport",
                                    "description": "The configured value of the <code>options.TURNServerTransport</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "audioFallback",
                                    "description": "The configured value of the <code>options.audioFallback</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "forceSSL",
                                    "description": "The configured value of the <code>options.forceSSL</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "audioCodec",
                                    "description": "The configured value of the <code>options.audioCodec</code>.",
                                    "type": "String|JSON"
                                },
                                {
                                    "name": "videoCodec",
                                    "description": "The configured value of the <code>options.videoCodec</code>.",
                                    "type": "String|JSON"
                                },
                                {
                                    "name": "socketTimeout",
                                    "description": "The configured value of the <code>options.socketTimeout</code>.",
                                    "type": "Number"
                                },
                                {
                                    "name": "forceTURNSSL",
                                    "description": "The configured value of the <code>options.forceTURNSSL</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "forceTURN",
                                    "description": "The configured value of the <code>options.forceTURN</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "usePublicSTUN",
                                    "description": "The configured value of the <code>options.usePublicSTUN</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "disableVideoFecCodecs",
                                    "description": "The configured value of the <code>options.disableVideoFecCodecs</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "disableComfortNoiseCodec",
                                    "description": "The configured value of the <code>options.disableComfortNoiseCodec</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "disableREMB",
                                    "description": "The configured value of the <code>options.disableREMB</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "filterCandidatesType",
                                    "description": "The configured value of the <code>options.filterCandidatesType</code>.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "throttleIntervals",
                                    "description": "The configured value of the <code>options.throttleIntervals</code>.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "throttleShouldThrowError",
                                    "description": "The configured value of the <code>options.throttleShouldThrowError</code>.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "mcuUseRenegoRestart",
                                    "description": "The configured value of the <code>options.mcuUseRenegoRestart</code>.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "iceServer",
                                    "description": "The configured value of the <code>options.iceServer</code>.\n  <small>See the <code>.urls</code> property in this object for configured value if defined.</small>",
                                    "type": "JSON"
                                },
                                {
                                    "name": "socketServer",
                                    "description": "The configured value of the <code>options.socketServer</code>.",
                                    "type": "JSON|String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Using CORS authentication and connection to default Room\n  skylinkDemo(appKey, function (error, success) {\n    if (error) return;\n    skylinkDemo.joinRoom(); // Goes to default Room\n  });\n\n  // Example 2: Using CORS authentication and connection to a different Room\n  skylinkDemo(appKey, function (error, success) {\n    skylinkDemo.joinRoom(\"testxx\"); // Goes to \"testxx\" Room\n  });\n\n  // Example 3: Using credentials authentication and connection to only default Room\n  var defaultRoom   = \"test\",\n      startDateTime = (new Date()).toISOString(),\n      duration      = 1, // Allows only User session to stay for 1 hour\n      appKeySecret  = \"xxxxxxx\",\n      hash          = CryptoJS.HmacSHA1(defaultRoom + \"_\" + duration + \"_\" + startDateTime, appKeySecret);\n      credentials   = encodeURIComponent(hash.toString(CryptoJS.enc.Base64));\n\n  skylinkDemo({\n    defaultRoom: defaultRoom,\n    appKey: appKey,\n    credentials: {\n      duration: duration,\n      startDateTime: startDateTime,\n      credentials: credentials\n    }\n  }, function (error, success) {\n    if (error) return;\n    skylinkDemo.joinRoom(); // Goes to default Room (switching to different Room is not allowed for credentials authentication)\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If parameter <code>options</code> is not provided: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Checks if dependecies and browser APIs are available. <ol><li>If AdapterJS is not loaded: <ol>\n  <li><a href=\"#event_readyStateChange\"><code>readyStateChange</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code> and <code>error.errorCode</code> as\n  <code>ADAPTER_NO_LOADED</code>.</li><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>If socket.io-client is not loaded: <ol><li><a href=\"#event_readyStateChange\">\n  <code>readyStateChange</code> event</a> triggers parameter payload <code>state</code>\n  as <code>ERROR</code> and <code>error.errorCode</code> as <code>NO_SOCKET_IO</code>.</li>\n  <li><b>ABORT</b> and return error. </li></ol></li>\n  <li>If XMLHttpRequest API is not available: <ol><li><a href=\"#event_readyStateChange\">\n  <code>readyStateChange</code> event</a> triggers parameter payload <code>state</code>\n  as <code>ERROR</code> and <code>error.errorCode</code> as <code>NO_XMLHTTPREQUEST_SUPPORT</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li><li>If WebRTC is not supported by device: <ol>\n  <li><a href=\"#event_readyStateChange\"><code>readyStateChange</code> event</a> triggers parameter\n  payload <code>state</code> as <code>ERROR</code> and <code>error.errorCode</code> as\n  <code>NO_WEBRTC_SUPPORT</code>.</li><li><b>ABORT</b> and return error.</li></ol></li></ol></li>\n  <li>Retrieves Room session token from Auth server. <ol>\n  <li><a href=\"#event_readyStateChange\"><code>readyStateChange</code> event</a> triggers\n  parameter payload <code>state</code> as <code>LOADING</code>.</li>\n  <li>If retrieval was successful: <ol><li><a href=\"#event_readyStateChange\"><code>readyStateChange</code> event</a>\n  triggers parameter payload <code>state</code> as <code>COMPLETED</code>.</li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_readyStateChange\"><code>readyStateChange</code> event</a> triggers parameter\n  payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1055,
            "description": "Starts retrieving Room credentials information from API server.",
            "itemtype": "method",
            "name": "_requestServerInfo",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1129,
            "description": "Parses the Room credentials information retrieved from API server.",
            "itemtype": "method",
            "name": "_parseInfo",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1199,
            "description": "Loads and checks the dependencies if they are loaded correctly.",
            "itemtype": "method",
            "name": "_loadInfo",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1330,
            "description": "Starts initialising for Room credentials for room name provided in <code>joinRoom()</code> method.",
            "itemtype": "method",
            "name": "_initSelectedRoom",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 1,
            "description": "The list of the SDK <code>console</code> API log levels.",
            "itemtype": "attribute",
            "name": "LOG_LEVEL",
            "params": [
                {
                    "name": "DEBUG",
                    "description": "<small>Value <code>4</code></small>\n  The value of the log level that displays <code>console</code> <code>debug</code>,\n  <code>log</code>, <code>info</code>, <code>warn</code> and <code>error</code> logs.",
                    "type": "Number"
                },
                {
                    "name": "LOG",
                    "description": "<small>Value <code>3</code></small>\n  The value of the log level that displays only <code>console</code> <code>log</code>,\n  <code>info</code>, <code>warn</code> and <code>error</code> logs.",
                    "type": "Number"
                },
                {
                    "name": "INFO",
                    "description": "<small>Value <code>2</code></small>\n  The value of the log level that displays only <code>console</code> <code>info</code>,\n  <code>warn</code> and <code>error</code> logs.",
                    "type": "Number"
                },
                {
                    "name": "WARN",
                    "description": "<small>Value <code>1</code></small>\n  The value of the log level that displays only <code>console</code> <code>warn</code>\n  and <code>error</code> logs.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>0</code></small>\n  The value of the log level that displays only <code>console</code> <code>error</code> logs.",
                    "type": "Number"
                },
                {
                    "name": "NONE",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the log level that displays no logs.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 34,
            "description": "Stores the log message starting header string.\nE.g. \"<header> - <the log message>\".",
            "itemtype": "attribute",
            "name": "_LOG_KEY",
            "type": "String",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 46,
            "description": "Stores the list of available SDK log levels.",
            "itemtype": "attribute",
            "name": "_LOG_LEVELS",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 57,
            "description": "Stores the current SDK log level.\nDefault is ERROR (<code>0</code>).",
            "itemtype": "attribute",
            "name": "_logLevel",
            "type": "String",
            "default": "0",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 70,
            "description": "Stores the flag if debugging mode is enabled.\nThis manipulates the SkylinkLogs interface.",
            "itemtype": "attribute",
            "name": "_enableDebugMode",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 83,
            "description": "Stores the flag if logs should be stored in SkylinkLogs interface.",
            "itemtype": "attribute",
            "name": "_enableDebugStack",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 95,
            "description": "Stores the flag if logs should trace if available.\nThis uses the <code>console.trace</code> API.",
            "itemtype": "attribute",
            "name": "_enableDebugTrace",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 108,
            "description": "Stores the logs used for SkylinkLogs object.",
            "itemtype": "attribute",
            "name": "_storedLogs",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 119,
            "description": "Function that gets the stored logs.",
            "itemtype": "method",
            "name": "_getStoredLogsFn",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 140,
            "description": "Function that clears the stored logs.",
            "itemtype": "method",
            "name": "_clearAllStoredLogsFn",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 152,
            "description": "Function that prints in the Web Console interface the stored logs.",
            "itemtype": "method",
            "name": "_printAllStoredLogsFn",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 176,
            "description": "<blockquote class=\"info\">\n  To utilise and enable the <code>SkylinkLogs</code> API functionalities, the\n  <a href=\"#method_setDebugMode\"><code>setDebugMode()</code> method</a>\n  <code>options.storeLogs</code> parameter has to be enabled.\n</blockquote>\nThe object interface to manage the SDK <a href=\"https://developer.mozilla.org/en/docs/Web/API/console\">\nJavascript Web Console</a> logs.",
            "itemtype": "property",
            "name": "SkylinkLogs",
            "type": "JSON",
            "global": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 191,
            "description": "Function that gets the current stored SDK <code>console</code> logs.",
            "itemtype": "property",
            "name": "SkylinkLogs.getLogs",
            "return": {
                "description": "The array of stored logs.<ul>\n  <li><code><#index></code><var><b>{</b>Array<b>}</b></var><p>The stored log item.</p><ul>\n  <li><code>0</code><var><b>{</b>Date<b>}</b></var><p>The DateTime of when the log was stored.</p></li>\n  <li><code>1</code><var><b>{</b>String<b>}</b></var><p>The log level. [Rel: Skylink.LOG_LEVEL]</p></li>\n  <li><code>2</code><var><b>{</b>String<b>}</b></var><p>The log message.</p></li>\n  <li><code>3</code><var><b>{</b>Any<b>}</b></var><span class=\"label\">Optional</span><p>The log message object.\n  </p></li></ul></li></ul>",
                "type": "Array"
            },
            "example": [
                "\n // Example 1: Get logs of specific level\n var debugLogs = SkylinkLogs.getLogs(skylinkDemo.LOG_LEVEL.DEBUG);\n\n // Example 2: Get all the logs\n var allLogs = SkylinkLogs.getLogs();"
            ],
            "type": "Function",
            "global": "true",
            "triggerforprophacknone": "true",
            "since": "0.5.5",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "logLevel",
                    "description": "The specific log level of logs to return.\n- When not provided or that the level does not exists, it will return all logs of all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 218,
            "description": "Function that clears all the current stored SDK <code>console</code> logs.",
            "itemtype": "property",
            "name": "SkylinkLogs.clearAllLogs",
            "type": "Function",
            "example": [
                "\n  // Example 1: Clear all the logs\n  SkylinkLogs.clearAllLogs();"
            ],
            "global": "true",
            "triggerforprophacknone": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 232,
            "description": "Function that prints all the current stored SDK <code>console</code> logs into the\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/console\">Javascript Web Console</a>.",
            "itemtype": "property",
            "name": "SkylinkLogs.printAllLogs",
            "type": "Function",
            "example": [
                "\n  // Example 1: Print all the logs\n  SkylinkLogs.printAllLogs();"
            ],
            "global": "true",
            "triggerforprophacknone": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 248,
            "description": "Function that handles the logs received and prints in the Web Console interface according to the log level set.",
            "itemtype": "method",
            "name": "_logFn",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 317,
            "description": "Stores the logging functions.",
            "itemtype": "attribute",
            "name": "log",
            "params": [
                {
                    "name": "debug",
                    "description": "The function that handles the DEBUG level logs.",
                    "type": "Function"
                },
                {
                    "name": "log",
                    "description": "The function that handles the LOG level logs.",
                    "type": "Function"
                },
                {
                    "name": "info",
                    "description": "The function that handles the INFO level logs.",
                    "type": "Function"
                },
                {
                    "name": "warn",
                    "description": "The function that handles the WARN level logs.",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The function that handles the ERROR level logs.",
                    "type": "Function"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "scoped": "true",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 353,
            "description": "Function that configures the level of <code>console</code> API logs to be printed in the\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/console\">Javascript Web Console</a>.",
            "itemtype": "method",
            "name": "setLogLevel",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The specific log level of logs to return.\n- When not provided or that the level does not exists, it will not overwrite the current log level.\n  <small>By default, the initial log level is <code>ERROR</code>.</small>\n  [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Print all of the console.debug, console.log, console.info, console.warn and console.error logs.\n  skylinkDemo.setLogLevel(skylinkDemo.LOG_LEVEL.DEBUG);\n\n  // Example 2: Print only the console.log, console.info, console.warn and console.error logs.\n  skylinkDemo.setLogLevel(skylinkDemo.LOG_LEVEL.LOG);\n\n  // Example 3: Print only the console.info, console.warn and console.error logs.\n  skylinkDemo.setLogLevel(skylinkDemo.LOG_LEVEL.INFO);\n\n  // Example 4: Print only the console.warn and console.error logs.\n  skylinkDemo.setLogLevel(skylinkDemo.LOG_LEVEL.WARN);\n\n  // Example 5: Print only the console.error logs. This is done by default.\n  skylinkDemo.setLogLevel(skylinkDemo.LOG_LEVEL.ERROR);"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 393,
            "description": "Function that configures the debugging mode of the SDK.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "options",
                    "description": "The debugging options.\n- When provided as a boolean, this sets both <code>options.trace</code>\n  and <code>options.storeLogs</code> to its boolean value.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "trace",
                            "description": "The flag if SDK <code>console</code> logs\n  should output as <code>console.trace()</code> logs for tracing the <code>Function</code> call stack.\n  <small>Note that the <code>console.trace()</code> output logs is determined by the log level set\n  <a href=\"#method_setLogLevel\"><code>setLogLevel()</code> method</a>.</small>\n  <small>If <code>console.trace()</code> API is not supported, <code>setDebugMode()</code>\n  will fallback to use <code>console.log()</code> API.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storeLogs",
                            "description": "The flag if SDK should store the <code>console</code> logs.\n  <small>This is required to be enabled for <a href=\"#prop_SkylinkLogs\"><code>SkylinkLogs</code> API</a>.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Enable both options.storeLogs and options.trace\n  skylinkDemo.setDebugMode(true);\n\n  // Example 2: Enable only options.storeLogs\n  skylinkDemo.setDebugMode({ storeLogs: true });\n\n  // Example 3: Disable debugging mode\n  skylinkDemo.setDebugMode();"
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 2,
            "description": "Event triggered when socket connection to Signaling server has opened.",
            "itemtype": "event",
            "name": "channelOpen",
            "params": [
                {
                    "name": "session",
                    "description": "The socket connection session information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "serverUrl",
                            "description": "The socket connection Signaling url used.",
                            "type": "String"
                        },
                        {
                            "name": "transportType",
                            "description": "The socket connection transport type used.",
                            "type": "String"
                        },
                        {
                            "name": "socketOptions",
                            "description": "The socket connection options.",
                            "type": "JSON"
                        },
                        {
                            "name": "attempts",
                            "description": "The socket connection current reconnection attempts.",
                            "type": "Number"
                        },
                        {
                            "name": "finalAttempts",
                            "description": "The socket connection current last attempts\n  for the last available transports and port.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 17,
            "description": "Event triggered when socket connection to Signaling server has closed.",
            "itemtype": "event",
            "name": "channelClose",
            "params": [
                {
                    "name": "session",
                    "description": "The socket connection session information.\n  <small>Object signature matches the <code>session</code> parameter payload received in the\n  <a href=\"#event_channelOpen\"><code>channelOpen</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 28,
            "description": "<blockquote class=\"info\">\n  Note that this is used only for SDK developer purposes.\n</blockquote>\nEvent triggered when receiving socket message from the Signaling server.",
            "itemtype": "event",
            "name": "channelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The socket message object.",
                    "type": "JSON"
                },
                {
                    "name": "session",
                    "description": "The socket connection session information.\n  <small>Object signature matches the <code>session</code> parameter payload received in the\n  <a href=\"#event_channelOpen\"><code>channelOpen</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 43,
            "description": "<blockquote class=\"info\">\n  This may be caused by Javascript errors in the event listener when subscribing to events.<br>\n  It may be resolved by checking for code errors in your Web App in the event subscribing listener.<br>\n  <code>skylinkDemo.on(\"eventName\", function () { // Errors here });</code>\n</blockquote>\nEvent triggered when socket connection encountered exception.",
            "itemtype": "event",
            "name": "channelError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error|String"
                },
                {
                    "name": "session",
                    "description": "The socket connection session information.\n  <small>Object signature matches the <code>session</code> parameter payload received in the\n  <a href=\"#event_channelOpen\"><code>channelOpen</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 60,
            "description": "Event triggered when attempting to establish socket connection to Signaling server when failed.",
            "itemtype": "event",
            "name": "channelRetry",
            "params": [
                {
                    "name": "fallbackType",
                    "description": "The current fallback state.\n  [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                },
                {
                    "name": "currentAttempt",
                    "description": "The current socket reconnection attempt.",
                    "type": "Number"
                },
                {
                    "name": "session",
                    "description": "The socket connection session information.\n  <small>Object signature matches the <code>session</code> parameter payload received in the\n  <a href=\"#event_channelOpen\"><code>channelOpen</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 74,
            "description": "Event triggered when attempt to establish socket connection to Signaling server has failed.",
            "itemtype": "event",
            "name": "socketError",
            "params": [
                {
                    "name": "errorCode",
                    "description": "The socket connection error code.\n  [Rel: Skylink.SOCKET_ERROR]",
                    "type": "Number"
                },
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error|String|Number"
                },
                {
                    "name": "type",
                    "description": "The fallback state of the socket connection attempt.\n  [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                },
                {
                    "name": "session",
                    "description": "The socket connection session information.\n  <small>Object signature matches the <code>session</code> parameter payload received in the\n  <a href=\"#event_channelOpen\"><code>channelOpen</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 90,
            "description": "Event triggered when <a href=\"#method_init\"><code>init()</code> method</a> ready state changes.",
            "itemtype": "event",
            "name": "readyStateChange",
            "params": [
                {
                    "name": "readyState",
                    "description": "The current <code>init()</code> ready state.\n  [Rel: Skylink.READY_STATE_CHANGE]",
                    "type": "Number"
                },
                {
                    "name": "error",
                    "description": "The error result.\n  <small>Defined only when <code>state</code> is <code>ERROR</code>.</small>",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "status",
                            "description": "The HTTP status code when failed.",
                            "type": "Number"
                        },
                        {
                            "name": "errorCode",
                            "description": "The ready state change failure code.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                            "type": "Number"
                        },
                        {
                            "name": "content",
                            "description": "The error object.",
                            "type": "Error"
                        }
                    ]
                },
                {
                    "name": "room",
                    "description": "The Room to The Room to retrieve session token for.",
                    "type": "String"
                }
            ],
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 107,
            "description": "Event triggered when a Peer connection establishment state has changed.",
            "itemtype": "event",
            "name": "handshakeProgress",
            "params": [
                {
                    "name": "state",
                    "description": "The current Peer connection establishment state.\n  [Rel: Skylink.HANDSHAKE_PROGRESS]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> is <code>ERROR</code>.</small>",
                    "type": "Error|String",
                    "optional": true
                }
            ],
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 120,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nEvent triggered when a Peer connection ICE gathering state has changed.",
            "itemtype": "event",
            "name": "candidateGenerationState",
            "params": [
                {
                    "name": "state",
                    "description": "The current Peer connection ICE gathering state.\n  [Rel: Skylink.CANDIDATE_GENERATION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 135,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nEvent triggered when a Peer connection session description exchanging state has changed.",
            "itemtype": "event",
            "name": "peerConnectionState",
            "params": [
                {
                    "name": "state",
                    "description": "The current Peer connection session description exchanging state.\n  [Rel: Skylink.PEER_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 150,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n</blockquote>\nEvent triggered when a Peer connection ICE connection state has changed.",
            "itemtype": "event",
            "name": "iceConnectionState",
            "params": [
                {
                    "name": "state",
                    "description": "The current Peer connection ICE connection state.\n  [Rel: Skylink.ICE_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 165,
            "description": "Event triggered when retrieval of Stream failed.",
            "itemtype": "event",
            "name": "mediaAccessError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "Error|String"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if event occurred during\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> and not\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.",
                    "type": "Boolean"
                },
                {
                    "name": "isAudioFallbackError",
                    "description": "The flag if event occurred during\n  retrieval of audio tracks only when <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>\n  had failed to retrieve both audio and video tracks.",
                    "type": "Boolean"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 180,
            "description": "Event triggered when Stream retrieval fallback state has changed.",
            "itemtype": "event",
            "name": "mediaAccessFallback",
            "params": [
                {
                    "name": "error",
                    "description": "The error result.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object.",
                            "type": "Error|String"
                        },
                        {
                            "name": "diff",
                            "description": "The list of excepted but received audio and video tracks in Stream.\n  <small>Defined only when <code>state</code> payload is <code>FALLBACKED</code>.</small>",
                            "type": "JSON",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "video",
                                    "description": "The expected and received video tracks.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "video.expected",
                                    "description": "The expected video tracks.",
                                    "type": "Number"
                                },
                                {
                                    "name": "video.received",
                                    "description": "The received video tracks.",
                                    "type": "Number"
                                },
                                {
                                    "name": "audio",
                                    "description": "The expected and received audio tracks.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "audio.expected",
                                    "description": "The expected audio tracks.",
                                    "type": "Number"
                                },
                                {
                                    "name": "audio.received",
                                    "description": "The received audio tracks.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "state",
                    "description": "The fallback state.\n  [Rel: Skylink.MEDIA_ACCESS_FALLBACK_STATE]",
                    "type": "Number"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if event occurred during\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> and not\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.",
                    "type": "Boolean"
                },
                {
                    "name": "isAudioFallback",
                    "description": "The flag if event occurred during\n  retrieval of audio tracks only when <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>\n  had failed to retrieve both audio and video tracks.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.\n  <small>Defined only when <code>state</code> payload is <code>FALLBACKED</code>.</small>",
                    "type": "String"
                }
            ],
            "since": "0.6.3",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 208,
            "description": "Event triggered when retrieval of Stream is successful.",
            "itemtype": "event",
            "name": "mediaAccessSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "The Stream object.\n  <small>To attach it to an element: <code>attachMediaStream(videoElement, stream);</code>.</small>",
                    "type": "MediaStream"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if event occurred during\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> and not\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.",
                    "type": "Boolean"
                },
                {
                    "name": "isAudioFallback",
                    "description": "The flag if event occurred during\n  retrieval of audio tracks only when <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>\n  had failed to retrieve both audio and video tracks.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.",
                    "type": "String"
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 225,
            "description": "Event triggered when retrieval of Stream is required to complete <a href=\"#method_joinRoom\">\n<code>joinRoom()</code> method</a> request.",
            "itemtype": "event",
            "name": "mediaAccessRequired",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 234,
            "description": "Event triggered when Stream has stopped streaming.",
            "itemtype": "event",
            "name": "mediaAccessStopped",
            "params": [
                {
                    "name": "isScreensharing",
                    "description": "The flag if event occurred during\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> and not\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.",
                    "type": "Boolean"
                },
                {
                    "name": "isAudioFallback",
                    "description": "The flag if event occurred during\n  retrieval of audio tracks only when <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>\n  had failed to retrieve both audio and video tracks.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.",
                    "type": "String"
                }
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 249,
            "description": "Event triggered when a Peer joins the room.",
            "itemtype": "event",
            "name": "peerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "userData",
                            "description": "The Peer current custom data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "settings",
                            "description": "The Peer sending Stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "data",
                                    "description": "The flag if Peer has any Datachannel connections enabled.\n  <small>If <code>isSelf</code> value is <code>true</code>, this determines if User allows\n  Datachannel connections, else if value is <code>false</code>, this determines if Peer has any active\n  Datachannel connections (where <a href=\"#event_dataChannelState\"><code>dataChannelState</code> event</a>\n  triggers <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n  <code>MESSAGING</code> for Peer) with Peer.</small>",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "audio",
                                    "description": "The Peer Stream audio settings.\n  <small>When defined as <code>false</code>, it means there is no audio being sent from Peer.</small>\n  <small>When defined as <code>true</code>, the <code>peerInfo.settings.audio.stereo</code> value is\n  considered as <code>false</code> and the <code>peerInfo.settings.audio.exactConstraints</code>\n  value is considered as <code>false</code>.</small>",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "The flag if stereo band is configured\n  when encoding audio codec is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for receiving audio data.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "audio.usedtx",
                                    "description": "<blockquote class=\"info\">\n  Note that this feature might not work depending on the browser support and implementation.</blockquote>\n  The flag if DTX (Discontinuous Transmission) is configured when encoding audio codec\n  is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n  <small>This might help to reduce bandwidth it reduces the bitrate during silence or background noise.</small>\n  <small>When not defined, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.useinbandfec",
                                    "description": "<blockquote class=\"info\">\n  Note that this feature might not work depending on the browser support and implementation.</blockquote>\n  The flag if capability to take advantage of in-band FEC (Forward Error Correction) is\n  configured when encoding audio codec is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n  <small>This might help to reduce the harm of packet loss by encoding information about the previous packet.</small>\n  <small>When not defined, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "audio.maxplaybackrate",
                                    "description": "<blockquote class=\"info\">\n  Note that this feature might not work depending on the browser support and implementation.</blockquote>\n  The maximum output sampling rate rendered in Hertz (Hz) when encoding audio codec is\n  <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n  <small>This value must be between <code>8000</code> to <code>48000</code>.</small>\n  <small>When not defined, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "audio.echoCancellation",
                                    "description": "The flag if echo cancellation is enabled for audio tracks.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "audio.optional",
                                    "description": "The Peer Stream <code>navigator.getUserMedia()</code> API\n  <code>audio: { optional [..] }</code> property.",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "audio.deviceId",
                                    "description": "The Peer Stream audio track source ID of the device used.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "audio.exactConstraints",
                                    "description": "The flag if Peer Stream audio track is sending exact\n  requested values of <code>peerInfo.settings.audio.deviceId</code> when provided.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video",
                                    "description": "The Peer Stream video settings.\n  <small>When defined as <code>false</code>, it means there is no video being sent from Peer.</small>\n  <small>When defined as <code>true</code>, the <code>peerInfo.settings.video.screenshare</code> value is\n  considered as <code>false</code>  and the <code>peerInfo.settings.video.exactConstraints</code>\n  value is considered as <code>false</code>.</small>",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "The Peer Stream video resolution.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "The Peer Stream video resolution width or\n  video resolution width settings.\n  <small>When defined as a JSON object, it is the user set resolution width settings with (<code>\"min\"</code> or\n  <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).</small>",
                                    "type": "Number|JSON"
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "The Peer Stream video resolution height or\n  video resolution height settings.\n  <small>When defined as a JSON object, it is the user set resolution height settings with (<code>\"min\"</code> or\n  <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).</small>",
                                    "type": "Number|JSON"
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "The Peer Stream video\n  <a href=\"https://en.wikipedia.org/wiki/Frame_rate\">frameRate</a> per second (fps) or video frameRate settings.\n  <small>When defined as a JSON object, it is the user set frameRate settings with (<code>\"min\"</code> or\n  <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).</small>",
                                    "type": "Number|JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.screenshare",
                                    "description": "The flag if Peer Stream is a screensharing Stream.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video.optional",
                                    "description": "The Peer Stream <code>navigator.getUserMedia()</code> API\n  <code>video: { optional [..] }</code> property.",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "video.deviceId",
                                    "description": "The Peer Stream video track source ID of the device used.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "video.exactConstraints",
                                    "description": "The flag if Peer Stream video track is sending exact\n  requested values of <code>peerInfo.settings.video.resolution</code>,\n  <code>peerInfo.settings.video.frameRate</code> and <code>peerInfo.settings.video.deviceId</code>\n  when provided.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video.facingMode",
                                    "description": "The Peer Stream video camera facing mode.\n  <small>When defined as a JSON object, it is the user set facingMode settings with (<code>\"min\"</code> or\n  <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).</small>",
                                    "type": "String|JSON",
                                    "optional": true
                                },
                                {
                                    "name": "bandwidth",
                                    "description": "The maximum streaming bandwidth sent from Peer.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "bandwidth.audio",
                                    "description": "The maximum audio streaming bandwidth sent from Peer.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "bandwidth.video",
                                    "description": "The maximum video streaming bandwidth sent from Peer.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "bandwidth.data",
                                    "description": "The maximum data streaming bandwidth sent from Peer.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "googleXBandwidth",
                                    "description": "<blockquote class=\"info\">\n  Note that this feature might not work depending on the browser support and implementation,\n  and its properties and values are only defined for User's end and cannot be viewed\n  from Peer's end (when <code>isSelf</code> value is <code>false</code>).</blockquote>\n  The experimental google video streaming bandwidth sent to Peers.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "googleXBandwidth.min",
                                    "description": "The minimum experimental google video streaming bandwidth sent to Peers.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "googleXBandwidth.max",
                                    "description": "The maximum experimental google video streaming bandwidth sent to Peers.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "The Peer Stream muted settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "The flag if Peer Stream audio tracks is muted or not.\n  <small>If Peer <code>peerInfo.settings.audio</code> is false, this will be defined as <code>true</code>.</small>",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "The flag if Peer Stream video tracks is muted or not.\n  <small>If Peer <code>peerInfo.settings.video</code> is false, this will be defined as <code>true</code>.</small>",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "agent",
                            "description": "The Peer agent information.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The Peer agent name.\n  <small>Data may be accessing browser or non-Web SDK name.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "The Peer agent version.\n  <small>Data may be accessing browser or non-Web SDK version. If the original value is <code>\"0.9.6.1\"</code>,\n  it will be interpreted as <code>0.90601</code> where <code>0</code> helps to seperate the minor dots.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "os",
                                    "description": "The Peer platform name.\n <small>Data may be accessing OS platform version from Web SDK.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "pluginVersion",
                                    "description": "The Peer Temasys Plugin version.\n <small>Defined only when Peer is using the Temasys Plugin (IE / Safari).</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "DTProtocolVersion",
                                    "description": "The Peer data transfer (DT) protocol version.",
                                    "type": "String"
                                },
                                {
                                    "name": "SMProtocolVersion",
                                    "description": "The Peer signaling message (SM) protocol version.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The Room Peer is from.",
                            "type": "String"
                        },
                        {
                            "name": "config",
                            "description": "The Peer connection configuration.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "enableIceTrickle",
                                    "description": "The flag if Peer connection has\n  trickle ICE enabled or faster connectivity.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "enableDataChannel",
                                    "description": "The flag if Datachannel connections would be enabled for Peer.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "enableIceRestart",
                                    "description": "The flag if Peer connection has ICE connection restart support.\n  <small>Note that ICE connection restart support is not honoured for MCU enabled Peer connection.</small>",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "priorityWeight",
                                    "description": "The flag if Peer or User should be the offerer.\n  <small>If User's <code>priorityWeight</code> is higher than Peer's, User is the offerer, else Peer is.\n  However for the case where the MCU is connected, User will always be the offerer.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "publishOnly",
                                    "description": "The flag if Peer is publishing only stream but not receiving streams.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "receiveOnly",
                                    "description": "The flag if Peer is receiving only streams but not publishing stream.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "parentId",
                            "description": "The parent Peer ID that it is matched to for multi-streaming connections.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 370,
            "description": "Event triggered when a Peer connection has been refreshed.",
            "itemtype": "event",
            "name": "peerRestart",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelfInitiateRestart",
                    "description": "The flag if User is initiating the Peer connection refresh.",
                    "type": "Boolean"
                },
                {
                    "name": "isIceRestart",
                    "description": "The flag if Peer connection ICE connection will restart.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 384,
            "description": "Event triggered when a Peer session information has been updated.",
            "itemtype": "event",
            "name": "peerUpdated",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 397,
            "description": "Event triggered when a Peer leaves the room.",
            "itemtype": "event",
            "name": "peerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 410,
            "description": "Event triggered when Room session has ended abruptly due to network disconnections.",
            "itemtype": "event",
            "name": "sessionDisconnect",
            "params": [
                {
                    "name": "peerId",
                    "description": "The User's Room session Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The User's Room session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                }
            ],
            "since": "0.6.10",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 422,
            "description": "Event triggered when receiving Peer Stream.",
            "itemtype": "event",
            "name": "incomingStream",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "stream",
                    "description": "The Stream object.\n  <small>To attach it to an element: <code>attachMediaStream(videoElement, stream);</code>.</small>",
                    "type": "MediaStream"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if Peer Stream is a screensharing Stream.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.",
                    "type": "String"
                }
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 439,
            "description": "Event triggered when receiving message from Peer.",
            "itemtype": "event",
            "name": "incomingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message result.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "content",
                            "description": "The message object.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "The sender Peer ID.",
                            "type": "String"
                        },
                        {
                            "name": "targetPeerId",
                            "description": "The value of the <code>targetPeerId</code>\n  defined in <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a> or\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>.\n  <small>Defined as User's Peer ID when <code>isSelf</code> payload value is <code>false</code>.</small>\n  <small>Defined as <code>null</code> when provided <code>targetPeerId</code> in\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a> or\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a> is not defined.</small>",
                            "type": "String|Array",
                            "optional": true
                        },
                        {
                            "name": "listOfPeers",
                            "description": "The list of Peers that the message has been sent to.\n <small>Defined only when <code>isSelf</code> payload value is <code>true</code>.</small>",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag if message is targeted or not, basing\n  off the <code>targetPeerId</code> parameter being defined in\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a> or\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>.",
                            "type": "Boolean"
                        },
                        {
                            "name": "isDataChannel",
                            "description": "The flag if message is sent from\n  <a href=\"#method_sendP2PMessage\"><code>sendP2PMessage()</code> method</a>.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 470,
            "description": "Event triggered when receiving completed data transfer from Peer.",
            "itemtype": "event",
            "name": "incomingData",
            "params": [
                {
                    "name": "data",
                    "description": "The data.",
                    "type": "Blob|String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  except without the <code>data</code> property.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 486,
            "description": "Event triggered when receiving upload data transfer from Peer.",
            "itemtype": "event",
            "name": "incomingDataRequest",
            "params": [
                {
                    "name": "transferId",
                    "description": "The transfer ID.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "The data transfer information.\n  <small>Object signature matches the <code>transferInfo</code> parameter payload received in the\n  <a href=\"#event_dataTransferState\"><code>dataTransferState</code> event</a>\n  except without the <code>data</code> property.</small>",
                    "type": "String"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 501,
            "description": "Event triggered when data streaming session has been started from Peer to User.",
            "itemtype": "event",
            "name": "incomingDataStreamStarted",
            "params": [
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "streamInfo",
                    "description": "The data streaming session information.\n  <small>Object signature matches the <code>streamInfo</code> parameter payload received in the\n  <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  except without the <code>chunk</code> property.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 517,
            "description": "Event triggered when data streaming session has been stopped from Peer to User.",
            "itemtype": "event",
            "name": "incomingDataStreamStopped",
            "params": [
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "streamInfo",
                    "description": "The data streaming session information.\n  <small>Object signature matches the <code>streamInfo</code> parameter payload received in the\n  <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  except without the <code>chunk</code> property.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 533,
            "description": "Event triggered when data streaming session has been stopped from Peer to User.",
            "itemtype": "event",
            "name": "incomingDataStream",
            "params": [
                {
                    "name": "chunk",
                    "description": "The data chunk received.",
                    "type": "Blob|String"
                },
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "streamInfo",
                    "description": "The data streaming session information.\n  <small>Object signature matches the <code>streamInfo</code> parameter payload received in the\n  <a href=\"#event_dataStreamState\"><code>dataStreamState</code> event</a>\n  except without the <code>chunk</code> property.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                }
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 550,
            "description": "Event triggered when Room locked status has changed.",
            "itemtype": "event",
            "name": "roomLock",
            "params": [
                {
                    "name": "isLocked",
                    "description": "The flag if Room is locked.",
                    "type": "Boolean"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if User changed the Room locked status.",
                    "type": "Boolean"
                }
            ],
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 564,
            "description": "Event triggered when a Datachannel connection state has changed.",
            "itemtype": "event",
            "name": "dataChannelState",
            "params": [
                {
                    "name": "state",
                    "description": "The current Datachannel connection state.\n  [Rel: Skylink.DATA_CHANNEL_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> payload is <code>ERROR</code> or <code>SEND_MESSAGE_ERROR</code>.</small>",
                    "type": "Error",
                    "optional": true
                },
                {
                    "name": "channelName",
                    "description": "The Datachannel ID.",
                    "type": "String"
                },
                {
                    "name": "channelType",
                    "description": "The Datachannel type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]",
                    "type": "String"
                },
                {
                    "name": "messageType",
                    "description": "The Datachannel sending Datachannel message error type.\n  <small>Defined only when <cod>state</code> payload is <code>SEND_MESSAGE_ERROR</code>.</small>\n  [Rel: Skylink.DATA_CHANNEL_MESSAGE_ERROR]",
                    "type": "String"
                },
                {
                    "name": "bufferAmount",
                    "description": "The Datachannel buffered amount information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "bufferedAmountLow",
                            "description": "The size of currently queued data to send on the Datachannel connection.",
                            "type": "Number"
                        },
                        {
                            "name": "bufferedAmountLowThreshold",
                            "description": "The current buffered amount low threshold configured.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 586,
            "description": "Event triggered when a data transfer state has changed.",
            "itemtype": "event",
            "name": "dataTransferState",
            "params": [
                {
                    "name": "state",
                    "description": "The current data transfer state.\n  [Rel: Skylink.DATA_TRANSFER_STATE]",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID.\n  <small>Note that this is defined as <code>null</code> when <code>state</code> payload is <code>START_ERROR</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.\n  <small>Note that this could be defined as <code>null</code> when <code>state</code> payload is\n  <code>START_ERROR</code> and there is no Peers to start data transfer with.</small>",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "The data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "data",
                            "description": "The data object.\n  <small>Defined only when <code>state</code> payload is <code>UPLOAD_STARTED</code> or\n  <code>DOWNLOAD_COMPLETED</code>.</small>",
                            "type": "Blob|String",
                            "optional": true
                        },
                        {
                            "name": "name",
                            "description": "The data transfer name.",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The data transfer data object size.",
                            "type": "Number"
                        },
                        {
                            "name": "dataType",
                            "description": "The data transfer session type.\n  [Rel: Skylink.DATA_TRANSFER_SESSION_TYPE]",
                            "type": "String"
                        },
                        {
                            "name": "chunkType",
                            "description": "The data transfer type of data chunk being used to send to Peer for transfers.\n  <small>For <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> data transfers, the\n  initial data chunks value may change depending on the currently received data chunk type or the\n  agent supported sending type of data chunks.</small>\n  <small>For <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> data transfers, it is\n  <code>STRING</code> always.</small>\n  [Rel: Skylink.DATA_TRANSFER_DATA_TYPE]",
                            "type": "String"
                        },
                        {
                            "name": "mimeType",
                            "description": "The data transfer data object MIME type.\n  <small>Defined only when <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>\n  data object sent MIME type information is defined.</small>",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "chunkSize",
                            "description": "The data transfer data chunk size.",
                            "type": "Number"
                        },
                        {
                            "name": "percentage",
                            "description": "The data transfer percentage of completion progress.",
                            "type": "Number"
                        },
                        {
                            "name": "timeout",
                            "description": "The flag if data transfer is targeted or not, basing\n  off the <code>targetPeerId</code> parameter being defined in\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a> or\n  <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a>.",
                            "type": "Number"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag if message is targeted or not, basing\n  off the <code>targetPeerId</code> parameter being defined in\n  <a href=\"#method_sendBlobData\"><code>sendBlobData()</code> method</a> or\n  <a href=\"#method_sendURLData\"><code>sendURLData()</code> method</a>.",
                            "type": "Boolean"
                        },
                        {
                            "name": "direction",
                            "description": "The data transfer direction.\n  [Rel: Skylink.DATA_TRANSFER_TYPE]",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error result.\n  <small>Defined only when <code>state</code> payload is <code>ERROR</code>, <code>CANCEL</code>,\n  <code>REJECTED</code>, <code>START_ERROR</code> or <code>USER_REJECTED</code>.</small>",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "message",
                            "description": "The error object.",
                            "type": "Error|String"
                        },
                        {
                            "name": "transferType",
                            "description": "The data transfer direction from where the error occurred.\n  [Rel: Skylink.DATA_TRANSFER_TYPE]",
                            "type": "String"
                        }
                    ]
                }
            ],
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 637,
            "description": "Event triggered when a data streaming state has changed.",
            "itemtype": "event",
            "name": "dataStreamState",
            "params": [
                {
                    "name": "state",
                    "description": "The current data streaming state.\n  [Rel: Skylink.DATA_STREAM_STATE]",
                    "type": "String"
                },
                {
                    "name": "streamId",
                    "description": "The data streaming session ID.\n  <small>Note that this is defined as <code>null</code> when <code>state</code> payload is <code>START_ERROR</code>.</small>",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.\n  <small>Note that this could be defined as <code>null</code> when <code>state</code> payload is\n  <code>START_ERROR</code> and there is no Peers to start data streaming with.</small>",
                    "type": "String"
                },
                {
                    "name": "streamInfo",
                    "description": "The data streaming information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "chunk",
                            "description": "The data chunk received.\n  <small>Defined only when <code>state</code> payload is <code>RECEIVED</code> or <code>SENT</code>.</small>",
                            "type": "Blob|String",
                            "optional": true
                        },
                        {
                            "name": "chunkSize",
                            "description": "The data streaming data chunk size received.",
                            "type": "Number"
                        },
                        {
                            "name": "chunkType",
                            "description": "The data streaming data chunk type received.\n  <small>The initial data chunks value may change depending on the currently received data chunk type or the\n  agent supported sending type of data chunks.</small>\n  [Rel: Skylink.DATA_TRANSFER_DATA_TYPE]",
                            "type": "String"
                        },
                        {
                            "name": "isStringStream",
                            "description": "The flag if data streaming data chunks are strings.",
                            "type": "String"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag if data streaming is targeted or not, basing\n  off the <code>targetPeerId</code> parameter being defined in\n  <a href=\"#method_startStreamingData\"><code>startStreamingData()</code> method</a>.",
                            "type": "Boolean"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "The sender Peer ID.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> payload is <code>ERROR</code> or <code>START_ERROR</code>,.</small>",
                    "type": "Error",
                    "optional": true
                }
            ],
            "beta": 1,
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 668,
            "description": "Event triggered when Signaling server reaction state has changed.",
            "itemtype": "event",
            "name": "systemAction",
            "params": [
                {
                    "name": "action",
                    "description": "The current Signaling server reaction state.\n  [Rel: Skylink.SYSTEM_ACTION]",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The message.",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "The Signaling server reaction state reason of action code.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                    "type": "String"
                }
            ],
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 681,
            "description": "Event triggered when a server Peer joins the room.",
            "itemtype": "event",
            "name": "serverPeerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "serverPeerType",
                    "description": "The server Peer type\n  [Rel: Skylink.SERVER_PEER_TYPE]",
                    "type": "String"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 692,
            "description": "Event triggered when a server Peer leaves the room.",
            "itemtype": "event",
            "name": "serverPeerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "serverPeerType",
                    "description": "The server Peer type\n  [Rel: Skylink.SERVER_PEER_TYPE]",
                    "type": "String"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 703,
            "description": "Event triggered when a server Peer connection has been refreshed.",
            "itemtype": "event",
            "name": "serverPeerRestart",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "serverPeerType",
                    "description": "The server Peer type\n  [Rel: Skylink.SERVER_PEER_TYPE]",
                    "type": "String"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 714,
            "description": "Event triggered when a Peer Stream streaming has stopped.\n<small>Note that it may not be the currently sent Stream to User, and it also triggers\nwhen User leaves the Room for any currently sent Stream to User from Peer.</small>",
            "itemtype": "event",
            "name": "streamEnded",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if Peer Stream is a screensharing Stream.",
                    "type": "Boolean"
                },
                {
                    "name": "streamId",
                    "description": "The Stream ID.",
                    "type": "String"
                }
            ],
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 731,
            "description": "Event triggered when Peer Stream audio or video tracks has been muted / unmuted.",
            "itemtype": "event",
            "name": "streamMuted",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "The Peer session information.\n  <small>Object signature matches the <code>peerInfo</code> parameter payload received in the\n  <a href=\"#event_peerJoined\"><code>peerJoined</code> event</a>.</small>",
                    "type": "JSON"
                },
                {
                    "name": "isSelf",
                    "description": "The flag if Peer is User.",
                    "type": "Boolean"
                },
                {
                    "name": "isScreensharing",
                    "description": "The flag if Peer Stream is a screensharing Stream.",
                    "type": "Boolean"
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 745,
            "description": "Event triggered when <a href=\"#method_getPeers\"><code>getPeers()</code> method</a> retrieval state changes.",
            "itemtype": "event",
            "name": "getPeersStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current <code>getPeers()</code> retrieval state.\n  [Rel: Skylink.GET_PEERS_STATE]",
                    "type": "String"
                },
                {
                    "name": "privilegedPeerId",
                    "description": "The User's privileged Peer ID.",
                    "type": "String"
                },
                {
                    "name": "peerList",
                    "description": "The list of Peer IDs Rooms within the same App space.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "#room",
                            "description": "The list of Peer IDs associated with the Room defined in <code>#room</code> property.",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 758,
            "description": "Event triggered when <a href=\"#method_introducePeer\"><code>introducePeer()</code> method</a>\nintroduction request state changes.",
            "itemtype": "event",
            "name": "introduceStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current <code>introducePeer()</code> introduction request state.\n  [Rel: Skylink.INTRODUCE_STATE]",
                    "type": "String"
                },
                {
                    "name": "privilegedPeerId",
                    "description": "The User's privileged Peer ID.",
                    "type": "String"
                },
                {
                    "name": "sendingPeerId",
                    "description": "The Peer ID to be connected with <code>receivingPeerId</code>.",
                    "type": "String"
                },
                {
                    "name": "receivingPeerId",
                    "description": "The Peer ID to be connected with <code>sendingPeerId</code>.",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> payload is <code>ERROR</code>.</small>",
                    "type": "String",
                    "optional": true
                }
            ],
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 774,
            "description": "Event triggered when recording session state has changed.",
            "itemtype": "event",
            "name": "recordingState",
            "params": [
                {
                    "name": "state",
                    "description": "The current recording session state.\n  [Rel: Skylink.RECORDING_STATE]",
                    "type": "Number"
                },
                {
                    "name": "recordingId",
                    "description": "The recording session ID.",
                    "type": "String"
                },
                {
                    "name": "link",
                    "description": "The recording session mixin videos link in\n  <a href=\"https://en.wikipedia.org/wiki/MPEG-4_Part_14\">MP4</a> format.\n  <small>Defined only when <code>state</code> payload is <code>LINK</code>.</small>",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "#peerId",
                            "description": "The recording session recorded Peer only video associated\n  with the Peer ID defined in <code>#peerId</code> property.\n  <small>If <code>#peerId</code> value is <code>\"mixin\"</code>, it means that is the mixin\n  video of all Peers in the Room.</small>",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> payload is <code>ERROR</code>.</small>",
                    "type": "Error|String"
                }
            ],
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 795,
            "description": "Event triggered when <a href=\"#method_getConnectionStatus\"><code>getConnectionStatus()</code> method</a>\nretrieval state changes.",
            "itemtype": "event",
            "name": "getConnectionStatusStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current <code>getConnectionStatus()</code> retrieval state.\n  [Rel: Skylink.GET_CONNECTION_STATUS_STATE]",
                    "type": "Number"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "stats",
                    "description": "The Peer connection current stats.\n  <small>Defined only when <code>state</code> payload is <code>RETRIEVE_SUCCESS</code>.</small>",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "raw",
                            "description": "The Peer connection raw stats before parsing.",
                            "type": "JSON"
                        },
                        {
                            "name": "audio",
                            "description": "The Peer connection audio streaming stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sending",
                                    "description": "The Peer connection sending audio streaming stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sending.bytes",
                                    "description": "The Peer connection current sending audio streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalBytes",
                                    "description": "The Peer connection total sending audio streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.packets",
                                    "description": "The Peer connection current sending audio streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalPackets",
                                    "description": "The Peer connection total sending audio streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.packetsLost",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection current sending audio streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalPacketsLost",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection total sending audio streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.ssrc",
                                    "description": "The Peer connection sending audio streaming RTP packets SSRC.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.rtt",
                                    "description": "The Peer connection sending audio streaming RTT (Round-trip delay time).\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.jitter",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection sending audio streaming RTP packets jitter in seconds.\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.jitterBufferMs",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection sending audio streaming\n  RTP packets jitter buffer in miliseconds.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec",
                                    "description": "The Peer connection sending audio streaming selected codec information.\n  <small>Defined as <code>null</code> if local session description is not available before parsing.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.name",
                                    "description": "The Peer connection sending audio streaming selected codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "sending.codec.payloadType",
                                    "description": "The Peer connection sending audio streaming selected codec payload type.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.codec.implementation",
                                    "description": "The Peer connection sending audio streaming selected codec implementation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.channels",
                                    "description": "The Peer connection sending audio streaming selected codec channels (2 for stereo).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing,\n  and this is usually present in <code>stats.audio</code> property.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.clockRate",
                                    "description": "The Peer connection sending audio streaming selected codec media sampling rate.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.params",
                                    "description": "The Peer connection sending audio streaming selected codec parameters.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sending.inputLevel",
                                    "description": "The Peer connection sending audio streaming input level.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.echoReturnLoss",
                                    "description": "The Peer connection sending audio streaming echo return loss in db (decibels).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.echoReturnLossEnhancement",
                                    "description": "The Peer connection sending audio streaming\n  echo return loss enhancement db (decibels).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving",
                                    "description": "The Peer connection receiving audio streaming stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "receiving.bytes",
                                    "description": "The Peer connection current sending audio streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalBytes",
                                    "description": "The Peer connection total sending audio streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packets",
                                    "description": "The Peer connection current receiving audio streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPackets",
                                    "description": "The Peer connection total receiving audio streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packetsLost",
                                    "description": "The Peer connection current receiving audio streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.fractionLost",
                                    "description": "The Peer connection current receiving audio streaming fraction packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packetsDiscarded",
                                    "description": "The Peer connection current receiving audio streaming packets discarded.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPacketsLost",
                                    "description": "The Peer connection total receiving audio streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPacketsDiscarded",
                                    "description": "The Peer connection total receiving audio streaming packets discarded.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.ssrc",
                                    "description": "The Peer connection receiving audio streaming RTP packets SSRC.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.jitter",
                                    "description": "The Peer connection receiving audio streaming RTP packets jitter in seconds.\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.jitterBufferMs",
                                    "description": "The Peer connection receiving audio streaming\n  RTP packets jitter buffer in miliseconds.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec",
                                    "description": "The Peer connection receiving audio streaming selected codec information.\n  <small>Defined as <code>null</code> if remote session description is not available before parsing.</small>\n  <small>Note that if the value is polyfilled, the value may not be accurate since the remote Peer can override the selected codec.\n  The value is derived from the remote session description.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.name",
                                    "description": "The Peer connection receiving audio streaming selected codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "receiving.codec.payloadType",
                                    "description": "The Peer connection receiving audio streaming selected codec payload type.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.codec.implementation",
                                    "description": "The Peer connection receiving audio streaming selected codec implementation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.channels",
                                    "description": "The Peer connection receiving audio streaming selected codec channels (2 for stereo).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing,\n  and this is usually present in <code>stats.audio</code> property.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.clockRate",
                                    "description": "The Peer connection receiving audio streaming selected codec media sampling rate.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.params",
                                    "description": "The Peer connection receiving audio streaming selected codec parameters.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.outputLevel",
                                    "description": "The Peer connection receiving audio streaming output level.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "The Peer connection video streaming stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "sending",
                                    "description": "The Peer connection sending video streaming stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "sending.bytes",
                                    "description": "The Peer connection current sending video streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalBytes",
                                    "description": "The Peer connection total sending video streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.packets",
                                    "description": "The Peer connection current sending video streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalPackets",
                                    "description": "The Peer connection total sending video streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.packetsLost",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection current sending video streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.totalPacketsLost",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection total sending video streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.ssrc",
                                    "description": "The Peer connection sending video streaming RTP packets SSRC.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.rtt",
                                    "description": "The Peer connection sending video streaming RTT (Round-trip delay time).\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.jitter",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection sending video streaming RTP packets jitter in seconds.\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.jitterBufferMs",
                                    "description": "<blockquote class=\"info\">\n  This property has been deprecated and would be removed in future releases\n  as it should not be in <code>sending</code> property.\n  </blockquote> The Peer connection sending video streaming RTP packets jitter buffer in miliseconds.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.qpSum",
                                    "description": "The Peer connection sending video streaming sum of the QP values of frames passed.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec",
                                    "description": "The Peer connection sending video streaming selected codec information.\n  <small>Defined as <code>null</code> if local session description is not available before parsing.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.name",
                                    "description": "The Peer connection sending video streaming selected codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "sending.codec.payloadType",
                                    "description": "The Peer connection sending video streaming selected codec payload type.",
                                    "type": "Number"
                                },
                                {
                                    "name": "sending.codec.implementation",
                                    "description": "The Peer connection sending video streaming selected codec implementation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.channels",
                                    "description": "The Peer connection sending video streaming selected codec channels (2 for stereo).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing,\n  and this is usually present in <code>stats.audio</code> property.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.clockRate",
                                    "description": "The Peer connection sending video streaming selected codec media sampling rate.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.codec.params",
                                    "description": "The Peer connection sending video streaming selected codec parameters.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "sending.frames",
                                    "description": "The Peer connection sending video streaming frames.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.frameRateInput",
                                    "description": "The Peer connection sending video streaming fps input.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.frameRateInput",
                                    "description": "The Peer connection sending video streaming fps input.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.framesDropped",
                                    "description": "The Peer connection sending video streaming frames dropped.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.frameRateMean",
                                    "description": "The Peer connection sending video streaming fps mean.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.frameRateStdDev",
                                    "description": "The Peer connection sending video streaming fps standard deviation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.framesPerSecond",
                                    "description": "The Peer connection sending video streaming fps.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.framesDecoded",
                                    "description": "The Peer connection sending video streaming frames decoded.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.framesCorrupted",
                                    "description": "The Peer connection sending video streaming frames corrupted.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.totalFrames",
                                    "description": "The Peer connection total sending video streaming frames.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.nacks",
                                    "description": "The Peer connection current sending video streaming nacks.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.totalNacks",
                                    "description": "The Peer connection total sending video streaming nacks.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.plis",
                                    "description": "The Peer connection current sending video streaming plis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.totalPlis",
                                    "description": "The Peer connection total sending video streaming plis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.firs",
                                    "description": "The Peer connection current sending video streaming firs.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.totalFirs",
                                    "description": "The Peer connection total sending video streaming firs.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.slis",
                                    "description": "The Peer connection current sending video streaming slis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sending.totalSlis",
                                    "description": "The Peer connection total sending video streaming slis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving",
                                    "description": "The Peer connection receiving video streaming stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "receiving.bytes",
                                    "description": "The Peer connection current receiving video streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalBytes",
                                    "description": "The Peer connection total receiving video streaming bytes.\n  <small>Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packets",
                                    "description": "The Peer connection current receiving video streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPackets",
                                    "description": "The Peer connection total receiving video streaming packets.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packetsLost",
                                    "description": "The Peer connection current receiving video streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.fractionLost",
                                    "description": "The Peer connection current receiving video streaming fraction packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.packetsDiscarded",
                                    "description": "The Peer connection current receiving video streaming packets discarded.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPacketsLost",
                                    "description": "The Peer connection total receiving video streaming packets lost.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.totalPacketsDiscarded",
                                    "description": "The Peer connection total receiving video streaming packets discarded.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.ssrc",
                                    "description": "The Peer connection receiving video streaming RTP packets SSRC.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.e2eDelay",
                                    "description": "The Peer connection receiving video streaming e2e delay.\n  <small>Defined as <code>null</code> if it's not present in original raw stats before parsing, and that\n  it finds any existing audio, video or object (plugin) DOM elements that has set with the\n  Peer remote stream object to parse current time. Note that <code>document.getElementsByTagName</code> function\n  and DOM <code>.currentTime</code> has to be supported inorder for data to be parsed correctly.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.jitter",
                                    "description": "The Peer connection receiving video streaming RTP packets jitter in seconds.\n  <small>Defined as <code>0</code> if it's not present in original raw stats before parsing.</small>",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.jitterBufferMs",
                                    "description": "The Peer connection receiving video streaming\n  RTP packets jitter buffer in miliseconds.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec",
                                    "description": "The Peer connection receiving video streaming selected codec information.\n  <small>Defined as <code>null</code> if remote session description is not available before parsing.</small>\n  <small>Note that if the value is polyfilled, the value may not be accurate since the remote Peer can override the selected codec.\n  The value is derived from the remote session description.</small>",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.name",
                                    "description": "The Peer connection receiving video streaming selected codec name.",
                                    "type": "String"
                                },
                                {
                                    "name": "receiving.codec.payloadType",
                                    "description": "The Peer connection receiving video streaming selected codec payload type.",
                                    "type": "Number"
                                },
                                {
                                    "name": "receiving.codec.implementation",
                                    "description": "The Peer connection receiving video streaming selected codec implementation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.channels",
                                    "description": "The Peer connection receiving video streaming selected codec channels (2 for stereo).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing,\n  and this is usually present in <code>stats.audio</code> property.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.clockRate",
                                    "description": "The Peer connection receiving video streaming selected codec media sampling rate.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.codec.params",
                                    "description": "The Peer connection receiving video streaming selected codec parameters.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.frames",
                                    "description": "The Peer connection receiving video streaming frames.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.framesOutput",
                                    "description": "The Peer connection receiving video streaming fps output.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.framesDecoded",
                                    "description": "The Peer connection receiving video streaming frames decoded.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.frameRateMean",
                                    "description": "The Peer connection receiving video streaming fps mean.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.frameRateStdDev",
                                    "description": "The Peer connection receiving video streaming fps standard deviation.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.framesPerSecond",
                                    "description": "The Peer connection receiving video streaming fps.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.framesDecoded",
                                    "description": "The Peer connection receiving video streaming frames decoded.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.framesCorrupted",
                                    "description": "The Peer connection receiving video streaming frames corrupted.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.totalFrames",
                                    "description": "The Peer connection total receiving video streaming frames.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.nacks",
                                    "description": "The Peer connection current receiving video streaming nacks.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.totalNacks",
                                    "description": "The Peer connection total receiving video streaming nacks.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.plis",
                                    "description": "The Peer connection current receiving video streaming plis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.totalPlis",
                                    "description": "The Peer connection total receiving video streaming plis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.firs",
                                    "description": "The Peer connection current receiving video streaming firs.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.totalFirs",
                                    "description": "The Peer connection total receiving video streaming firs.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.slis",
                                    "description": "The Peer connection current receiving video streaming slis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "receiving.totalPlis",
                                    "description": "The Peer connection total receiving video streaming slis.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "selectedCandidate",
                            "description": "The Peer connection selected ICE candidate pair stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "local",
                                    "description": "The Peer connection selected local ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "local.ipAddress",
                                    "description": "The Peer connection selected\n  local ICE candidate IP address.",
                                    "type": "String"
                                },
                                {
                                    "name": "local.portNumber",
                                    "description": "The Peer connection selected\n  local ICE candidate port number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "local.transport",
                                    "description": "The Peer connection selected\n  local ICE candidate IP transport type.",
                                    "type": "String"
                                },
                                {
                                    "name": "local.candidateType",
                                    "description": "The Peer connection selected\n  local ICE candidate type.",
                                    "type": "String"
                                },
                                {
                                    "name": "local.turnMediaTransport",
                                    "description": "The Peer connection possible\n  transport used when relaying local media to TURN server.\n  <small>Types are <code>\"UDP\"</code> (UDP connections), <code>\"TCP\"</code> (TCP connections) and\n  <code>\"TCP/TLS\"</code> (TCP over TLS connections).</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote",
                                    "description": "The Peer connection selected remote ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "remote.ipAddress",
                                    "description": "The Peer connection selected\n  remote ICE candidate IP address.",
                                    "type": "String"
                                },
                                {
                                    "name": "remote.portNumber",
                                    "description": "The Peer connection selected\n  remote ICE candidate port number.",
                                    "type": "Number"
                                },
                                {
                                    "name": "remote.transport",
                                    "description": "The Peer connection selected\n  remote ICE candidate IP transport type.",
                                    "type": "String"
                                },
                                {
                                    "name": "remote.candidateType",
                                    "description": "The Peer connection selected\n  remote ICE candidate type.",
                                    "type": "String"
                                },
                                {
                                    "name": "writable",
                                    "description": "The flag if Peer has gotten ACK to an ICE request.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "readable",
                                    "description": "The flag if Peer has gotten a valid incoming ICE request.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "rtt",
                                    "description": "The current STUN connectivity checks RTT (Round-trip delay time).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "totalRtt",
                                    "description": "The total STUN connectivity checks RTT (Round-trip delay time).\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "requests",
                                    "description": "The ICE connectivity check requests.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "requests.received",
                                    "description": "The current ICE connectivity check requests received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "requests.sent",
                                    "description": "The current ICE connectivity check requests sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "requests.totalReceived",
                                    "description": "The total ICE connectivity check requests received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "requests.totalSent",
                                    "description": "The total ICE connectivity check requests sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "responses",
                                    "description": "The ICE connectivity check responses.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "responses.received",
                                    "description": "The current ICE connectivity check responses received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "responses.sent",
                                    "description": "The current ICE connectivity check responses sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "responses.totalReceived",
                                    "description": "The total ICE connectivity check responses received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "responses.totalSent",
                                    "description": "The total ICE connectivity check responses sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests",
                                    "description": "The current ICE consent requests.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentRequests.received",
                                    "description": "The current ICE consent requests received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.sent",
                                    "description": "The current ICE consent requests sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.totalReceived",
                                    "description": "The total ICE consent requests received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentRequests.totalSent",
                                    "description": "The total ICE consent requests sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses",
                                    "description": "The current ICE consent responses.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "consentResponses.received",
                                    "description": "The current ICE consent responses received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.sent",
                                    "description": "The current ICE consent responses sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.totalReceived",
                                    "description": "The total ICE consent responses received.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "consentResponses.totalSent",
                                    "description": "The total ICE consent responses sent.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "certificate",
                            "description": "The Peer connection DTLS/SRTP exchanged certificates information.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "local",
                                    "description": "The Peer connection local certificate information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "local.fingerprint",
                                    "description": "The Peer connection local certificate fingerprint.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.fingerprintAlgorithm",
                                    "description": "The Peer connection local\n  certificate fingerprint algorithm.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "local.derBase64",
                                    "description": "The Peer connection local\n  base64 certificate in binary DER format encoded in base64.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote",
                                    "description": "The Peer connection remote certificate information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "remote.fingerprint",
                                    "description": "The Peer connection remote certificate fingerprint.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.fingerprintAlgorithm",
                                    "description": "The Peer connection remote\n  certificate fingerprint algorithm.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "remote.derBase64",
                                    "description": "The Peer connection remote\n  base64 certificate in binary DER format encoded in base64.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "srtpCipher",
                                    "description": "The certificates SRTP cipher.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "dtlsCipher",
                                    "description": "The certificates DTLS cipher.\n  <small>Defined as <code>null</code> if it's not available in original raw stats before parsing.</small>",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "connection",
                            "description": "The Peer connection object stats.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "iceConnectionState",
                                    "description": "The Peer connection ICE connection state.",
                                    "type": "String"
                                },
                                {
                                    "name": "iceGatheringState",
                                    "description": "The Peer connection ICE gathering state.",
                                    "type": "String"
                                },
                                {
                                    "name": "signalingState",
                                    "description": "The Peer connection signaling state.",
                                    "type": "String"
                                },
                                {
                                    "name": "localDescription",
                                    "description": "The Peer connection local session description.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "localDescription.type",
                                    "description": "The Peer connection local session description type.\n  <small>Defined as <code>null</code> when local session description is not available.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "localDescription.sdp",
                                    "description": "The Peer connection local session description SDP.\n  <small>Defined as <code>null</code> when local session description is not available.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "remoteDescription",
                                    "description": "The Peer connection remote session description.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "remoteDescription.type",
                                    "description": "The Peer connection remote session description type.\n  <small>Defined as <code>null</code> when remote session description is not available.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "remoteDescription.sdp",
                                    "description": "The Peer connection remote session description sdp.\n  <small>Defined as <code>null</code> when remote session description is not available.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates",
                                    "description": "The Peer connection list of ICE candidates sent or received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.sending",
                                    "description": "The Peer connection list of local ICE candidates sent.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.sending.host",
                                    "description": "The Peer connection list of local\n  <code>\"host\"</code> (local network) ICE candidates sent.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.sending.host.#index",
                                    "description": "The Peer connection local\n  <code>\"host\"</code> (local network) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.sending.host.#index.candidate",
                                    "description": "The Peer connection local\n  <code>\"host\"</code> (local network) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.host.#index.sdpMid",
                                    "description": "The Peer connection local\n  <code>\"host\"</code> (local network) ICE candidate identifier based on the local session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.host.#index.sdpMLineIndex",
                                    "description": "The Peer connection local\n  <code>\"host\"</code> (local network) ICE candidate media description index (starting from <code>0</code>)\n  based on the local session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "candidates.sending.srflx",
                                    "description": "The Peer connection list of local\n  <code>\"srflx\"</code> (STUN) ICE candidates sent.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.sending.srflx.#index",
                                    "description": "The Peer connection local\n  <code>\"srflx\"</code> (STUN) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.sending.srflx.#index.candidate",
                                    "description": "The Peer connection local\n  <code>\"srflx\"</code> (STUN) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.srflx.#index.sdpMid",
                                    "description": "The Peer connection local\n  <code>\"srflx\"</code> (STUN) ICE candidate identifier based on the local session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.srflx.#index.sdpMLineIndex",
                                    "description": "The Peer connection local\n  <code>\"srflx\"</code> (STUN) ICE candidate media description index (starting from <code>0</code>)\n  based on the local session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "candidates.sending.relay",
                                    "description": "The Peer connection list of local\n  <code>\"relay\"</code> (TURN) candidates sent.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.sending.relay.#index",
                                    "description": "The Peer connection local\n  <code>\"relay\"</code> (TURN) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.sending.relay.#index.candidate",
                                    "description": "The Peer connection local\n  <code>\"relay\"</code> (TURN) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.relay.#index.sdpMid",
                                    "description": "The Peer connection local\n  <code>\"relay\"</code> (TURN) ICE candidate identifier based on the local session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.sending.relay.#index.sdpMLineIndex",
                                    "description": "The Peer connection local\n  <code>\"relay\"</code> (TURN) ICE candidate media description index (starting from <code>0</code>)\n  based on the local session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "candidates.receiving",
                                    "description": "The Peer connection list of remote ICE candidates received.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.receiving.host",
                                    "description": "The Peer connection list of remote\n  <code>\"host\"</code> (local network) ICE candidates received.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.receiving.host.#index",
                                    "description": "The Peer connection remote\n  <code>\"host\"</code> (local network) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.receiving.host.#index.candidate",
                                    "description": "The Peer connection remote\n  <code>\"host\"</code> (local network) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.host.#index.sdpMid",
                                    "description": "The Peer connection remote\n  <code>\"host\"</code> (local network) ICE candidate identifier based on the remote session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.host.#index.sdpMLineIndex",
                                    "description": "The Peer connection remote\n  <code>\"host\"</code> (local network) ICE candidate media description index (starting from <code>0</code>)\n  based on the remote session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "candidates.receiving.srflx",
                                    "description": "The Peer connection list of remote\n  <code>\"srflx\"</code> (STUN) ICE candidates received.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.receiving.srflx.#index",
                                    "description": "The Peer connection remote\n  <code>\"srflx\"</code> (STUN) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.receiving.srflx.#index.candidate",
                                    "description": "The Peer connection remote\n  <code>\"srflx\"</code> (STUN) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.srflx.#index.sdpMid",
                                    "description": "The Peer connection remote\n  <code>\"srflx\"</code> (STUN) ICE candidate identifier based on the remote session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.srflx.#index.sdpMLineIndex",
                                    "description": "The Peer connection remote\n  <code>\"srflx\"</code> (STUN) ICE candidate media description index (starting from <code>0</code>)\n  based on the remote session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "candidates.receiving.relay",
                                    "description": "The Peer connection list of remote\n  <code>\"relay\"</code> (TURN) ICE candidates received.",
                                    "type": "Array"
                                },
                                {
                                    "name": "candidates.receiving.relay.#index",
                                    "description": "The Peer connection remote\n  <code>\"relay\"</code> (TURN) ICE candidate.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "candidates.receiving.relay.#index.candidate",
                                    "description": "The Peer connection remote\n  <code>\"relay\"</code> (TURN) ICE candidate connection description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.relay.#index.sdpMid",
                                    "description": "The Peer connection remote\n  <code>\"relay\"</code> (TURN) ICE candidate identifier based on the remote session description.",
                                    "type": "String"
                                },
                                {
                                    "name": "candidates.receiving.relay.#index.sdpMLineIndex",
                                    "description": "The Peer connection remote\n  <code>\"relay\"</code> (TURN) ICE candidate media description index (starting from <code>0</code>)\n  based on the remote session description.",
                                    "type": "Number"
                                },
                                {
                                    "name": "dataChannels",
                                    "description": "The Peer connection list of Datachannel connections.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "dataChannels.#channelName",
                                    "description": "The Peer connection Datachannel connection stats.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "dataChannels.#channelName.label",
                                    "description": "The Peer connection Datachannel connection ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "dataChannels.#channelName.readyState",
                                    "description": "The Peer connection Datachannel connection readyState.\n  [Rel: Skylink.DATA_CHANNEL_STATE]",
                                    "type": "String"
                                },
                                {
                                    "name": "dataChannels.#channelName.type",
                                    "description": "The Peer connection Datachannel connection type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]",
                                    "type": "String"
                                },
                                {
                                    "name": "dataChannels.#channelName.currentTransferId",
                                    "description": "The Peer connection\n  Datachannel connection current progressing transfer session ID.\n  <small>Defined as <code>null</code> when there is currently no transfer session progressing on the Datachannel connection.</small>",
                                    "type": "String"
                                },
                                {
                                    "name": "dataChannels.#channelName.currentStreamId",
                                    "description": "The Peer connection\n  Datachannel connection current data streaming session ID.\n  <small>Defined as <code>null</code> when there is currently no data streaming session on the Datachannel connection.</small>",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object received.\n  <small>Defined only when <code>state</code> payload is <code>RETRIEVE_ERROR</code>.</small>",
                    "type": "Error"
                }
            ],
            "since": "0.6.14",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1235,
            "description": "Event triggered when <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> changes\nUser Streams audio and video tracks muted status.",
            "itemtype": "event",
            "name": "localMediaMuted",
            "params": [
                {
                    "name": "mediaStatus",
                    "description": "The Streams muted settings.\n  <small>This indicates the muted settings for both\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>.</small>",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audioMuted",
                            "description": "The flag if all Streams audio tracks is muted or not.\n  <small>If User's <code>peerInfo.settings.audio</code> is false, this will be defined as <code>true</code>.</small>",
                            "type": "Boolean"
                        },
                        {
                            "name": "videoMuted",
                            "description": "The flag if all Streams video tracks is muted or not.\n  <small>If User's <code>peerInfo.settings.video</code> is false, this will be defined as <code>true</code>.</small>",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1252,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.<br>\n  Note that this event may not be triggered for MCU enabled Peer connections as ICE candidates\n  may be received in the session description instead.\n</blockquote>\nEvent triggered when remote ICE candidate processing state has changed when Peer is using trickle ICE.",
            "itemtype": "event",
            "name": "candidateProcessingState",
            "params": [
                {
                    "name": "state",
                    "description": "The ICE candidate processing state.\n  [Rel: Skylink.CANDIDATE_PROCESSING_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "candidateId",
                    "description": "The remote ICE candidate session ID.\n  <small>Note that this value is not related to WebRTC API but for identification of remote ICE candidate received.</small>",
                    "type": "String"
                },
                {
                    "name": "candidateType",
                    "description": "The remote ICE candidate type.\n  <small>Expected values are <code>\"host\"</code> (local network), <code>\"srflx\"</code> (STUN) and <code>\"relay\"</code> (TURN).</small>",
                    "type": "String"
                },
                {
                    "name": "candidate",
                    "description": "The remote ICE candidate.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "candidate",
                            "description": "The remote ICE candidate connection description.",
                            "type": "String"
                        },
                        {
                            "name": "sdpMid",
                            "description": "The remote ICE candidate identifier based on the remote session description.",
                            "type": "String"
                        },
                        {
                            "name": "sdpMLineIndex",
                            "description": "The remote ICE candidate media description index\n  (starting from <code>0</code>) based on the remote session description.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.\n  <small>Defined only when <code>state</code> is <code>DROPPED</code> or <code>PROCESS_ERROR</code>.</small>",
                    "type": "Error",
                    "optional": true
                }
            ],
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1280,
            "description": "<blockquote class=\"info\">\n  Learn more about how ICE works in this\n  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.<br>\n  Note that this event may not be triggered for MCU enabled Peer connections as ICE candidates\n  may be received in the session description instead.\n</blockquote>\nEvent triggered when all remote ICE candidates gathering has completed and been processed.",
            "itemtype": "event",
            "name": "candidatesGathered",
            "params": [
                {
                    "name": "peerId",
                    "description": "The Peer ID.",
                    "type": "String"
                },
                {
                    "name": "length",
                    "description": "The remote ICE candidates length.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "expected",
                            "description": "The expected total number of remote ICE candidates to be received.",
                            "type": "Number"
                        },
                        {
                            "name": "received",
                            "description": "The actual total number of remote ICE candidates received.",
                            "type": "Number"
                        },
                        {
                            "name": "processed",
                            "description": "The total number of remote ICE candidates processed.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1300,
            "description": "Function that subscribes a listener to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener.\n  <small>This will be invoked when event is triggered.</small>",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  // Example 1: Subscribing to \"peerJoined\" event\n  skylinkDemo.on(\"peerJoined\", function (peerId, peerInfo, isSelf) {\n    console.info(\"peerJoined event has been triggered with:\", peerId, peerInfo, isSelf);\n  });"
            ],
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1324,
            "description": "Function that subscribes a listener to an event once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener.\n  <small>This will be invoked once when event is triggered and conditional function is satisfied.</small>",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The conditional function that will be invoked when event is triggered.\n  <small>Return <code>true</code> when invoked to satisfy condition.</small>\n  <small>When not provided, the conditional function will always return <code>true</code>.</small>",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The flag that indicates if <code>once()</code> should act like\n  <code>on()</code> but only invoke listener only when conditional function is satisfied.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n  // Example 1: Subscribing to \"peerJoined\" event that triggers without condition\n  skylinkDemo.once(\"peerJoined\", function (peerId, peerInfo, isSelf) {\n    console.info(\"peerJoined event has been triggered once with:\", peerId, peerInfo, isSelf);\n  });\n\n  // Example 2: Subscribing to \"incomingStream\" event that triggers with condition\n  skylinkDemo.once(\"incomingStream\", function (peerId, stream, isSelf, peerInfo) {\n    console.info(\"incomingStream event has been triggered with User stream:\", stream);\n  }, function (peerId, peerInfo, isSelf) {\n    return isSelf;\n  });\n\n  // Example 3: Subscribing to \"dataTransferState\" event that triggers always only when condition is satisfied\n  skylinkDemo.once(\"dataTransferState\", function (state, transferId, peerId, transferInfo) {\n    console.info(\"Received data transfer from Peer:\", transferInfo.data);\n  }, function (state, transferId, peerId) {\n    if (state === skylinkDemo.DATA_TRANSFER_STATE.UPLOAD_REQUEST) {\n      skylinkDemo.acceptDataTransfer(peerId, transferId);\n    }\n    return state === skylinkDemo.DATA_TRANSFER_STATE.DOWNLOAD_COMPLETED;\n  }, true);"
            ],
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1379,
            "description": "Function that unsubscribes listeners from an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event.\n- When not provided, all listeners to all events will be unsubscribed.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The listener to unsubscribe.\n- When not provided, all listeners associated to the event will be unsubscribed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Unsubscribe all \"peerJoined\" event\n  skylinkDemo.off(\"peerJoined\");\n\n  // Example 2: Unsubscribe only one listener from \"peerJoined event\"\n  var pJListener = function (peerId, peerInfo, isSelf) {\n    console.info(\"peerJoined event has been triggered with:\", peerId, peerInfo, isSelf);\n  };\n\n  skylinkDemo.off(\"peerJoined\", pJListener);"
            ],
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1434,
            "description": "Function that triggers an event.\nThe rest of the parameters after the <code>eventName</code> parameter is considered as the event parameter payloads.",
            "itemtype": "method",
            "name": "_trigger",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1487,
            "description": "Function that checks if the current state condition is met before subscribing\n  event handler to wait for condition to be fulfilled.",
            "itemtype": "method",
            "name": "_condition",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1513,
            "description": "Function that starts an interval check to wait for a condition to be resolved.",
            "itemtype": "method",
            "name": "_wait",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1551,
            "description": "Function that throttles a method function to prevent multiple invokes over a specified amount of time.\nReturns a function to be invoked <code>._throttle(fn, 1000)()</code> to make throttling functionality work.",
            "itemtype": "method",
            "name": "_throttle",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 1,
            "description": "The list of <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> socket connection failure states.",
            "itemtype": "attribute",
            "name": "SOCKET_ERROR",
            "params": [
                {
                    "name": "CONNECTION_FAILED",
                    "description": "<small>Value <code>0</code></small>\n  The value of the failure state when <code>joinRoom()</code> socket connection failed to establish with\n  the Signaling server at the first attempt.",
                    "type": "Number"
                },
                {
                    "name": "RECONNECTION_FAILED",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the failure state when <code>joinRoom()</code> socket connection failed to establish\n  the Signaling server after the first attempt.",
                    "type": "Number"
                },
                {
                    "name": "CONNECTION_ABORTED",
                    "description": "<small>Value <code>-2</code></small>\n  The value of the failure state when <code>joinRoom()</code> socket connection will not attempt\n  to reconnect after the failure of the first attempt in <code>CONNECTION_FAILED</code> as there\n  are no more ports or transports to attempt for reconnection.",
                    "type": "Number"
                },
                {
                    "name": "RECONNECTION_ABORTED",
                    "description": "<small>Value <code>-3</code></small>\n  The value of the failure state when <code>joinRoom()</code> socket connection will not attempt\n  to reconnect after the failure of several attempts in <code>RECONNECTION_FAILED</code> as there\n  are no more ports or transports to attempt for reconnection.",
                    "type": "Number"
                },
                {
                    "name": "RECONNECTION_ATTEMPT",
                    "description": "<small>Value <code>-4</code></small>\n  The value of the failure state when <code>joinRoom()</code> socket connection is attempting\n  to reconnect with a new port or transport after the failure of attempts in\n  <code>CONNECTION_FAILED</code> or <code>RECONNECTED_FAILED</code>.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 35,
            "description": "The list of <a href=\"#method_joinRoom\"><code>joinRoom()</code> method</a> socket connection reconnection states.",
            "itemtype": "attribute",
            "name": "SOCKET_FALLBACK",
            "params": [
                {
                    "name": "NON_FALLBACK",
                    "description": "<small>Value <code>\"nonfallback\"</code></small>\n  The value of the reconnection state when <code>joinRoom()</code> socket connection is at its initial state\n  without transitioning to any new socket port or transports yet.",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT",
                    "description": "<small>Value <code>\"fallbackPortNonSSL\"</code></small>\n  The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n  another new HTTP port using WebSocket transports to attempt to establish connection with Signaling server.",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT_SSL",
                    "description": "<small>Value <code>\"fallbackPortSSL\"</code></small>\n  The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n  another new HTTPS port using WebSocket transports to attempt to establish connection with Signaling server.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING",
                    "description": "<small>Value <code>\"fallbackLongPollingNonSSL\"</code></small>\n  The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n  another new HTTP port using Polling transports to attempt to establish connection with Signaling server.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING_SSL",
                    "description": "<small>Value <code>\"fallbackLongPollingSSL\"</code></small>\n  The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n  another new HTTPS port using Polling transports to attempt to establish connection with Signaling server.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 66,
            "description": "Function that sends a socket message over the socket connection to the Signaling.",
            "itemtype": "method",
            "name": "_sendChannelMessage",
            "access": "private",
            "tagname": "",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 269,
            "description": "Function that creates and opens a socket connection to the Signaling.",
            "itemtype": "method",
            "name": "_createSocket",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 444,
            "description": "Function that starts the socket connection to the Signaling.\nThis starts creating the socket connection and called at first not when requiring to fallback.",
            "itemtype": "method",
            "name": "_openChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 488,
            "description": "Function that stops the socket connection to the Signaling.",
            "itemtype": "method",
            "name": "_closeChannel",
            "access": "private",
            "tagname": "",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Note that this is used only for SDK developer purposes.<br>\n  Current version: <code>0.1.1</code>\n</blockquote>\nThe value of the current version of the Signaling socket message protocol.",
            "itemtype": "attribute",
            "name": "SM_PROTOCOL_VERSION",
            "type": "String",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 14,
            "description": "Stores the list of socket messaging protocol types.\nSee confluence docs for the list based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "attribute",
            "name": "_SIG_MESSAGE_TYPE",
            "type": "JSON",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 54,
            "description": "Stores the list of socket messaging protocol types to queue when sent less than a second interval.",
            "itemtype": "attribute",
            "name": "_groupMessageList",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 70,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that sends a message to Peers via the Signaling socket connection.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "The target Peer ID to send message to.\n- When provided as an Array, it will send the message to only Peers which IDs are in the list.\n- When not provided, it will broadcast the message to all connected Peers in the Room.",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Broadcasting to all Peers\n  skylinkDemo.sendMessage(\"Hi all!\");\n\n  // Example 2: Sending to specific Peers\n  var peersInExclusiveParty = [];\n\n  skylinkDemo.on(\"peerJoined\", function (peerId, peerInfo, isSelf) {\n    if (isSelf) return;\n    if (peerInfo.userData.exclusive) {\n      peersInExclusiveParty.push(peerId);\n    }\n  });\n\n  function updateExclusivePartyStatus (message) {\n    skylinkDemo.sendMessage(message, peersInExclusiveParty);\n  }"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Sends socket connection message to all targeted Peers via Signaling server. <ol>\n  <li><a href=\"#event_incomingMessage\"><code>incomingMessage</code> event</a> triggers parameter payload\n  <code>message.isDataChannel</code> value as <code>false</code>.</li></ol></li></ol>",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 180,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires MCU and recording to be enabled for the App Key provided in the\n  <a href=\"#method_init\"><code>init()</code> method</a>. If recording feature is not available to\n  be enabled in the <a href=\"https://console.temasys.io\">Developer Console</a>, please\n  <a href=\"http://support.temasys.io\">contact us on our support portal</a>.\n</blockquote>\nStarts a recording session.",
            "itemtype": "method",
            "name": "startRecording",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_recordingState\">\n  <code>recordingState</code> event</a> triggering <code>state</code> parameter payload as <code>START</code>.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>startRecording()</code> error when starting a new recording session.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>\n  <small>Object signature is the <a href=\"#event_recordingState\">\n  <code>recordingState</code> event</a> triggered <code>recordingId</code> parameter payload.</small>",
                            "type": "String|JSON"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Start recording session\n  skylinkDemo.startRecording(function (error, success) {\n    if (error) return;\n    console.info(\"Recording session has started. ID ->\", success);\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If MCU is not connected: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>If there is an existing recording session currently going on: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Sends to MCU via Signaling server to start recording session. <ol>\n  <li>If recording session has been started successfully: <ol>\n  <li><a href=\"#event_recordingState\"><code>recordingState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>START</code>.</li></ol></li></ol></li></ol>",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 256,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires MCU and recording to be enabled for the App Key provided in the\n  <a href=\"#method_init\"><code>init()</code> method</a>. If recording feature is not available to\n  be enabled in the <a href=\"https://console.temasys.io\">Developer Console</a>, please\n  <a href=\"http://support.temasys.io\">contact us on our support portal</a>.\n</blockquote>\nStops a recording session.",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_recordingState\">\n  <code>recordingState</code> event</a> triggering <code>state</code> parameter payload as <code>STOP</code>\n  or as <code>LINK</code> when the value of <code>callbackSuccessWhenLink</code> is <code>true</code>.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>stopRecording()</code> error when stopping current recording session.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n- When <code>callbackSuccessWhenLink</code> value is <code>false</code>, it is defined as string as\n  the recording session ID.\n- when <code>callbackSuccessWhenLink</code> value is <code>true</code>, it is defined as an object as\n  the recording session information.\n  <small>Defined as <code>null</code> when there are errors in request</small>",
                            "type": "String|JSON",
                            "props": [
                                {
                                    "name": "recordingId",
                                    "description": "The recording session ID.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "link",
                                    "description": "The recording session mixin videos link in\n  <a href=\"https://en.wikipedia.org/wiki/MPEG-4_Part_14\">MP4</a> format.\n  <small>Object signature matches the <code>link</code> parameter payload received in the\n  <a href=\"#event_recordingState\"><code>recordingState</code> event</a>.</small>",
                                    "type": "JSON"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callbackSuccessWhenLink",
                    "description": "The flag if <code>callback</code> function provided\n  should result in success only when <a href=\"#event_recordingState\"><code>recordingState</code> event</a>\n  triggering <code>state</code> parameter payload as <code>LINK</code>.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "itemtype": "method",
            "name": "stopRecording",
            "example": [
                "\n  // Example 1: Stop recording session\n  skylinkDemo.stopRecording(function (error, success) {\n    if (error) return;\n    console.info(\"Recording session has stopped. ID ->\", success);\n  });\n\n  // Example 2: Stop recording session with mixin videos link\n  skylinkDemo.stopRecording(function (error, success) {\n    if (error) return;\n    console.info(\"Recording session has compiled with links ->\", success.link);\n  }, true);"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If MCU is not connected: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>If there is no existing recording session currently going on: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li>\n  <li>If existing recording session recording time has not elapsed more than 4 seconds:\n  <small>4 seconds is mandatory for recording session to ensure better recording\n  experience and stability.</small> <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Sends to MCU via Signaling server to stop recording session: <ol>\n  <li>If recording session has been stopped successfully: <ol>\n  <li><a href=\"#event_recordingState\"><code>recordingState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>START</code>.\n  <li>MCU starts mixin recorded session videos: <ol>\n  <li>If recording session has been mixin successfully with links: <ol>\n  <li><a href=\"#event_recordingState\"><code>recordingState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>LINK</code>.<li>Else: <ol>\n  <li><a href=\"#event_recordingState\"><code>recordingState</code> event</a> triggers\n  parameter payload <code>state</code> as <code>ERROR</code>.<li><b>ABORT</b> and return error.</ol></li>\n  </ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_recordingState\"><code>recordingState</code> event</a>\n  triggers parameter payload <code>state</code> as <code>ERROR</code>.</li><li><b>ABORT</b> and return error.</li>\n  </ol></li></ol></li></ol>",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 392,
            "description": "<blockquote class=\"info\">\n  Note that this feature requires MCU and recording to be enabled for the App Key provided in the\n  <a href=\"#method_init\"><code>init()</code> method</a>. If recording feature is not available to\n  be enabled in the <a href=\"https://console.temasys.io\">Developer Console</a>, please\n  <a href=\"http://support.temasys.io\">contact us on our support portal</a>.\n</blockquote>\nGets the list of current recording sessions since User has connected to the Room.",
            "itemtype": "method",
            "name": "getRecordings",
            "return": {
                "description": "The list of recording sessions.<ul>\n  <li><code>#recordingId</code><var><b>{</b>JSON<b>}</b></var><p>The recording session.</p><ul>\n  <li><code>active</code><var><b>{</b>Boolean<b>}</b></var><p>The flag that indicates if the recording session is currently active.</p></li>\n  <li><code>state</code><var><b>{</b>Number<b>}</b></var><p>The current recording state. [Rel: Skylink.RECORDING_STATE]</p></li>\n  <li><code>startedDateTime</code><var><b>{</b>String<b>}</b></var><p>The recording session started DateTime in\n  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 format</a>.<small>Note that this value may not be\n  very accurate as this value is recorded when the start event is received.</small></p></li>\n  <li><code>endedDateTime</code><var><b>{</b>String<b>}</b></var><p>The recording session ended DateTime in\n  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 format</a>.<small>Note that this value may not be\n  very accurate as this value is recorded when the stop event is received.</small>\n  <small>Defined only after <code>state</code> has triggered <code>STOP</code>.</small></p></li>\n  <li><code>mixingDateTime</code><var><b>{</b>String<b>}</b></var><p>The recording session mixing completed DateTime in\n  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 format</a>.<small>Note that this value may not be\n  very accurate as this value is recorded when the mixing completed event is received.</small>\n  <small>Defined only when <code>state</code> is <code>LINK</code>.</small></p></li>\n  <li><code>links</code><var><b>{</b>JSON<b>}</b></var><p>The recording session links.\n  <small>Object signature matches the <code>link</code> parameter payload received in the\n  <a href=\"#event_recordingState\"><code>recordingState</code> event</a>.</small>\n  <small>Defined only when <code>state</code> is <code>LINK</code>.</small></p></li>\n  <li><code>error</code><var><b>{</b>Error<b>}</b></var><p>The recording session error.\n  <small>Defined only when <code>state</code> is <code>ERROR</code>.</small></p></li></ul></li></ul>",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: Get recording sessions\n  skylinkDemo.getRecordings();"
            ],
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 433,
            "description": "Function that handles and processes the socket message received.",
            "itemtype": "method",
            "name": "_processSigMessage",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 524,
            "description": "Function that handles the \"peerList\" socket message received.\nSee confluence docs for the \"peerList\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_peerListEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 540,
            "description": "Function that handles the \"endOfCandidates\" socket message received.\nSee confluence docs for the \"endOfCandidates\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_endOfCandidatesHandler",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 562,
            "description": "Function that handles the \"introduceError\" socket message received.\nSee confluence docs for the \"introduceError\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_introduceErrorEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 578,
            "description": "Function that handles the \"approach\" socket message received.\nSee confluence docs for the \"approach\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_approachEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 626,
            "description": "Function that handles the \"redirect\" socket message received.\nSee confluence docs for the \"redirect\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_redirectHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 658,
            "description": "Function that handles the \"updateUserEvent\" socket message received.\nSee confluence docs for the \"updateUserEvent\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_updateUserEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 685,
            "description": "Function that handles the \"roomLockEvent\" socket message received.\nSee confluence docs for the \"roomLockEvent\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_roomLockEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 700,
            "description": "Function that handles the \"muteAudioEvent\" socket message received.\nSee confluence docs for the \"muteAudioEvent\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_muteAudioEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 730,
            "description": "Function that handles the \"muteVideoEvent\" socket message received.\nSee confluence docs for the \"muteVideoEvent\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_muteVideoEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 760,
            "description": "Function that handles the \"stream\" socket message received.\nSee confluence docs for the \"stream\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_streamEventHandler",
            "access": "private",
            "tagname": "",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 792,
            "description": "Function that handles the \"bye\" socket message received.\nSee confluence docs for the \"bye\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_byeHandler",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 813,
            "description": "Function that handles the \"private\" socket message received.\nSee confluence docs for the \"private\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_privateMessageHandler",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 835,
            "description": "Function that handles the \"public\" socket message received.\nSee confluence docs for the \"public\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_publicMessageHandler",
            "access": "private",
            "tagname": "",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 857,
            "description": "Handles the RECORDING Protocol message event received from the platform signaling.",
            "itemtype": "method",
            "name": "_recordingEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received from platform signaling.\n   This should contain the <code>RECORDING</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "url",
                            "description": "The recording URL if mixing has completed.",
                            "type": "String"
                        },
                        {
                            "name": "action",
                            "description": "The recording action received.",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The recording error exception received.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 960,
            "description": "Function that handles the \"inRoom\" socket message received.\nSee confluence docs for the \"inRoom\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_inRoomHandler",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1027,
            "description": "Function that handles the \"enter\" socket message received.\nSee confluence docs for the \"enter\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_enterHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1182,
            "description": "Function that handles the \"restart\" socket message received.\nSee confluence docs for the \"restart\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_restartHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1317,
            "description": "Function that handles the \"welcome\" socket message received.\nSee confluence docs for the \"welcome\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_welcomeHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1489,
            "description": "Function that handles the \"offer\" socket message received.\nSee confluence docs for the \"offer\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_offerHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1590,
            "description": "Function that handles the \"candidate\" socket message received.\nSee confluence docs for the \"candidate\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_candidateHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1685,
            "description": "Function that handles the \"answer\" socket message received.\nSee confluence docs for the \"answer\" expected properties to be received\n  based on the current <code>SM_PROTOCOL_VERSION</code>.",
            "itemtype": "method",
            "name": "_answerHandler",
            "access": "private",
            "tagname": "",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1799,
            "description": "Function that compares the SM / DT protocol versions to see if it in the version.",
            "itemtype": "method",
            "name": "_isLowerThanVersion",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1,
            "description": "<blockquote class=\"info\">\n  Note that if the video codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n  <code>\"answer\"</code> session description to prefer the codec.\n</blockquote>\nThe list of available video codecs to set as the preferred video codec to use to encode\nsending video data when available encoded video codec for Peer connections\nconfigured in the <a href=\"#method_init\"><code>init()</code> method</a>.",
            "itemtype": "attribute",
            "name": "VIDEO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "<small>Value <code>\"auto\"</code></small>\n  The value of the option to not prefer any video codec but rather use the created\n  local <code>\"offer\"</code> / <code>\"answer\"</code> session description video codec preference.",
                    "type": "String"
                },
                {
                    "name": "VP8",
                    "description": "<small>Value <code>\"VP8\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/VP8\">VP8</a> video codec.",
                    "type": "String"
                },
                {
                    "name": "VP9",
                    "description": "<small>Value <code>\"VP9\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/VP9\">VP9</a> video codec.",
                    "type": "String"
                },
                {
                    "name": "H264",
                    "description": "<small>Value <code>\"H264\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC\">H264</a> video codec.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 32,
            "description": "<blockquote class=\"info\">\n  Note that if the audio codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n  <code>\"answer\"</code> session description to prefer the codec.\n</blockquote>\nThe list of available audio codecs to set as the preferred audio codec to use to encode\nsending audio data when available encoded audio codec for Peer connections\nconfigured in the <a href=\"#method_init\"><code>init()</code> method</a>.",
            "itemtype": "attribute",
            "name": "AUDIO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "<small>Value <code>\"auto\"</code></small>\n  The value of the option to not prefer any audio codec but rather use the created\n  local <code>\"offer\"</code> / <code>\"answer\"</code> session description audio codec preference.",
                    "type": "String"
                },
                {
                    "name": "OPUS",
                    "description": "<small>Value <code>\"opus\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Opus_(audio_format)\">OPUS</a> audio codec.",
                    "type": "String"
                },
                {
                    "name": "ISAC",
                    "description": "<small>Value <code>\"ISAC\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Internet_Speech_Audio_Codec\">ISAC</a> audio codec.",
                    "type": "String"
                },
                {
                    "name": "ILBC",
                    "description": "<small>Value <code>\"ILBC\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec\">iLBC</a> audio codec.",
                    "type": "String"
                },
                {
                    "name": "G722",
                    "description": "<small>Value <code>\"G722\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.722\">G722</a> audio codec.",
                    "type": "String"
                },
                {
                    "name": "PCMA",
                    "description": "<small>Value <code>\"PCMA\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.711\">G711u</a> audio codec.",
                    "type": "String"
                },
                {
                    "name": "PCMU",
                    "description": "<small>Value <code>\"PCMU\"</code></small>\n  The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.711\">G711a</a> audio codec.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 72,
            "description": "<blockquote class=\"info\">\n  Note that currently <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> only configures\n  the maximum resolution of the Stream due to browser interopability and support.\n</blockquote>\nThe list of <a href=\"https://en.wikipedia.org/wiki/Graphics_display_resolution#Video_Graphics_Array\">\nvideo resolutions</a> sets configured in the <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.",
            "itemtype": "attribute",
            "name": "VIDEO_RESOLUTION",
            "params": [
                {
                    "name": "QQVGA",
                    "description": "<small>Value <code>{ width: 160, height: 120 }</code></small>\n  The value of the option to configure QQVGA resolution.\n  <small>Aspect ratio: <code>4:3</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "HQVGA",
                    "description": "<small>Value <code>{ width: 240, height: 160 }</code></small>\n  The value of the option to configure HQVGA resolution.\n  <small>Aspect ratio: <code>3:2</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "QVGA",
                    "description": "<small>Value <code>{ width: 320, height: 240 }</code></small>\n  The value of the option to configure QVGA resolution.\n  <small>Aspect ratio: <code>4:3</code></small>",
                    "type": "JSON"
                },
                {
                    "name": "WQVGA",
                    "description": "<small>Value <code>{ width: 384, height: 240 }</code></small>\n  The value of the option to configure WQVGA resolution.\n  <small>Aspect ratio: <code>16:10</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "HVGA",
                    "description": "<small>Value <code>{ width: 480, height: 320 }</code></small>\n  The value of the option to configure HVGA resolution.\n  <small>Aspect ratio: <code>3:2</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "VGA",
                    "description": "<small>Value <code>{ width: 640, height: 480 }</code></small>\n  The value of the option to configure VGA resolution.\n  <small>Aspect ratio: <code>4:3</code></small>",
                    "type": "JSON"
                },
                {
                    "name": "WVGA",
                    "description": "<small>Value <code>{ width: 768, height: 480 }</code></small>\n  The value of the option to configure WVGA resolution.\n  <small>Aspect ratio: <code>16:10</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "FWVGA",
                    "description": "<small>Value <code>{ width: 854, height: 480 }</code></small>\n  The value of the option to configure FWVGA resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "SVGA",
                    "description": "<small>Value <code>{ width: 800, height: 600 }</code></small>\n  The value of the option to configure SVGA resolution.\n  <small>Aspect ratio: <code>4:3</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "DVGA",
                    "description": "<small>Value <code>{ width: 960, height: 640 }</code></small>\n  The value of the option to configure DVGA resolution.\n  <small>Aspect ratio: <code>3:2</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "WSVGA",
                    "description": "<small>Value <code>{ width: 1024, height: 576 }</code></small>\n  The value of the option to configure WSVGA resolution.\n  <small>Aspect ratio: <code>16:9</code></small>",
                    "type": "JSON"
                },
                {
                    "name": "HD",
                    "description": "<small>Value <code>{ width: 1280, height: 720 }</code></small>\n  The value of the option to configure HD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "HDPLUS",
                    "description": "<small>Value <code>{ width: 1600, height: 900 }</code></small>\n  The value of the option to configure HDPLUS resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "FHD",
                    "description": "<small>Value <code>{ width: 1920, height: 1080 }</code></small>\n  The value of the option to configure FHD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "QHD",
                    "description": "<small>Value <code>{ width: 2560, height: 1440 }</code></small>\n  The value of the option to configure QHD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "WQXGAPLUS",
                    "description": "<small>Value <code>{ width: 3200, height: 1800 }</code></small>\n  The value of the option to configure WQXGAPLUS resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "UHD",
                    "description": "<small>Value <code>{ width: 3840, height: 2160 }</code></small>\n  The value of the option to configure UHD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "UHDPLUS",
                    "description": "<small>Value <code>{ width: 5120, height: 2880 }</code></small>\n  The value of the option to configure UHDPLUS resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "FUHD",
                    "description": "<small>Value <code>{ width: 7680, height: 4320 }</code></small>\n  The value of the option to configure FUHD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                },
                {
                    "name": "QUHD",
                    "description": "<small>Value <code>{ width: 15360, height: 8640 }</code></small>\n  The value of the option to configure QUHD resolution.\n  <small>Aspect ratio: <code>16:9</code></small>\n  <small>Note that configurating this resolution may not be supported depending on browser and device supports.</small>",
                    "type": "JSON"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 185,
            "description": "The list of <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> or\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a> Stream fallback states.",
            "itemtype": "attribute",
            "name": "MEDIA_ACCESS_FALLBACK_STATE",
            "params": [
                {
                    "name": "FALLBACKING",
                    "description": "<small>Value <code>0</code></small>\n  The value of the state when <code>getUserMedia()</code> will retrieve audio track only\n  when retrieving audio and video tracks failed.\n  <small>This can be configured by <a href=\"#method_init\"><code>init()</code> method</a>\n  <code>audioFallback</code> option.</small>",
                    "type": "JSON"
                },
                {
                    "name": "FALLBACKED",
                    "description": "<small>Value <code>1</code></small>\n  The value of the state when <code>getUserMedia()</code> or <code>shareScreen()</code>\n  retrieves camera / screensharing Stream successfully but with missing originally required audio or video tracks.",
                    "type": "JSON"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the state when <code>getUserMedia()</code> failed to retrieve audio track only\n  after retrieving audio and video tracks failed.",
                    "type": "JSON"
                }
            ],
            "readonly": "",
            "since": "0.6.14",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 210,
            "description": "The list of recording states.",
            "itemtype": "attribute",
            "name": "RECORDING_STATE",
            "params": [
                {
                    "name": "START",
                    "description": "<small>Value <code>0</code></small>\n  The value of the state when recording session has started.",
                    "type": "Number"
                },
                {
                    "name": "STOP",
                    "description": "<small>Value <code>1</code></small>\n  The value of the state when recording session has stopped.<br>\n  <small>At this stage, the recorded videos will go through the mixin server to compile the videos.</small>",
                    "type": "Number"
                },
                {
                    "name": "LINK",
                    "description": "<small>Value <code>2</code></small>\n  The value of the state when recording session mixin request has been completed.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "<small>Value <code>-1</code></small>\n  The value of the state state when recording session has errors.\n  <small>This can happen during recording session or during mixin of recording videos,\n  and at this stage, any current recording session or mixin is aborted.</small>",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "beta": 1,
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 236,
            "description": "<blockquote class=\"info\">\n  For a better user experience, the functionality is throttled when invoked many times in less\n  than the milliseconds interval configured in the <a href=\"#method_init\"><code>init()</code> method</a>.\n</blockquote>\nFunction that retrieves camera Stream.",
            "itemtype": "method",
            "name": "getUserMedia",
            "params": [
                {
                    "name": "options",
                    "description": "The camera Stream configuration options.\n- When not provided, the value is set to <code>{ audio: true, video: true }</code>.\n  <small>To fallback to retrieve audio track only when retrieving of audio and video tracks failed,\n  enable the <code>audioFallback</code> flag in the <a href=\"#method_init\"><code>init()</code> method</a>.</small>",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "useExactConstraints",
                            "description": "<blockquote class=\"info\">\n  Note that by enabling this flag, exact values will be requested when retrieving camera Stream,\n  but it does not prevent constraints related errors. By default when not enabled,\n  expected mandatory maximum values (or optional values for source ID) will requested to prevent constraints related\n  errors, with an exception for <code>options.video.frameRate</code> option in Safari and IE (any plugin-enabled) browsers,\n  where the expected maximum value will not be requested due to the lack of support.</blockquote>\n  The flag if <code>getUserMedia()</code> should request for camera Stream to match exact requested values of\n  <code>options.audio.deviceId</code> and <code>options.video.deviceId</code>, <code>options.video.resolution</code>\n  and <code>options.video.frameRate</code> when provided.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "audio",
                            "description": "<blockquote class=\"info\">\n   Note that the current Edge browser implementation does not support the <code>options.audio.optional</code>,\n   <code>options.audio.deviceId</code>, <code>options.audio.echoCancellation</code>.</blockquote>\n   The audio configuration options.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.stereo</code> is configured, this overrides the\n  <code>options.audio.stereo</code> setting.</blockquote>\n  The flag if OPUS audio codec stereo band should be configured for sending encoded audio data.\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "usedtx",
                                    "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.stereo</code> is configured, this overrides the\n  <code>options.audio.stereo</code> setting.  Note that this feature might\n  not work depending on the browser support and implementation.</blockquote>\n  The flag if OPUS audio codec should enable DTX (Discontinuous Transmission) for sending encoded audio data.\n  <small>This might help to reduce bandwidth as it reduces the bitrate during silence or background noise, and\n  goes hand-in-hand with the <code>options.voiceActivityDetection</code> flag in <a href=\"#method_joinRoom\">\n  <code>joinRoom()</code> method</a>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "useinbandfec",
                                    "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.useinbandfec</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.useinbandfec</code> is configured, this overrides the\n  <code>options.audio.useinbandfec</code> setting. Note that this parameter should only be used\n  for debugging purposes only.</blockquote>\n  The flag if OPUS audio codec has the capability to take advantage of the in-band FEC\n  (Forward Error Correction) when sending encoded audio data.\n  <small>This helps to reduce the harm of packet loss by encoding information about the previous packet loss.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "maxplaybackrate",
                                    "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.maxplaybackrate</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.maxplaybackrate</code> is configured, this overrides the\n  <code>options.audio.maxplaybackrate</code> setting.  Note that this feature might\n  not work depending on the browser support and implementation.\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The OPUS audio codec maximum output sampling rate in Hz (hertz) that is is capable of receiving\n  decoded audio data, to adjust to the hardware limitations and ensure that any sending audio data\n  would not encode at a higher sampling rate specified by this.\n  <small>This value must be between <code>8000</code> to <code>48000</code>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "The flag if audio tracks should be muted upon receiving them.\n  <small>Providing the value as <code>false</code> does nothing to <code>peerInfo.mediaStatus.audioMuted</code>,\n  but when provided as <code>true</code>, this sets the <code>peerInfo.mediaStatus.audioMuted</code> value to\n  <code>true</code> and mutes any existing <a href=\"#method_shareScreen\">\n  <code>shareScreen()</code> Stream</a> audio tracks as well.</small>",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "optional",
                                    "description": "<blockquote class=\"info\">\n  Note that this may result in constraints related error when <code>options.useExactConstraints</code> value is\n  <code>true</code>. If you are looking to set the requested source ID of the audio track,\n  use <code>options.audio.deviceId</code> instead.</blockquote>\n  The <code>navigator.getUserMedia()</code> API <code>audio: { optional [..] }</code> property.",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "deviceId",
                                    "description": "<blockquote class=\"info\">\n  Note this is currently not supported in Firefox browsers.\n  </blockquote> The audio track source ID of the device to use.\n  <small>The list of available audio source ID can be retrieved by the <a href=\"https://developer.\nmozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>navigator.mediaDevices.enumerateDevices</code>\n  API</a>.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "echoCancellation",
                                    "description": "<blockquote class=\"info\">\n  For Chrome/Opera/IE/Safari/Bowser, the echo cancellation functionality may not work and may produce a terrible\n  feedback. It is recommended to use headphones or other microphone devices rather than the device\n  in-built microphones.</blockquote> The flag to enable echo cancellation for audio track.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "<blockquote class=\"info\">\n   Note that the current Edge browser implementation does not support the <code>options.video.optional</code>,\n   <code>options.video.deviceId</code>, <code>options.video.resolution</code> and\n   <code>options.video.frameRate</code>, <code>options.video.facingMode</code>.</blockquote>\n  The video configuration options.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "mute",
                                    "description": "The flag if video tracks should be muted upon receiving them.\n  <small>Providing the value as <code>false</code> does nothing to <code>peerInfo.mediaStatus.videoMuted</code>,\n  but when provided as <code>true</code>, this sets the <code>peerInfo.mediaStatus.videoMuted</code> value to\n  <code>true</code> and mutes any existing <a href=\"#method_shareScreen\">\n  <code>shareScreen()</code> Stream</a> video tracks as well.</small>",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "resolution",
                                    "description": "The video resolution.\n  <small>By default, <a href=\"#attr_VIDEO_RESOLUTION\"><code>VGA</code></a> resolution option\n  is selected when not provided.</small>\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video resolution width.\n- When provided as a number, it is the video resolution width.\n- When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.width</code> settings.\n  Parameters are <code>\"ideal\"</code> for ideal resolution width, <code>\"exact\"</code> for exact video resolution width,\n  <code>\"min\"</code> for min video resolution width and <code>\"max\"</code> for max video resolution width.\n  Note that this may result in constraints related errors depending on the browser/hardware supports.",
                                    "type": "Number|JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video resolution height.\n- When provided as a number, it is the video resolution height.\n- When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.height</code> settings.\n  Parameters are <code>\"ideal\"</code> for ideal video resolution height, <code>\"exact\"</code> for exact video resolution height,\n  <code>\"min\"</code> for min video resolution height and <code>\"max\"</code> for max video resolution height.\n  Note that this may result in constraints related errors depending on the browser/hardware supports.",
                                    "type": "Number|JSON",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video <a href=\"https://en.wikipedia.org/wiki/Frame_rate\">\n  frameRate</a> per second (fps).\n- When provided as a number, it is the video framerate.\n- When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.frameRate</code> settings.\n  Parameters are <code>\"ideal\"</code> for ideal video framerate, <code>\"exact\"</code> for exact video framerate,\n  <code>\"min\"</code> for min video framerate and <code>\"max\"</code> for max video framerate.\n  Note that this may result in constraints related errors depending on the browser/hardware supports.",
                                    "type": "Number|JSON",
                                    "optional": true
                                },
                                {
                                    "name": "optional",
                                    "description": "<blockquote class=\"info\">\n  Note that this may result in constraints related error when <code>options.useExactConstraints</code> value is\n  <code>true</code>. If you are looking to set the requested source ID of the video track,\n  use <code>options.video.deviceId</code> instead.</blockquote>\n  The <code>navigator.getUserMedia()</code> API <code>video: { optional [..] }</code> property.",
                                    "type": "Array",
                                    "optional": true
                                },
                                {
                                    "name": "deviceId",
                                    "description": "<blockquote class=\"info\">\n  Note this is currently not supported in Firefox browsers.\n  </blockquote> The video track source ID of the device to use.\n  <small>The list of available video source ID can be retrieved by the <a href=\"https://developer.\nmozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"><code>navigator.mediaDevices.enumerateDevices</code>\n  API</a>.</small>",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "facingMode",
                                    "description": "The video camera facing mode.\n  <small>The list of available video source ID can be retrieved by the <a href=\"https://developer.mozilla.org\n  /en-US/docs/Web/API/MediaTrackConstraints/facingMode\">MediaTrackConstraints <code>facingMode</code> API</a>.</small>",
                                    "type": "String|JSON",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_mediaAccessSuccess\">\n  <code>mediaAccessSuccess</code> event</a> triggering <code>isScreensharing</code> parameter\n  payload value as <code>false</code> for request success.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>getUserMedia()</code> error when retrieving camera Stream.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>\n  <small>Object signature is the camera Stream object.</small>",
                            "type": "MediaStream"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Get both audio and video.\n  skylinkDemo.getUserMedia(function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-video\"), success);\n  });\n\n  // Example 2: Get only audio.\n  skylinkDemo.getUserMedia({\n    audio: true\n  }, function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-audio\"), success);\n  });\n\n  // Example 3: Configure resolution for video\n  skylinkDemo.getUserMedia({\n    audio: true,\n    video: {\n      resolution: skylinkDemo.VIDEO_RESOLUTION.HD\n    }\n  }, function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-video\"), success);\n  });\n\n  // Example 4: Configure stereo flag for OPUS codec audio (OPUS is always used by default)\n  skylinkDemo.init({\n    appKey: \"xxxxxx\",\n    audioCodec: skylinkDemo.AUDIO_CODEC.OPUS\n  }, function (initErr, initSuccess) {\n    skylinkDemo.getUserMedia({\n      audio: {\n        stereo: true\n      },\n      video: true\n    }, function (error, success) {\n      if (error) return;\n      attachMediaStream(document.getElementById(\"my-video\"), success);\n    });\n  });\n\n  // Example 5: Configure frameRate for video\n  skylinkDemo.getUserMedia({\n    audio: true,\n    video: {\n      frameRate: 50\n    }\n  }, function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-video\"), success);\n  });\n\n  // Example 6: Configure video and audio based on selected sources. Does not work for Firefox currently.\n  var sources = { audio: [], video: [] };\n\n  function selectStream (audioSourceId, videoSourceId) {\n    if (window.webrtcDetectedBrowser === 'firefox') {\n      console.warn(\"Currently this feature is not supported by Firefox browsers!\");\n      return;\n    }\n    skylinkDemo.getUserMedia({\n      audio: {\n        optional: [{ sourceId: audioSourceId }]\n      },\n      video: {\n        optional: [{ sourceId: videoSourceId }]\n      }\n    }, function (error, success) {\n      if (error) return;\n      attachMediaStream(document.getElementById(\"my-video\"), success);\n    });\n  }\n\n  navigator.mediaDevices.enumerateDevices().then(function(devices) {\n    var selectedAudioSourceId = \"\";\n    var selectedVideoSourceId = \"\";\n    devices.forEach(function(device) {\n      console.log(device.kind + \": \" + device.label + \" source ID = \" + device.deviceId);\n      if (device.kind === \"audio\") {\n        selectedAudioSourceId = device.deviceId;\n      } else {\n        selectedVideoSourceId = device.deviceId;\n      }\n    });\n    selectStream(selectedAudioSourceId, selectedVideoSourceId);\n  }).catch(function (error) {\n     console.error(\"Failed\", error);\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If <code>options.audio</code> value is <code>false</code> and <code>options.video</code>\n  value is <code>false</code>: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Retrieve camera Stream. <ol><li>If retrieval was succesful: <ol>\n  <li>If there is any previous <code>getUserMedia()</code> Stream: <ol>\n  <li>Invokes <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>.</li></ol></li>\n  <li>If there are missing audio or video tracks requested: <ol>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a> triggers parameter payload\n  <code>state</code> as <code>FALLBACKED</code>, <code>isScreensharing</code> value as <code>false</code> and\n  <code>isAudioFallback</code> value as <code>false</code>.</li></ol></li>\n  <li>Mutes / Unmutes audio and video tracks based on current muted settings in <code>peerInfo.mediaStatus</code>.\n  <small>This can be retrieved with <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a>.</small></li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers parameter payload\n  <code>isScreensharing</code> value as <code>false</code> and <code>isAudioFallback</code>\n  value as <code>false</code>.</li></ol></li><li>Else: <ol>\n  <li>If <code>options.audioFallback</code> is enabled in the <a href=\"#method_init\"><code>init()</code> method</a>,\n  <code>options.audio</code> value is <code>true</code> and <code>options.video</code> value is <code>true</code>: <ol>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a> event triggers\n  parameter payload <code>state</code> as <code>FALLBACKING</code>, <code>isScreensharing</code>\n  value as <code>false</code> and <code>isAudioFallback</code> value as <code>true</code>.</li>\n  <li>Retrieve camera Stream with audio tracks only. <ol><li>If retrieval was successful: <ol>\n  <li>If there is any previous <code>getUserMedia()</code> Stream: <ol>\n  <li>Invokes <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>.</li></ol></li>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a> event triggers\n  parameter payload <code>state</code> as <code>FALLBACKED</code>, <code>isScreensharing</code>\n  value as <code>false</code> and <code>isAudioFallback</code> value as <code>true</code>.</li>\n  <li>Mutes / Unmutes audio and video tracks based on current muted settings in <code>peerInfo.mediaStatus</code>.\n  <small>This can be retrieved with <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a>.</small></li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>false</code> and\n  <code>isAudioFallback</code> value as <code>true</code>.</li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_mediaAccessError\"><code>mediaAccessError</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>false</code> and\n  <code>isAudioFallbackError</code> value as <code>true</code>.</li>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a> event triggers\n  parameter payload <code>state</code> as <code>ERROR</code>, <code>isScreensharing</code> value as\n  <code>false</code> and <code>isAudioFallback</code> value as <code>true</code>.</li>\n  <li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_mediaAccessError\"><code>mediaAccessError</code> event</a> triggers parameter payload\n  <code>isScreensharing</code> value as <code>false</code> and <code>isAudioFallbackError</code> value as\n  <code>false</code>.</li><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li></ol></li></ol>",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 608,
            "description": "<blockquote class=\"info\">\n  Note that if <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> is available despite having\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> available, the\n  <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> is sent instead of the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> to Peers.\n</blockquote>\nFunction that sends a new <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>\nto all connected Peers in the Room.",
            "itemtype": "method",
            "name": "sendStream",
            "params": [
                {
                    "name": "options",
                    "description": "The <a href=\"#method_getUserMedia\"><code>getUserMedia()</code>\n  method</a> <code>options</code> parameter settings.\n- When provided as a <code>MediaStream</code> object, this configures the <code>options.audio</code> and\n  <code>options.video</code> based on the tracks available in the <code>MediaStream</code> object,\n  and configures the <code>options.audio.mute</code> and <code>options.video.mute</code> based on the tracks\n  <code>.enabled</code> flags in the tracks provided in the <code>MediaStream</code> object without\n  invoking <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.\n  <small>Object signature matches the <code>options</code> parameter in the\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>.</small>",
                    "type": "JSON|MediaStream"
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_mediaAccessSuccess\">\n  <code>mediaAccessSuccess</code> event</a> triggering <code>isScreensharing</code> parameter payload value\n  as <code>false</code> for request success when User is in Room without Peers,\n  or by the <a href=\"#event_peerRestart\"><code>peerRestart</code> event</a> triggering\n  <code>isSelfInitiateRestart</code> parameter payload value as <code>true</code> for all connected Peers\n  for request success when User is in Room with Peers.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> error or\n  when invalid <code>options</code> is provided.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>\n  <small>Object signature is the <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a>\n  Stream object.</small>",
                            "type": "MediaStream"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Send MediaStream object\n  function retrieveStreamBySourceForFirefox (sourceId) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: {\n        sourceId: { exact: sourceId }\n      }\n    }).then(function (stream) {\n      skylinkDemo.sendStream(stream, function (error, success) {\n        if (err) return;\n        if (stream === success) {\n          console.info(\"Same MediaStream has been sent\");\n        }\n        console.log(\"Stream is now being sent to Peers\");\n        attachMediaStream(document.getElementById(\"my-video\"), success);\n      });\n    });\n  }\n\n  // Example 2: Send video later\n  var inRoom = false;\n\n  function sendVideo () {\n    if (!inRoom) return;\n    skylinkDemo.sendStream({\n      audio: true,\n      video: true\n    }, function (error, success) {\n      if (error) return;\n      console.log(\"getUserMedia() Stream with video is now being sent to Peers\");\n      attachMediaStream(document.getElementById(\"my-video\"), success);\n    });\n  }\n\n  skylinkDemo.joinRoom({\n    audio: true\n  }, function (jRError, jRSuccess) {\n    if (jRError) return;\n    inRoom = true;\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If User is not in Room: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Checks <code>options</code> provided. <ol><li>If provided parameter <code>options</code> is not valid: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Else if provided parameter <code>options</code> is a Stream object: <ol>\n  <li>Checks if there is any audio or video tracks. <ol><li>If there is no tracks: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li><li>Else: <ol>\n  <li>Set <code>options.audio</code> value as <code>true</code> if Stream has audio tracks.</li>\n  <li>Set <code>options.video</code> value as <code>false</code> if Stream has video tracks.</li>\n  <li>Mutes / Unmutes audio and video tracks based on current muted settings in\n  <code>peerInfo.mediaStatus</code>. <small>This can be retrieved with\n  <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a>.</small></li>\n  <li>If there is any previous <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>:\n  <ol><li>Invokes <a href=\"#method_stopStream\"><code>stopStream()</code> method</a> to stop previous Stream.</li></ol></li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>false</code> and <code>isAudioFallback</code>\n  value as <code>false</code>.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li>Invoke <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> method</a> with\n  <code>options</code> provided in <code>sendStream()</code>. <ol><li>If request has errors: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li></ol></li>\n  <li>If there is currently no <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>: <ol>\n  <li><a href=\"#event_incomingStream\"><code>incomingStream</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code> and <code>stream</code> as\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.</li>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li>\n  <li>Checks if MCU is enabled for App Key provided in <a href=\"#method_init\"><code>init()</code> method</a>. <ol>\n  <li>If MCU is enabled: <ol><li>Invoke <a href=\"#method_refreshConnection\"><code>refreshConnection()</code>\n  method</a>. <ol><li>If request has errors: <ol><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li>\n  <li>Else: <ol><li>If there are connected Peers in the Room: <ol>\n  <li>Invoke <a href=\"#method_refreshConnection\"><code>refreshConnection()</code> method</a>. <ol>\n  <li>If request has errors: <ol><li><b>ABORT</b> and return error.\n  </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 829,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that stops <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.",
            "itemtype": "method",
            "name": "stopStream",
            "example": [
                "\n  function stopStream () {\n    skylinkDemo.stopStream();\n  }\n\n  skylinkDemo.getUserMedia();"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if there is <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>. <ol>\n  <li>If there is <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>: <ol>\n  <li>Stop <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> Stream. <ol>\n  <li><a href=\"#event_mediaAccessStopped\"><code>mediaAccessStopped</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>false</code>.</li><li>If User is in Room: <ol>\n  <li><a href=\"#event_streamEnded\"><code>streamEnded</code> event</a> triggers parameter\n  payload <code>isSelf</code> value as <code>true</code> and <code>isScreensharing</code> value as<code>false</code>\n  .</li><li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li></ol></li></ol></li></ol></li></ol></li></ol>",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 868,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that mutes both <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> audio or video tracks.",
            "itemtype": "method",
            "name": "muteStream",
            "params": [
                {
                    "name": "options",
                    "description": "The Streams muting options.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audioMuted",
                            "description": "The flag if all Streams audio\n  tracks should be muted or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "videoMuted",
                            "description": "The flag if all Streams video\n  tracks should be muted or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Mute both audio and video tracks in all Streams\n  skylinkDemo.muteStream({\n    audioMuted: true,\n    videoMuted: true\n  });\n\n  // Example 2: Mute only audio tracks in all Streams\n  skylinkDemo.muteStream({\n    audioMuted: true,\n    videoMuted: false\n  });\n\n  // Example 3: Mute only video tracks in all Streams\n  skylinkDemo.muteStream({\n    audioMuted: false,\n    videoMuted: true\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>If provided parameter <code>options</code> is invalid: <ol><li><b>ABORT</b> and return error.</li></ol></li>\n  <li>Checks if there is any available Streams: <ol><li>If there is no available Streams: <ol>\n  <li><b>ABORT</b> and return error.</li></ol></li><li>If User is in Room: <ol>\n  <li>Checks if there is audio tracks to mute / unmute: <ol><li>If there is audio tracks to mute / unmute: <ol>\n  <li>If <code>options.audioMuted</code> value is not the same as the current\n  <code>peerInfo.mediaStatus.audioMuted</code>: <small>This can be retrieved with\n  <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a>.</small> <ol>\n  <li><em>For Peer only</em> <a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a>\n  triggers with parameter payload <code>isSelf</code> value as <code>false</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_streamMuted\"><code>streamMuted</code> event</a>\n  triggers with parameter payload <code>isSelf</code> value as <code>false</code>.</li></ol></li></ol></li></ol></li>\n  <li>Checks if there is video tracks to mute / unmute: <ol><li>If there is video tracks to mute / unmute: <ol>\n  <li>If <code>options.videoMuted</code> value is not the same as the current\n  <code>peerInfo.mediaStatus.videoMuted</code>: <small>This can be retrieved with\n  <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a>.</small> <ol>\n  <li><em>For Peer only</em> <a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a>\n  triggers with parameter payload <code>isSelf</code> value as <code>false</code>.</li>\n  <li><em>For Peer only</em> <a href=\"#event_streamMuted\"><code>streamMuted</code> event</a> triggers with\n  parameter payload <code>isSelf</code> value as <code>false</code>.</li></ol></li></ol></li></ol></li></ol></li>\n  <li>If <code>options.audioMuted</code> value is not the same as the current\n  <code>peerInfo.mediaStatus.audioMuted</code> or <code>options.videoMuted</code> value is not\n  the same as the current <code>peerInfo.mediaStatus.videoMuted</code>: <ol>\n  <li><a href=\"#event_localMediaMuted\"><code>localMediaMuted</code> event</a> triggers.</li>\n  <li>If User is in Room: <ol><li><a href=\"#event_streamMuted\"><code>streamMuted</code> event</a>\n  triggers with parameter payload <code>isSelf</code> value as <code>true</code>.</li>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers with\n  parameter payload <code>isSelf</code> value as <code>true</code>.</li></ol></li></ol></li></ol></li></ol>",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1006,
            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This method has been deprecated. Use <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> instead.\n</blockquote>\nFunction that unmutes both <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> audio tracks.",
            "itemtype": "method",
            "name": "enableAudio",
            "deprecated": true,
            "deprecationMessage": "true",
            "example": [
                "\n  function unmuteAudio () {\n    skylinkDemo.enableAudio();\n  }"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Invokes <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> with\n  <code>options.audioMuted</code> value as <code>false</code> and\n  <code>options.videoMuted</code> value with current <code>peerInfo.mediaStatus.videoMuted</code> value.\n  <small>See <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a> for more information.</small></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1033,
            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This method has been deprecated. Use <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> instead.\n</blockquote>\nFunction that mutes both <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> audio tracks.",
            "itemtype": "method",
            "name": "disableAudio",
            "deprecated": true,
            "deprecationMessage": "true",
            "example": [
                "\n  function muteAudio () {\n    skylinkDemo.disableAudio();\n  }"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Invokes <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> with\n  <code>options.audioMuted</code> value as <code>true</code> and\n  <code>options.videoMuted</code> value with current <code>peerInfo.mediaStatus.videoMuted</code> value.\n  <small>See <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a> for more information.</small></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1060,
            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This method has been deprecated. Use <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> instead.\n</blockquote>\nFunction that unmutes both <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> video tracks.",
            "itemtype": "method",
            "name": "enableVideo",
            "deprecated": true,
            "deprecationMessage": "true",
            "example": [
                "\n  function unmuteVideo () {\n    skylinkDemo.enableVideo();\n  }"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Invokes <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> with\n  <code>options.videoMuted</code> value as <code>false</code> and\n  <code>options.audioMuted</code> value with current <code>peerInfo.mediaStatus.audioMuted</code> value.\n  <small>See <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a> for more information.</small></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1087,
            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This method has been deprecated. Use <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> instead.\n</blockquote>\nFunction that mutes both <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a> and\n<a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> video tracks.",
            "itemtype": "method",
            "name": "disableVideo",
            "deprecated": true,
            "deprecationMessage": "true",
            "example": [
                "\n  function muteVideo () {\n    skylinkDemo.disableVideo();\n  }"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Invokes <a href=\"#method_muteStream\"><code>muteStream()</code> method</a> with\n  <code>options.videoMuted</code> value as <code>true</code> and\n  <code>options.audioMuted</code> value with current <code>peerInfo.mediaStatus.audioMuted</code> value.\n  <small>See <a href=\"#method_getPeerInfo\"><code>getPeerInfo()</code> method</a> for more information.</small></li></ol>",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1114,
            "description": "<blockquote class=\"info\">\n  For a better user experience, the functionality is throttled when invoked many times in less\n  than the milliseconds interval configured in the <a href=\"#method_init\"><code>init()</code> method</a>.\n  Note that the Opera and Edge browser does not support screensharing, and as for IE / Safari browsers using\n  the Temasys Plugin screensharing support, check out the <a href=\"https://temasys.com.sg/plugin/#commercial-licensing\">\n  commercial licensing</a> for more options.\n</blockquote>\nFunction that retrieves screensharing Stream.",
            "itemtype": "method",
            "name": "shareScreen",
            "params": [
                {
                    "name": "enableAudio",
                    "description": "The flag if audio tracks should be retrieved.",
                    "type": "JSON|Boolean",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.stereo</code> is configured, this overrides the\n  <code>options.audio.stereo</code> setting.</blockquote>\n  The flag if OPUS audio codec stereo band should be configured for sending encoded audio data.\n  <small>When not provided, the default browser configuration is used.</small>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "usedtx",
                            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.stereo</code> is configured, this overrides the\n  <code>options.audio.stereo</code> setting.  Note that this feature might\n  not work depending on the browser support and implementation.</blockquote>\n  The flag if OPUS audio codec should enable DTX (Discontinuous Transmission) for sending encoded audio data.\n  <small>This might help to reduce bandwidth as it reduces the bitrate during silence or background noise, and\n  goes hand-in-hand with the <code>options.voiceActivityDetection</code> flag in <a href=\"#method_joinRoom\">\n  <code>joinRoom()</code> method</a>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useinbandfec",
                            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.useinbandfec</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.useinbandfec</code> is configured, this overrides the\n  <code>options.audio.useinbandfec</code> setting. Note that this parameter should only be used\n  for debugging purposes only.</blockquote>\n  The flag if OPUS audio codec has the capability to take advantage of the in-band FEC\n  (Forward Error Correction) when sending encoded audio data.\n  <small>This helps to reduce the harm of packet loss by encoding information about the previous packet loss.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "maxplaybackrate",
                            "description": "<blockquote class=\"info\"><b>Deprecation Warning!</b>\n  This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.maxplaybackrate</code>\n  parameter in the <a href=\"#method_init\"><code>init()</code> method</a> instead. If the\n  <code>options.codecParams.audio.opus.maxplaybackrate</code> is configured, this overrides the\n  <code>options.audio.maxplaybackrate</code> setting.  Note that this feature might\n  not work depending on the browser support and implementation.\n  Note that this parameter should only be used for debugging purposes only.</blockquote>\n  The OPUS audio codec maximum output sampling rate in Hz (hertz) that is is capable of receiving\n  decoded audio data, to adjust to the hardware limitations and ensure that any sending audio data\n  would not encode at a higher sampling rate specified by this.\n  <small>This value must be between <code>8000</code> to <code>48000</code>.</small>\n  <small>When not provided, the default browser configuration is used.</small>",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "echoCancellation",
                            "description": "<blockquote class=\"info\">\n  For Chrome/Opera/IE/Safari/Bowser, the echo cancellation functionality may not work and may produce a terrible\n  feedback. It is recommended to use headphones or other microphone devices rather than the device\n  in-built microphones.</blockquote> The flag to enable echo cancellation for audio track.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback function fired when request has completed.\n  <small>Function parameters signature is <code>function (error, success)</code></small>\n  <small>Function request completion is determined by the <a href=\"#event_mediaAccessSuccess\">\n  <code>mediaAccessSuccess</code> event</a> triggering <code>isScreensharing</code> parameter payload value\n  as <code>true</code> for request success when User is not in the Room or is in Room without Peers,\n  or by the <a href=\"#event_peerRestart\"><code>peerRestart</code> event</a> triggering\n  <code>isSelfInitiateRestart</code> parameter payload value as <code>true</code> for all connected Peers\n  for request success when User is in Room with Peers.</small>",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error result in request.\n  <small>Defined as <code>null</code> when there are no errors in request</small>\n  <small>Object signature is the <code>shareScreen()</code> error when retrieving screensharing Stream.</small>",
                            "type": "Error|String"
                        },
                        {
                            "name": "success",
                            "description": "The success result in request.\n  <small>Defined as <code>null</code> when there are errors in request</small>\n  <small>Object signature is the screensharing Stream object.</small>",
                            "type": "MediaStream"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Share screen with audio\n  skylinkDemo.shareScreen(function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-screen\"), success);\n  });\n\n  // Example 2: Share screen without audio\n  skylinkDemo.shareScreen(false, function (error, success) {\n    if (error) return;\n    attachMediaStream(document.getElementById(\"my-screen\"), success);\n  });"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Retrieves screensharing Stream. <ol><li>If retrieval was successful: <ol><li>If browser is Firefox: <ol>\n  <li>If there are missing audio or video tracks requested: <ol>\n  <li>If there is any previous <code>shareScreen()</code> Stream: <ol>\n  <li>Invokes <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>.</li></ol></li>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a>\n  triggers parameter payload <code>state</code> as <code>FALLBACKED</code>, <code>isScreensharing</code>\n  value as <code>true</code> and <code>isAudioFallback</code> value as <code>false</code>.</li></ol></li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>true</code> and <code>isAudioFallback</code>\n  value as <code>false</code>.</li></ol></li><li>Else: <ol>\n  <li>If audio is requested: <small>Chrome, Safari and IE currently doesn't support retrieval of\n  audio track together with screensharing video track.</small> <ol><li>Retrieves audio Stream: <ol>\n  <li>If retrieval was successful: <ol><li>Attempts to attach screensharing Stream video track to audio Stream. <ol>\n  <li>If attachment was successful: <ol><li><a href=\"#event_mediaAccessSuccess\">\n  <code>mediaAccessSuccess</code> event</a> triggers parameter payload <code>isScreensharing</code>\n  value as <code>true</code> and <code>isAudioFallback</code> value as <code>false</code>.</li></ol></li><li>Else: <ol>\n  <li>If there is any previous <code>shareScreen()</code> Stream: <ol>\n  <li>Invokes <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>.</li></ol></li>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a> triggers parameter payload\n  <code>state</code> as <code>FALLBACKED</code>, <code>isScreensharing</code> value as <code>true</code> and\n  <code>isAudioFallback</code> value as <code>false</code>.</li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>true</code> and <code>isAudioFallback</code>\n  value as <code>false</code>.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li>If there is any previous <code>shareScreen()</code> Stream: <ol>\n  <li>Invokes <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>.</li></ol></li>\n  <li><a href=\"#event_mediaAccessFallback\"><code>mediaAccessFallback</code> event</a>\n  triggers parameter payload <code>state</code> as <code>FALLBACKED</code>, <code>isScreensharing</code>\n  value as <code>true</code> and <code>isAudioFallback</code> value as <code>false</code>.</li>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a> triggers\n  parameter payload <code>isScreensharing</code> value as <code>true</code> and <code>isAudioFallback</code>\n  value as <code>false</code>.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_mediaAccessSuccess\"><code>mediaAccessSuccess</code> event</a>\n  triggers parameter payload <code>isScreensharing</code> value as <code>true</code>\n  and <code>isAudioFallback</code> value as <code>false</code>.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li><a href=\"#event_mediaAccessError\"><code>mediaAccessError</code> event</a> triggers parameter payload\n  <code>isScreensharing</code> value as <code>true</code> and <code>isAudioFallback</code> value as\n  <code>false</code>.</li><li><b>ABORT</b> and return error.</li></ol></li></ol></li><li>If User is in Room: <ol>\n  <li><a href=\"#event_incomingStream\"><code>incomingStream</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code> and <code>stream</code> as <code>shareScreen()</code> Stream.</li>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li>\n  <li>Checks if MCU is enabled for App Key provided in <a href=\"#method_init\"><code>init()</code> method</a>. <ol>\n  <li>If MCU is enabled: <ol><li>Invoke <a href=\"#method_refreshConnection\"><code>refreshConnection()</code> method</a>.\n  <ol><li>If request has errors: <ol><li><b>ABORT</b> and return error.</li></ol></li></ol></li></ol></li><li>Else: <ol>\n  <li>If there are connected Peers in the Room: <ol><li>Invoke <a href=\"#method_refreshConnection\">\n  <code>refreshConnection()</code> method</a>. <ol><li>If request has errors: <ol><li><b>ABORT</b> and return error.</li>\n  </ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1380,
            "description": "<blockquote class=\"info\">\n  Note that broadcasted events from <a href=\"#method_muteStream\"><code>muteStream()</code> method</a>,\n  <a href=\"#method_stopStream\"><code>stopStream()</code> method</a>,\n  <a href=\"#method_stopScreen\"><code>stopScreen()</code> method</a>,\n  <a href=\"#method_sendMessage\"><code>sendMessage()</code> method</a>,\n  <a href=\"#method_unlockRoom\"><code>unlockRoom()</code> method</a> and\n  <a href=\"#method_lockRoom\"><code>lockRoom()</code> method</a> may be queued when\n  sent within less than an interval.\n</blockquote>\nFunction that stops <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>.",
            "itemtype": "method",
            "name": "stopScreen",
            "example": [
                "\n  function stopScreen () {\n    skylinkDemo.stopScreen();\n  }\n\n  skylinkDemo.shareScreen();"
            ],
            "trigger": "<ol class=\"desc-seq\">\n  <li>Checks if there is <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>. <ol>\n  <li>If there is <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a>: <ol>\n  <li>Stop <a href=\"#method_shareScreen\"><code>shareScreen()</code> Stream</a> Stream. <ol>\n  <li><a href=\"#event_mediaAccessStopped\"><code>mediaAccessStopped</code> event</a>\n  triggers parameter payload <code>isScreensharing</code> value as <code>true</code> and\n  <code>isAudioFallback</code> value as <code>false</code>.</li><li>If User is in Room: <ol>\n  <li><a href=\"#event_streamEnded\"><code>streamEnded</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code> and <code>isScreensharing</code> value as <code>true</code>.</li>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li>\n  </ol></li></ol></li><li>If User is in Room: <small><b>SKIP</b> this step if <code>stopScreen()</code>\n  was invoked from <a href=\"#method_shareScreen\"><code>shareScreen()</code> method</a>.</small> <ol>\n  <li>If there is <a href=\"#method_getUserMedia\"> <code>getUserMedia()</code>Stream</a> Stream: <ol>\n  <li><a href=\"#event_incomingStream\"><code>incomingStream</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code> and <code>stream</code> as\n  <a href=\"#method_getUserMedia\"><code>getUserMedia()</code> Stream</a>.</li>\n  <li><a href=\"#event_peerUpdated\"><code>peerUpdated</code> event</a> triggers parameter payload\n  <code>isSelf</code> value as <code>true</code>.</li></ol></li>\n  <li>Invoke <a href=\"#method_refreshConnection\"><code>refreshConnection()</code> method</a>.</li>\n  </ol></li></ol></li></ol></li></ol>",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1439,
            "description": "Function that handles the muting of Stream audio and video tracks.",
            "itemtype": "method",
            "name": "_muteStreams",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1497,
            "description": "Function that handles stopping the Stream streaming.",
            "itemtype": "method",
            "name": "_stopStreams",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1570,
            "description": "Function that parses the <code>getUserMedia()</code> settings provided.",
            "itemtype": "method",
            "name": "_parseStreamSettings",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1749,
            "description": "Function that handles the native <code>navigator.getUserMedia()</code> API success callback result.",
            "itemtype": "method",
            "name": "_onStreamAccessSuccess",
            "access": "private",
            "tagname": "",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1884,
            "description": "Function that handles the native <code>navigator.getUserMedia()</code> API failure callback result.",
            "itemtype": "method",
            "name": "_onStreamAccessError",
            "access": "private",
            "tagname": "",
            "since": "0.6.15",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1924,
            "description": "Function that handles the <code>RTCPeerConnection.onaddstream</code> remote MediaStream received.",
            "itemtype": "method",
            "name": "_onRemoteStreamAdded",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1958,
            "description": "Function that sets User's Stream to send to Peer connection.\nPriority for <code>shareScreen()</code> Stream over <code>getUserMedia()</code> Stream.",
            "itemtype": "method",
            "name": "_addLocalMediaStreams",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 2058,
            "description": "Function that handles ended streams.",
            "itemtype": "method",
            "name": "_handleEndedStreams",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 1,
            "description": "Function that modifies the session description to configure settings for OPUS audio codec.",
            "itemtype": "method",
            "name": "_setSDPCodecParams",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 157,
            "description": "Function that modifies the session description to limit the maximum sending bandwidth.\nSetting this may not necessarily work in Firefox.",
            "itemtype": "method",
            "name": "_setSDPBitrate",
            "access": "private",
            "tagname": "",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 292,
            "description": "Function that modifies the session description to set the preferred audio/video codec.",
            "itemtype": "method",
            "name": "_setSDPCodec",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 389,
            "description": "Function that modifies the session description to remove the previous experimental H264\ncodec that is apparently breaking connections.\nNOTE: We should perhaps not remove it since H264 is supported?",
            "itemtype": "method",
            "name": "_removeSDPFirefoxH264Pref",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 405,
            "description": "Function that modifies the session description to append the MediaStream and MediaStreamTrack IDs that seems\nto be missing from Firefox answer session description to Chrome connection causing freezes in re-negotiation.",
            "itemtype": "method",
            "name": "_addSDPMediaStreamTrackIDs",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 551,
            "description": "Function that modifies the session description to remove apt/rtx lines that does exists.",
            "itemtype": "method",
            "name": "_removeSDPUnknownAptRtx",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 606,
            "description": "Function that modifies the session description to remove codecs.",
            "itemtype": "method",
            "name": "_removeSDPCodecs",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 680,
            "description": "Function that modifies the session description to remove REMB packets fb.",
            "itemtype": "method",
            "name": "_removeSDPREMBPackets",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 696,
            "description": "Function that retrieves the session description selected codec.",
            "itemtype": "method",
            "name": "_getSDPSelectedCodec",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 753,
            "description": "Function that modifies the session description to remove non-relay ICE candidates.",
            "itemtype": "method",
            "name": "_removeSDPFilteredCandidates",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 795,
            "description": "Function that retrieves the current list of support codecs.",
            "itemtype": "method",
            "name": "_getCodecsSupport",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 887,
            "description": "Function that modifies the session description to handle the connection settings.\nThis is experimental and never recommended to end-users.",
            "itemtype": "method",
            "name": "_handleSDPConnectionSettings",
            "access": "private",
            "tagname": "",
            "since": "0.6.16",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 1067,
            "description": "Function that parses and retrieves the session description fingerprint.",
            "itemtype": "method",
            "name": "_getSDPFingerprint",
            "access": "private",
            "tagname": "",
            "since": "0.6.18",
            "class": "Skylink"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: typedef",
            "line": " source/components/debugger.js:1"
        },
        {
            "message": "param name/type/descript missing",
            "line": " source/components/room.js:402"
        },
        {
            "message": "unknown tag: typedef",
            "line": " source/components/utils.js:1"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " source/data-transfer.js:51"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:170"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:422"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:557"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:693"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:821"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:956"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:956"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1354"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1553"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-connection.js:152"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-connection.js:464"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-data.js:1"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-privileged.js:54"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-privileged.js:147"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:94"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:477"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:593"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:627"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:195"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:34"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:46"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:57"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:70"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:83"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:95"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:108"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:119"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:140"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:152"
        },
        {
            "message": "unknown tag: triggerforprophacknone",
            "line": " source/skylink-debug.js:191"
        },
        {
            "message": "unknown tag: triggerforprophacknone",
            "line": " source/skylink-debug.js:218"
        },
        {
            "message": "unknown tag: triggerforprophacknone",
            "line": " source/skylink-debug.js:232"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:248"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:317"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:70"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:180"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:256"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:236"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:608"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:829"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:868"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1006"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1033"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1060"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1087"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1114"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1380"
        },
        {
            "message": "Missing item type\nFunction to start initializing events.",
            "line": " source/components/datachannel.js:218"
        },
        {
            "message": "Missing item type\nFunction to send data.",
            "line": " source/components/datachannel.js:289"
        },
        {
            "message": "Missing item type\nFunction to close connection.",
            "line": " source/components/datachannel.js:348"
        },
        {
            "message": "Missing item type\nFunction that checks the `options` provided and loops the log items. \n- Returns `true` if there's not a need to loop.",
            "line": " source/components/debugger.js:404"
        },
        {
            "message": "Missing item type\nHandles the global log methods for all components.",
            "line": " source/components/debugger.js:428"
        },
        {
            "message": "Missing item type\nFunction to log \"debug\" level message.",
            "line": " source/components/debugger.js:433"
        },
        {
            "message": "Missing item type\nFunction to log \"log\" level message.",
            "line": " source/components/debugger.js:440"
        },
        {
            "message": "Missing item type\nFunction to log \"info\" level message.",
            "line": " source/components/debugger.js:447"
        },
        {
            "message": "Missing item type\nFunction to log \"warn\" level message.",
            "line": " source/components/debugger.js:454"
        },
        {
            "message": "Missing item type\nFunction to log \"error\" level message.",
            "line": " source/components/debugger.js:461"
        },
        {
            "message": "Missing item type\nFunction to configure component.\n- Returns the component ID.",
            "line": " source/components/debugger.js:468"
        },
        {
            "message": "Missing item type\nFunction to push stats to API.",
            "line": " source/components/debugger.js:489"
        },
        {
            "message": "Missing item type\nFunction to catch custom errors to be thrown.",
            "line": " source/components/debugger.js:495"
        },
        {
            "message": "Missing item type\nFunction to retrieve Peer {{#crossLink \"Temasys.Stream\"}}Streams{{/crossLink}}.",
            "line": " source/components/peer.js:1004"
        },
        {
            "message": "Missing item type\nFunction to retrieve Datachannel connections.",
            "line": " source/components/peer.js:1014"
        },
        {
            "message": "Missing item type\nFunction to retrieve DTMF sender.",
            "line": " source/components/peer.js:1024"
        },
        {
            "message": "Missing item type\nFunction to send message to Peer.",
            "line": " source/components/peer.js:1088"
        },
        {
            "message": "Missing item type\nInternal function to update and trigger state.",
            "line": " source/components/room.js:780"
        },
        {
            "message": "Missing item type\nInternal function to load XHR response.",
            "line": " source/components/room.js:808"
        },
        {
            "message": "Missing item type\nFunction to handle SM protocol for sending direction.",
            "line": " source/components/room.js:945"
        },
        {
            "message": "Missing item type\n\"joinRoom\" - Connects to the Room.",
            "line": " source/components/room.js:955"
        },
        {
            "message": "Missing item type\n\"enter\" - Broadcasts to existing Peers in the Room we exist.\n\"welcome\" - Respond to Peer who sent \"enter\" about who we are.\n\"restart\" - Re-negotiation request.",
            "line": " source/components/room.js:971"
        },
        {
            "message": "Missing item type\nFunction to handle SM protocol for receiving direction.",
            "line": " source/components/room.js:982"
        },
        {
            "message": "Missing item type\nSM protocol: \"joinRoom\"",
            "line": " source/components/room.js:991"
        },
        {
            "message": "Missing item type\nSM protocol: \"inRoom\"",
            "line": " source/components/room.js:999"
        },
        {
            "message": "Missing item type\nSM protocol: \"enter\"",
            "line": " source/components/room.js:1012"
        },
        {
            "message": "Missing item type\nEvent triggered when socket connection state has changed.",
            "line": " source/components/socket.js:195"
        },
        {
            "message": "Missing item type\nFunction to set configuration.",
            "line": " source/components/socket.js:452"
        },
        {
            "message": "Missing item type\nFunction to start socket connection.\n- Returns a Promise (Error error) for failure, (String socketId) for success",
            "line": " source/components/socket.js:561"
        },
        {
            "message": "Missing item type\nFunction to start socket connection.",
            "line": " source/components/socket.js:811"
        },
        {
            "message": "Missing item type\nFunction to send messages.",
            "line": " source/components/socket.js:829"
        },
        {
            "message": "Missing item type\nInternal function to send message.",
            "line": " source/components/socket.js:882"
        },
        {
            "message": "Missing item type\nFunction that handles caught errors.",
            "line": " source/components/utils.js:151"
        },
        {
            "message": "Missing item type\nFunction that returns the documented `.on()` method.",
            "line": " source/components/utils.js:162"
        },
        {
            "message": "Missing item type\nFunction that returns the documented `.once()` method.",
            "line": " source/components/utils.js:177"
        },
        {
            "message": "Missing item type\nFunction that returns the documented `.off()` method.",
            "line": " source/components/utils.js:197"
        },
        {
            "message": "Missing item type\nFunction that returns the documented `.catch()` method.",
            "line": " source/components/utils.js:233"
        },
        {
            "message": "Missing item type\nFunction that returns the documented `.emit()` method.",
            "line": " source/components/utils.js:240"
        },
        {
            "message": "Missing item type\nGlobal function that clones an object.",
            "line": " source/template/header.js:20"
        },
        {
            "message": "Missing item type\nEmit data state event function.",
            "line": " source/data-transfer.js:748"
        },
        {
            "message": "Missing item type\nComplete Peer function.",
            "line": " source/data-transfer.js:1889"
        },
        {
            "message": "Missing item type\nEmit event for Peers function.",
            "line": " source/data-transfer.js:1968"
        },
        {
            "message": "Missing item type\nReturn error and trigger them if failed before or during data transfers function.",
            "line": " source/data-transfer.js:1978"
        },
        {
            "message": "Missing item type\nSend WRQ protocol to start data transfers.",
            "line": " source/data-transfer.js:1994"
        },
        {
            "message": "Missing item type\nEmit event for Peers function.",
            "line": " source/data-transfer.js:2385"
        },
        {
            "message": "Missing item type\nEmit event for Peers function.",
            "line": " source/data-transfer.js:2770"
        },
        {
            "message": "Missing item type\nEmit event for Peers function.",
            "line": " source/data-transfer.js:2893"
        },
        {
            "message": "Missing item type\nEmit event for Peers function.",
            "line": " source/data-transfer.js:2942"
        }
    ]
}