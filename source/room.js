/**
 * Factory that handles the Room connection session.
 */
Skylink.prototype._createSessionFactory = function () {
  var self = this;
  return {
    // Room connection session states
    states: {
      locked: false,
      connected: false,
      hasMCU: false,
      readyState: null,
      readyStateError: null,
      readyStateHTTPStatus: null
    },
    // Room connection session HTTP GET path to Auth (API) server
    path: null,
    // Room name
    name: null,
    // Room connection session HTTP protocol (or over TLS)
    protocol: null,
    // Room credentials for connection
    credentials: {},
    // Room socket connection to Signaling server
    socket: null,

/**
 * -- Function that sets the current readyState.
 */
    setReadyState: function (state, error) {
      var room = this;
      log.debug([null, 'Room', room.name, 'Ready state ->'], state);

      room.states.readyState = state;
      room.states.readyStateError = error ? error.errorCode : null;
      room.states.readyStateHTTPStatus = error ? error.status : null;

      if (error) {
        log.error([null, 'Room', room.name, 'Ready state error ->'], error);
      }

      self._trigger('readyStateChange', state, error, room.name);
    },

/**
 * -- Function that gets the Room session token to start connection.
 */
    getSessionCredentials: function (name) {
      var room = this;
      var xhr = new XMLHttpRequest();

      // Fallback support for IE8/9 that supports XDomainRequest for credentials
      if (['object', 'function'].indexOf(typeof window.XDomainRequest) > -1) {
        xhr = new XDomainRequest();
      }

      room.protocol = self._options.forceSSL ? 'https:' : window.location.protocol;
      // Enforce Room name to be the defaultRoom provided as credentials based authentication does not allow Room switch
      // because the credentials are generated by on the duration, startDateTime and defaultRoom name which is
      // compared against by the Auth (API) server
      room.name = self._options.credentials ? self._options.defaultRoom : room;
      room.path = self._options.roomServer + '/api/' + self._options.appKey + '/' + room.name +
      // Append additional path for credentials based authentication
        (self._options.credentials ? '/' + self._options.credentials.startDateTime + '/' +
        self._options.credentials.duration + '?&cred=' + self._options.credentials.credentials + '&' :
      // Append additional random string query to prevent network cache
        '?&') + 'rand=' + Date.now();

      room.setReadyState(self.READY_STATE_CHANGE.INIT);

      // ------------------------------------------------
      //  Received response from Auth (API) server
      // ------------------------------------------------
      xhr.onload = function () {
        var response = JSON.parse(xhr.responseText || xhr.response || '{}') || {};
        var status = xhr.status || 200;

        log.debug('init() retrieved response ->', response);

        if (response.success) {
          // The required credentials to start Room connection
          room.credentials = {
            uid: response.username,
            userCred: response.userCred,
            timeStamp: response.timeStamp,
            rid: response.room_key,
            roomCred: response.roomCred,
            len: response.len,
            start: response.start,
            cid: response.cid,
            apiOwner: response.apiOwner,
            isPrivileged: response.isPrivileged === true,
            autoIntroduce: response.autoIntroduce !== false
          };

          room.socket = self._createSocketFactory(response.ipSigServer, {
            'https:': response.httpsPortList,
            'http:': response.httpPortList
          });

          room.setReadyState(self.READY_STATE_CHANGE.COMPLETED);

        } else {
          room.setReadyState(self.READY_STATE_CHANGE.ERROR, {
            content: response.info,
            status: status,
            errorCode: response.error
          });
        }
      };

      // ------------------------------------------------
      //  Network timeout from Auth (API) server
      // ------------------------------------------------
      xhr.onerror = function () {
        log.error('init() failed retrieving response due to network timeout.');

        room.setReadyState(self.READY_STATE_CHANGE.ERROR, {
          status: xhr.status || null,
          content: 'Network error occurred. (Status: ' + xhr.status + ')',
          errorCode: self.READY_STATE_CHANGE_ERROR.XML_HTTP_REQUEST_ERROR
        });
      };

      room.setReadyState(self.READY_STATE_CHANGE.LOADING);

      xhr.open('GET', room.protocol + room.path, true);
      xhr.send();
    }
  };
};

/**
 * Function that handles `joinRoom()` async callbacks to proceed to the next step.
 * @method _joinRoomCallback
 * @private
 * @for Skylink
 * @since 0.6.18
 */
Skylink.prototype._joinRoomCallback = function (result, callback) {
  var self = this;

  // joinRoom() start connection
  if (result.startConnection) {
    self.once('peerJoined', function (peerId, peerInfo) {
      self._joinRoomCallback({ peerId: peerId, room: peerInfo.room });
    });

    self._socketSendMessage({
      type: 'joinRoom',
      uid: self._user.room.session.uid,
      cid: self._user.room.session.cid,
      rid: self._user.room.session.rid,
      userCred: self._user.room.session.userCred,
      timeStamp: self._user.room.session.timeStamp,
      apiOwner: self._user.room.session.apiOwner,
      roomCred: self._user.room.session.roomCred,
      start: self._user.room.session.start,
      len: self._user.room.session.len,
      isPrivileged: self._user.room.session.isPrivileged === true, // Default to false if undefined
      autoIntroduce: self._user.room.session.autoIntroduce !== false, // Default to true if undefined
      key: self._options.appKey
    });

  // joinRoom() result success
  } else if (result.error) {
    log.error('joinRoom() failed ->', result);

    if (typeof callback === 'function') {
      callback({
        error: new Error(result.error),
        errorCode: result.errorCode || null,
        room: result.room
      }, null);
    }

  // joinRoom() result error
  } else {
    log.info('joinRoom() success ->', result);

    if (typeof callback === 'function') {
      callback(null, {
        peerId: result.peerId,
        room: result.room,
        peerInfo: self.getPeerInfo()
      });
    }
  }
};

/**
 * Function that handles `leaveRoom()` async callbacks to proceed to the next step.
 * @method _leaveRoomCallback
 * @private
 * @for Skylink
 * @since 0.6.18
 */
Skylink.prototype._leaveRoomCallback = function (result, callback) {
  var self = this;

  // leaveRoom() result success
  if (result.error) {
    log.error('leaveRoom() failed ->', result);

    if (typeof callback === 'function') {
      callback(new Error(result.error), null);
    }

  // leaveRoom() result success
  } else {
    log.info('leaveRoom() success ->', result);

    if (typeof callback === 'function') {
      callback(null, {
        peerId: result.peerId,
        previousRoom: result.room
      });
    }
  }
};

/**
 * Function that handles `init()` async callbacks to proceed to the next step.
 * @method _initCallback
 * @private
 * @for Skylink
 * @since 0.6.18
 */
Skylink.prototype._initCallback = function (result, callback) {
  var self = this;

  self._user.room.readyState = result.state;
  // Trigger `readyStateChange` event
  self._trigger('readyStateChange', result.state, result.state === self.READY_STATE_CHANGE.ERROR ? {
    content: result.content,
    status: result.status || null,
    errorCode: result.errorCode
  } : null, result.room);

  // init() result error
  if (result.state === self.READY_STATE_CHANGE.ERROR) {
    log.error('init() failed ->', result);

    if (typeof callback === 'function') {
      // Convert the parameters to suit the documented result
      callback({
        error: new Error(result.content),
        status: result.status || null,
        errorCode: result.errorCode
      }, null);
    }

  // init() result success
  } else if (result.state === self.READY_STATE_CHANGE.COMPLETED) {
    log.info('init() success ->', clone(self._options));

    if (typeof callback === 'function') {
      // Convert the parameters to suit the documented result
      callback(null, {
        serverUrl: self._user.room.path,
        readyState: self._user.room.readyState,
        appKey: self._options.appKey,
        roomServer: self._options.roomServer,
        defaultRoom: self._options.defaultRoom,
        selectedRoom: self._selectedRoom,
        enableDataChannel: self._options.enableDataChannel,
        enableIceTrickle: self._options.enableIceTrickle,
        enableTURNServer: self._options.enableTURNServer,
        enableSTUNServer: self._options.enableSTUNServer,
        TURNTransport: self._options.TURNServerTransport,
        audioFallback: self._options.audioFallback,
        forceSSL: self._options.forceSSL,
        socketTimeout: self._options.socketTimeout,
        forceTURNSSL: self._options.forceTURNSSL,
        audioCodec: self._options.audioCodec,
        videoCodec: self._options.videoCodec,
        forceTURN: self._options.forceTURN,
        usePublicSTUN: self._options.usePublicSTUN,
        disableVideoFecCodecs: self._options.disableVideoFecCodecs,
        disableComfortNoiseCodec: self._options.disableComfortNoiseCodec,
        disableREMB: self._options.disableREMB,
        filterCandidatesType: self._options.filterCandidatesType,
        throttleIntervals: self._options.throttleIntervals,
        throttleShouldThrowError: self._options.throttlingShouldThrowError,
        mcuUseRenegoRestart: self._options.mcuUseRenegoRestart,
        iceServer: self._options.turnServer,
        socketServer: self._options.socketServer
      });
    }
  }
};

/**
 * Function that handles `init()` fetching of API data.
 * @method _initFetchAPIData
 * @private
 * @for Skylink
 * @since 0.6.18
 */
Skylink.prototype._initFetchAPIData = function (room, callback, isInit) {
  
};

